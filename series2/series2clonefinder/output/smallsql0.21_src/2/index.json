{"duplicatesPercentage":8.78164557,"nodes":{"children":[{"LOC":16,"path":"/src/smallsql/database/SQLTokenizer.java","prefix_id":"T2-457","label":"/src/smallsql/database/SQLTokenizer.java","id":457,"children":[{"prefix_id":"T2-3","attributes":{"LOC":8,"endLine":642,"startLine":635,"file":"SQLTokenizer.java","clone":"{\r\n        addKeyWord( \"D\",    D);\r\n        addKeyWord( \"T\",    T);\r\n        addKeyWord( \"TS\",   TS);\r\n        addKeyWord( \"FN\",   FN);\r\n        addKeyWord( \"CALL\", CALL);\r\n        addKeyWord( \"OJ\", OJ);\r\n    }"},"id":3},{"prefix_id":"T2-4","attributes":{"LOC":8,"endLine":877,"startLine":870,"file":"SQLTokenizer.java","clone":"{\r\n\t\taddKeyWord( \"ISNULL\",      \tIFNULL); //alias for IFNULL, used from MS SQL Server with 2 parameter, from MS Access with 1 parameter\r\n        addKeyWord( \"IFNULL\",       IFNULL);\r\n        addKeyWord( \"USER\",         USER);\r\n        addKeyWord( \"CONVERT\",      CONVERT);\r\n        addKeyWord( \"CAST\",      \tCAST);\r\n\t\taddKeyWord( \"IIF\",      \tIIF);\r\n    }"},"id":4}]},{"LOC":2,"path":"/src/smallsql/database/SQLTokenizer.java","prefix_id":"T2-459","label":"/src/smallsql/database/SQLTokenizer.java","id":459,"children":[{"prefix_id":"T2-50","attributes":{"LOC":1,"endLine":164,"startLine":164,"file":"SQLTokenizer.java","clone":"c == '*' && (i+1 < sql.length) && (sql[i+1] == '/')"},"id":50},{"prefix_id":"T2-51","attributes":{"LOC":1,"endLine":111,"startLine":111,"file":"SQLTokenizer.java","clone":"c == '-' && (i+1 < sql.length) && (sql[i+1] == '-')"},"id":51}]},{"LOC":16,"path":"/src/smallsql/database/SQLTokenizer.java","prefix_id":"T2-461","label":"/src/smallsql/database/SQLTokenizer.java","id":461,"children":[{"prefix_id":"T2-100","attributes":{"LOC":8,"endLine":877,"startLine":870,"file":"SQLTokenizer.java","clone":"static{\r\n\t\taddKeyWord( \"ISNULL\",      \tIFNULL); //alias for IFNULL, used from MS SQL Server with 2 parameter, from MS Access with 1 parameter\r\n        addKeyWord( \"IFNULL\",       IFNULL);\r\n        addKeyWord( \"USER\",         USER);\r\n        addKeyWord( \"CONVERT\",      CONVERT);\r\n        addKeyWord( \"CAST\",      \tCAST);\r\n\t\taddKeyWord( \"IIF\",      \tIIF);\r\n    }"},"id":100},{"prefix_id":"T2-101","attributes":{"LOC":8,"endLine":642,"startLine":635,"file":"SQLTokenizer.java","clone":"static{\r\n        addKeyWord( \"D\",    D);\r\n        addKeyWord( \"T\",    T);\r\n        addKeyWord( \"TS\",   TS);\r\n        addKeyWord( \"FN\",   FN);\r\n        addKeyWord( \"CALL\", CALL);\r\n        addKeyWord( \"OJ\", OJ);\r\n    }"},"id":101}]},{"LOC":10,"path":"/src/smallsql/database/SQLTokenizer.java","prefix_id":"T2-463","label":"/src/smallsql/database/SQLTokenizer.java","id":463,"children":[{"prefix_id":"T2-148","attributes":{"LOC":5,"endLine":368,"startLine":363,"file":"SQLTokenizer.java","clone":"{\r\n        // for Error messages\r\n        keywords.put( new Integer(VALUE),       \"<expression>\" );\r\n        keywords.put( new Integer(IDENTIFIER),   \"<identifier>\" );\r\n        keywords.put( new Integer(NUMBERVALUE), \"<number>\" );\r\n    }"},"id":148},{"prefix_id":"T2-149","attributes":{"LOC":5,"endLine":399,"startLine":394,"file":"SQLTokenizer.java","clone":"{\r\n\t\t// for error messages\r\n\t\tkeywords.put( new Integer(LESSER_EQU),\t\"<=\" );\r\n\t\tkeywords.put( new Integer(UNEQUALS),   \t\"<>\" );\r\n\t\tkeywords.put( new Integer(GREATER_EQU), \">=\" );\r\n\t}"},"id":149}]},{"LOC":10,"path":"/src/smallsql/database/SQLTokenizer.java","prefix_id":"T2-465","label":"/src/smallsql/database/SQLTokenizer.java","id":465,"children":[{"prefix_id":"T2-454","attributes":{"LOC":5,"endLine":399,"startLine":394,"file":"SQLTokenizer.java","clone":"static{\r\n\t\t// for error messages\r\n\t\tkeywords.put( new Integer(LESSER_EQU),\t\"<=\" );\r\n\t\tkeywords.put( new Integer(UNEQUALS),   \t\"<>\" );\r\n\t\tkeywords.put( new Integer(GREATER_EQU), \">=\" );\r\n\t}"},"id":454},{"prefix_id":"T2-455","attributes":{"LOC":5,"endLine":368,"startLine":363,"file":"SQLTokenizer.java","clone":"static{\r\n        // for Error messages\r\n        keywords.put( new Integer(VALUE),       \"<expression>\" );\r\n        keywords.put( new Integer(IDENTIFIER),   \"<identifier>\" );\r\n        keywords.put( new Integer(NUMBERVALUE), \"<number>\" );\r\n    }"},"id":455}]},{"LOC":16,"path":"/src/smallsql/junit/TestExceptions.java","prefix_id":"T2-467","label":"/src/smallsql/junit/TestExceptions.java","id":467,"children":[{"prefix_id":"T2-38","attributes":{"LOC":8,"endLine":83,"startLine":76,"file":"TestExceptions.java","clone":"{\r\n    \tif(init) return;\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tdropTable( con, \"exceptions\");\r\n\t\tst.execute(\"Create Table exceptions (c varchar(30), i int)\");\r\n\t\tinit = true;\r\n    }"},"id":38}]},{"LOC":20,"path":"/src/smallsql/database/ExpressionFunctionDayOfMonth.java","prefix_id":"T2-469","label":"/src/smallsql/database/ExpressionFunctionDayOfMonth.java","id":469,"children":[{"prefix_id":"T2-136","attributes":{"LOC":5,"endLine":52,"startLine":48,"file":"ExpressionFunctionDayOfMonth.java","clone":"{\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.day;\r\n\t}"},"id":136}]},{"LOC":20,"path":"/src/smallsql/database/SSResultSet.java","prefix_id":"T2-471","label":"/src/smallsql/database/SSResultSet.java","id":471,"children":[{"prefix_id":"T2-73","attributes":{"LOC":10,"endLine":328,"startLine":319,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            MutableNumeric obj = getValue(columnIndex).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":73}]},{"LOC":21,"path":"/src/smallsql/database/SSResultSet.java","prefix_id":"T2-473","label":"/src/smallsql/database/SSResultSet.java","id":473,"children":[{"prefix_id":"T2-123","attributes":{"LOC":7,"endLine":296,"startLine":290,"file":"SSResultSet.java","clone":"try{\r\n            Object obj = getValue(columnIndex).getApiObject();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":123}]},{"LOC":14,"path":"/src/smallsql/database/SSResultSet.java","prefix_id":"T2-475","label":"/src/smallsql/database/SSResultSet.java","id":475,"children":[{"prefix_id":"T2-130","attributes":{"LOC":7,"endLine":166,"startLine":160,"file":"SSResultSet.java","clone":"try{\r\n            byte[] obj = getValue(columnIndex).getBytes();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":130}]},{"LOC":27,"path":"/src/smallsql/database/SSResultSet.java","prefix_id":"T2-477","label":"/src/smallsql/database/SSResultSet.java","id":477,"children":[{"prefix_id":"T2-158","attributes":{"LOC":9,"endLine":297,"startLine":289,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            Object obj = getValue(columnIndex).getApiObject();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":158}]},{"LOC":18,"path":"/src/smallsql/database/SSResultSet.java","prefix_id":"T2-479","label":"/src/smallsql/database/SSResultSet.java","id":479,"children":[{"prefix_id":"T2-166","attributes":{"LOC":9,"endLine":167,"startLine":159,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            byte[] obj = getValue(columnIndex).getBytes();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":166}]},{"LOC":90,"path":"/src/smallsql/database/SSResultSet.java","prefix_id":"T2-481","label":"/src/smallsql/database/SSResultSet.java","id":481,"children":[{"prefix_id":"T2-273","attributes":{"LOC":9,"endLine":106,"startLine":98,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getBoolean();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":273},{"prefix_id":"T2-274","attributes":{"LOC":9,"endLine":148,"startLine":140,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getDouble();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":274},{"prefix_id":"T2-276","attributes":{"LOC":9,"endLine":121,"startLine":113,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getInt();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":276},{"prefix_id":"T2-277","attributes":{"LOC":9,"endLine":130,"startLine":122,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":277},{"prefix_id":"T2-281","attributes":{"LOC":9,"endLine":139,"startLine":131,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getFloat();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":281}]},{"LOC":16,"path":"/src/smallsql/database/SSResultSet.java","prefix_id":"T2-483","label":"/src/smallsql/database/SSResultSet.java","id":483,"children":[{"prefix_id":"T2-294","attributes":{"LOC":8,"endLine":327,"startLine":320,"file":"SSResultSet.java","clone":"try{\r\n            MutableNumeric obj = getValue(columnIndex).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":294}]},{"LOC":16,"path":"/src/smallsql/database/SSResultSet.java","prefix_id":"T2-485","label":"/src/smallsql/database/SSResultSet.java","id":485,"children":[{"prefix_id":"T2-306","attributes":{"LOC":8,"endLine":157,"startLine":150,"file":"SSResultSet.java","clone":"try{\r\n            MutableNumeric obj = getValue(columnIndex).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal(scale);\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":306}]},{"LOC":60,"path":"/src/smallsql/database/SSResultSet.java","prefix_id":"T2-487","label":"/src/smallsql/database/SSResultSet.java","id":487,"children":[{"prefix_id":"T2-366","attributes":{"LOC":10,"endLine":189,"startLine":180,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":366},{"prefix_id":"T2-368","attributes":{"LOC":10,"endLine":177,"startLine":168,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":368},{"prefix_id":"T2-369","attributes":{"LOC":10,"endLine":199,"startLine":190,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":369}]},{"LOC":48,"path":"/src/smallsql/database/SSResultSet.java","prefix_id":"T2-489","label":"/src/smallsql/database/SSResultSet.java","id":489,"children":[{"prefix_id":"T2-413","attributes":{"LOC":8,"endLine":198,"startLine":191,"file":"SSResultSet.java","clone":"try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":413},{"prefix_id":"T2-414","attributes":{"LOC":8,"endLine":176,"startLine":169,"file":"SSResultSet.java","clone":"try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":414},{"prefix_id":"T2-415","attributes":{"LOC":8,"endLine":188,"startLine":181,"file":"SSResultSet.java","clone":"try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":415}]},{"LOC":20,"path":"/src/smallsql/database/SSResultSet.java","prefix_id":"T2-491","label":"/src/smallsql/database/SSResultSet.java","id":491,"children":[{"prefix_id":"T2-425","attributes":{"LOC":10,"endLine":158,"startLine":149,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            MutableNumeric obj = getValue(columnIndex).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal(scale);\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":425}]},{"LOC":70,"path":"/src/smallsql/database/SSResultSet.java","prefix_id":"T2-493","label":"/src/smallsql/database/SSResultSet.java","id":493,"children":[{"prefix_id":"T2-428","attributes":{"LOC":7,"endLine":129,"startLine":123,"file":"SSResultSet.java","clone":"try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":428},{"prefix_id":"T2-430","attributes":{"LOC":7,"endLine":120,"startLine":114,"file":"SSResultSet.java","clone":"try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getInt();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":430},{"prefix_id":"T2-431","attributes":{"LOC":7,"endLine":105,"startLine":99,"file":"SSResultSet.java","clone":"try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getBoolean();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":431},{"prefix_id":"T2-434","attributes":{"LOC":7,"endLine":138,"startLine":132,"file":"SSResultSet.java","clone":"try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getFloat();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":434},{"prefix_id":"T2-437","attributes":{"LOC":7,"endLine":147,"startLine":141,"file":"SSResultSet.java","clone":"try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getDouble();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":437}]},{"LOC":6,"path":"/src/smallsql/database/LongTreeList.java","prefix_id":"T2-495","label":"/src/smallsql/database/LongTreeList.java","id":495,"children":[{"prefix_id":"T2-89","attributes":{"LOC":3,"endLine":593,"startLine":591,"file":"LongTreeList.java","clone":"{\r\n\t\treturn ((data[ offset++ ] & 0xFF) << 8) | (data[ offset++ ] & 0xFF);\r\n\t}"},"id":89}]},{"LOC":22,"path":"/src/smallsql/database/ExpressionFunctionTruncate.java","prefix_id":"T2-497","label":"/src/smallsql/database/ExpressionFunctionTruncate.java","id":497,"children":[{"prefix_id":"T2-329","attributes":{"LOC":11,"endLine":60,"startLine":50,"file":"ExpressionFunctionTruncate.java","clone":"if(places > 0){\r\n\t\t\tfor(int i=0; i<places; i++){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue *= factor;\r\n\t\t}else{\r\n\t\t\tfor(int i=0; i>places; i--){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue /= factor;\r\n\t\t}"},"id":329}]},{"LOC":12,"path":"/src/smallsql/database/StoreImpl.java","prefix_id":"T2-499","label":"/src/smallsql/database/StoreImpl.java","id":499,"children":[{"prefix_id":"T2-211","attributes":{"LOC":6,"endLine":528,"startLine":523,"file":"StoreImpl.java","clone":"{\r\n        byte[] daten = new byte[length];\r\n        System.arraycopy( page, offset, daten, 0, length);\r\n        offset += length;\r\n        return daten;\r\n    }"},"id":211}]},{"LOC":22,"path":"/src/smallsql/database/ExpressionFunctionRound.java","prefix_id":"T2-501","label":"/src/smallsql/database/ExpressionFunctionRound.java","id":501,"children":[{"prefix_id":"T2-330","attributes":{"LOC":11,"endLine":60,"startLine":50,"file":"ExpressionFunctionRound.java","clone":"if(places > 0){\r\n\t\t\tfor(int i=0; i<places; i++){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue *= factor;\r\n\t\t}else{\r\n\t\t\tfor(int i=0; i>places; i--){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue /= factor;\r\n\t\t}"},"id":330}]},{"LOC":226,"path":"/src/smallsql/database/language/Language_de.java","prefix_id":"T2-503","label":"/src/smallsql/database/language/Language_de.java","id":503,"children":[{"prefix_id":"T2-60","attributes":{"LOC":113,"endLine":183,"startLine":51,"file":"Language_de.java","clone":"private final String[][] ENTRIES = {\r\n            { UNSUPPORTED_OPERATION           , \"Nicht unterstützte Funktion: {0}\" },\r\n            { CANT_LOCK_FILE                  , \"Die Datei ''{0}'' kann nicht gelockt werden. Eine einzelne SmallSQL Datenbank kann nur für einen einzigen Prozess geöffnet werden.\" },\r\n\r\n            { DB_EXISTENT                     , \"Die Datenbank ''{0}'' existiert bereits.\" },\r\n            { DB_NONEXISTENT                  , \"Die Datenbank ''{0}'' existiert nicht.\" },\r\n            { DB_NOT_DIRECTORY                , \"Das Verzeichnis ''{0}'' ist keine SmallSQL Datenbank.\" },\r\n            { DB_NOTCONNECTED                 , \"Sie sind nicht mit einer Datenbank verbunden.\" },\r\n\r\n            { CONNECTION_CLOSED               , \"Die Verbindung ist bereits geschlossen.\" },\r\n\r\n            { VIEW_INSERT                     , \"INSERT wird nicht unterstützt für eine View.\" },\r\n            { VIEWDROP_NOT_VIEW               , \"DROP VIEW kann nicht mit ''{0}'' verwendet werden, weil es keine View ist.\" },\r\n            { VIEW_CANTDROP                   , \"View ''{0}'' kann nicht gelöscht werden.\" },\r\n\r\n            { RSET_NOT_PRODUCED               , \"Es wurde kein ResultSet erzeugt.\" },\r\n            { RSET_READONLY                   , \"Das ResultSet ist schreibgeschützt.\" },\r\n            { RSET_FWDONLY                    , \"Das ResultSet ist forward only.\" },\r\n            { RSET_CLOSED                     , \"Das ResultSet ist geschlossen.\" },\r\n            { RSET_NOT_INSERT_ROW             , \"Der Cursor zeigt aktuell nicht auf die Einfügeposition (insert row).\" },\r\n            { RSET_ON_INSERT_ROW              , \"Der Cursor zeigt aktuell auf die Einfügeposition (insert row).\" },\r\n            { ROWSOURCE_READONLY              , \"Die Rowsource ist schreibgeschützt.\" },\r\n            { STMT_IS_CLOSED                  , \"Das Statement ist bereits geschlossen.\" },\r\n\r\n            { SUBQUERY_COL_COUNT              , \"Die Anzahl der Spalten in der Subquery muss 1 sein und nicht {0}.\" },\r\n            { JOIN_DELETE                     , \"Die Methode deleteRow wird nicht unterstützt für Joins.\" },\r\n            { JOIN_INSERT                     , \"Die Methode insertRow wird nicht unterstützt für Joins.\" },\r\n            { DELETE_WO_FROM                  , \"Die Methode deleteRow benötigt einen FROM Ausdruck.\" },\r\n            { INSERT_WO_FROM                  , \"Die Methode insertRow benötigt einen FROM Ausdruck.\" },\r\n\r\n            { TABLE_CANT_RENAME               , \"Die Tabelle ''{0}'' kann nicht umbenannt werden.\" },\r\n            { TABLE_CANT_DROP                 , \"Die Tabelle ''{0}'' kann nicht gelöscht werden.\" },\r\n            { TABLE_CANT_DROP_LOCKED          , \"Die Tabelle ''{0}'' kann nicht gelöscht werden, weil sie gelockt ist.\" },\r\n            { TABLE_CORRUPT_PAGE              , \"Beschädigte Tabellenseite bei Position: {0}.\" },\r\n            { TABLE_MODIFIED                  , \"Die Tabelle ''{0}'' wurde modifiziert.\" },\r\n            { TABLE_DEADLOCK                  , \"Deadlock, es kann kein Lock erzeugt werden für Tabelle ''{0}''.\" },\r\n            { TABLE_OR_VIEW_MISSING           , \"Tabelle oder View ''{0}'' existiert nicht.\" },\r\n            { TABLE_FILE_INVALID              , \"Die Datei ''{0}'' enthält keine gültige SmallSQL Tabelle.\" },\r\n            { TABLE_OR_VIEW_FILE_INVALID      , \"Die Datei ''{0}'' ist keine gültiger Tabellen oder View Speicher.\" },\r\n            { TABLE_EXISTENT                  , \"Die Tabelle oder View ''{0}'' existiert bereits.\" },\r\n\r\n            { FK_NOT_TABLE                    , \"''{0}'' ist keine Tabelle.\" },\r\n            { PK_ONLYONE                      , \"Eine Tabelle kann nur einen Primärschlüssel haben.\" },\r\n            { KEY_DUPLICATE                   , \"Doppelter Schlüssel.\" },\r\n\r\n            { MONTH_TOOLARGE                  , \"Der Monat ist zu groß im DATE oder TIMESTAMP Wert ''{0}''.\" },\r\n            { DAYS_TOOLARGE                   , \"Die Tage sind zu groß im DATE oder TIMESTAMP Wert ''{0}''.\" },\r\n            { HOURS_TOOLARGE                  , \"Die Stunden sind zu groß im TIME oder TIMESTAMP Wert ''{0}''.\" },\r\n            { MINUTES_TOOLARGE                , \"Die Minuten sind zu groß im TIME oder TIMESTAMP Wert ''{0}''.\" },\r\n            { SECS_TOOLARGE                   , \"Die Sekunden sind zu groß im TIME oder TIMESTAMP Wert ''{0}''.\" },\r\n            { MILLIS_TOOLARGE                 , \"Die Millisekunden sind zu groß im TIMESTAMP Wert ''{0}''.\" },\r\n            { DATETIME_INVALID                , \"''{0}'' ist ein ungültiges DATE, TIME or TIMESTAMP.\" },\r\n\r\n            { UNSUPPORTED_CONVERSION_OPER     , \"Nicht unterstützte Konvertierung zu Datentyp ''{0}'' von Datentyp ''{1}'' für die Operation ''{2}''.\" },\r\n            { UNSUPPORTED_DATATYPE_OPER       , \"Nicht unterstützter Datentyp ''{0}'' für Operation ''{1}''.\" },\r\n            { UNSUPPORTED_DATATYPE_FUNC       , \"Nicht unterstützter Datentyp ''{0}'' für Funktion ''{1}''.\" },\r\n            { UNSUPPORTED_CONVERSION_FUNC     , \"Nicht unterstützte Konvertierung zu Datentyp ''{0}'' für Funktion ''{1}''.\" },\r\n            { UNSUPPORTED_TYPE_CONV           , \"Nicht unterstützter Typ für CONVERT Funktion: {0}.\" },\r\n            { UNSUPPORTED_TYPE_SUM            , \"Nicht unterstützter Datentyp ''{0}'' für SUM Funktion.\" },\r\n            { UNSUPPORTED_TYPE_MAX            , \"Nicht unterstützter Datentyp ''{0}'' für MAX Funktion.\" },\r\n            { UNSUPPORTED_CONVERSION          , \"Kann nicht konvertieren ''{0}'' [{1}] zu ''{2}''.\" },\r\n            { INSERT_INVALID_LEN              , \"Ungültige Länge ''{0}'' in Funktion INSERT.\" },\r\n            { SUBSTR_INVALID_LEN              , \"Ungültige Länge ''{0}'' in Funktion SUBSTRING.\" },\r\n\r\n            { VALUE_STR_TOOLARGE              , \"Der String Wert ist zu groß für die Spalte.\" },\r\n            { VALUE_BIN_TOOLARGE              , \"Ein Binäre Wert mit Länge {0} ist zu groß für eine Spalte mit der Größe {1}.\" },\r\n            { VALUE_NULL_INVALID              , \"Null Werte sind ungültig für die Spalte ''{0}''.\" },\r\n            { VALUE_CANT_CONVERT              , \"Kann nicht konvertieren ein {0} Wert zu einem {1} Wert.\" },\r\n\r\n            { BYTEARR_INVALID_SIZE            , \"Ungültige Bytearray Große {0} für UNIQUEIDENFIER.\" },\r\n            { LOB_DELETED                     , \"Lob Objekt wurde gelöscht.\" },\r\n\r\n            { PARAM_CLASS_UNKNOWN             , \"Unbekante Parameter Klasse: ''{0}''.\" },\r\n            { PARAM_EMPTY                     , \"Parameter {0} ist leer.\" },\r\n            { PARAM_IDX_OUT_RANGE             , \"Parameter Index {0} liegt außerhalb des Gültigkeitsbereiches. Der Wert muss zwischen 1 und {1} liegen.\" },\r\n\r\n            { COL_DUPLICATE                   , \"Es gibt einen doppelten Spaltennamen: ''{0}''.\" },\r\n            { COL_MISSING                     , \"Spalte ''{0}'' wurde nicht gefunden.\" },\r\n            { COL_VAL_UNMATCH                 , \"Die Spaltenanzahl und Werteanzahl ist nicht identisch.\" },\r\n            { COL_INVALID_SIZE                , \"Ungültige Spaltengröße {0} für Spalte ''{1}''.\" },\r\n            { COL_WRONG_PREFIX                , \"Der Spaltenprefix ''{0}'' passt zu keinem Tabellennamen oder Aliasnamen in dieser Abfrage.\" },\r\n            { COL_READONLY                    , \"Die Spalte {0} ist schreibgeschützt.\" },\r\n            { COL_INVALID_NAME                , \"Ungültiger Spaltenname ''{0}''.\" },\r\n            { COL_IDX_OUT_RANGE               , \"Spaltenindex außerhalb des Gültigkeitsbereiches: {0}.\" },\r\n            { COL_AMBIGUOUS                   , \"Die Spalte ''{0}'' ist mehrdeutig.\" },\r\n\r\n            { GROUP_AGGR_INVALID              , \"Aggregatfunktion sind nicht erlaubt im GROUP BY Klausel: ({0}).\" },\r\n            { GROUP_AGGR_NOTPART              , \"Der Ausdruck ''{0}'' ist nicht Teil einer Aggregatfunktion oder GROUP BY Klausel.\" },\r\n            { ORDERBY_INTERNAL                , \"Interner Error mit ORDER BY.\" },\r\n            { UNION_DIFFERENT_COLS            , \"Die SELECT Teile des UNION haben eine unterschiedliche Spaltenanzahl: {0} und {1}.\" },\r\n\r\n            { INDEX_EXISTS                    , \"Index ''{0}'' existiert bereits.\" },\r\n            { INDEX_MISSING                   , \"Index ''{0}'' existiert nicht.\" },\r\n            { INDEX_FILE_INVALID              , \"Die Datei ''{0}'' ist kein gültiger Indexspeicher.\" },\r\n            { INDEX_CORRUPT                   , \"Error beim Laden des Index. Die Index Datei ist beschädigt. ({0}).\" },\r\n            { INDEX_TOOMANY_EQUALS            , \"Zu viele identische Einträge im Index.\" },\r\n\r\n            { FILE_TOONEW                     , \"Dateiversion ({0}) der Datei ''{1}'' ist zu neu für diese Laufzeitbibliothek.\" },\r\n            { FILE_TOOOLD                     , \"Dateiversion ({0}) der Datei ''{1}'' ist zu alt für diese Laufzeitbibliothek.\" },\r\n            { FILE_CANT_DELETE                , \"Datei ''{0}'' kann nicht gelöscht werden.\" },\r\n\r\n            { ROW_0_ABSOLUTE                  , \"Datensatz 0 ist ungültig für die Methode absolute().\" },\r\n            { ROW_NOCURRENT                   , \"Kein aktueller Datensatz.\" },\r\n            { ROWS_WRONG_MAX                  , \"Fehlerhafter Wert für Maximale Datensatzanzahl: {0}.\" },\r\n            { ROW_LOCKED                      , \"Der Datensatz ist gelocked von einer anderen Verbindung.\" },\r\n            { ROW_DELETED                     , \"Der Datensatz ist bereits gelöscht.\" },\r\n\r\n            { SAVEPT_INVALID_TRANS            , \"Der Savepoint ist nicht gültig für die aktuelle Transaction.\" },\r\n            { SAVEPT_INVALID_DRIVER           , \"Der Savepoint ist nicht gültig für diesen Treiber {0}.\" },\r\n\r\n            { ALIAS_UNSUPPORTED               , \"Ein Alias ist nicht erlaubt für diesen Typ von Rowsource.\" },\r\n            { ISOLATION_UNKNOWN               , \"Unbekantes Transaktion Isolation Level: {0}.\" },\r\n            { FLAGVALUE_INVALID               , \"Ungültiger Wert des Flags in Methode getMoreResults: {0}.\" },\r\n            { ARGUMENT_INVALID                , \"Ungültiges Argument in Methode setNeedGenratedKeys: {0}.\" },\r\n            { GENER_KEYS_UNREQUIRED           , \"GeneratedKeys wurden nicht angefordert.\" },\r\n            { SEQUENCE_HEX_INVALID            , \"Ungültige Hexadecimal Sequenze bei Position {0}.\" },\r\n            { SEQUENCE_HEX_INVALID_STR        , \"Ungültige Hexadecimal Sequenze bei Position {0} in ''{1}''.\" },\r\n\r\n            { SYNTAX_BASE_OFS                 , \"Syntax Error bei Position {0} in ''{1}''. \" },\r\n            { SYNTAX_BASE_END                 , \"Syntax Error, unerwartetes Ende des SQL Strings. \" },\r\n            { STXADD_ADDITIONAL_TOK           , \"Zusätzliche Zeichen nach dem Ende des SQL statement.\" },\r\n            { STXADD_IDENT_EXPECT             , \"Bezeichner erwartet.\" },\r\n            { STXADD_IDENT_EMPTY              , \"Leerer Bezeichner.\" },\r\n            { STXADD_IDENT_WRONG              , \"Ungültiger Bezeichner ''{0}''.\" },\r\n            { STXADD_OPER_MINUS               , \"Ungültiger Operator Minus für Datentyp VARBINARY.\" },\r\n            { STXADD_FUNC_UNKNOWN             , \"Unbekannte Funktion.\" },\r\n            { STXADD_PARAM_INVALID_COUNT      , \"Ungültige Paramter Anzahl.\" },\r\n            { STXADD_JOIN_INVALID             , \"Ungültige Join Syntax.\" },\r\n            { STXADD_FROM_PAR_CLOSE           , \"Unerwartet schließende Klammer in FROM Klausel.\" },\r\n            { STXADD_KEYS_REQUIRED            , \"Benötige Schlüsselwörter sind: \" },\r\n            { STXADD_NOT_NUMBER               , \"Eine Zahl ist erforderlich: ''{0}''.\" },\r\n            { STXADD_COMMENT_OPEN             , \"Fehlendes Kommentarende ''*/''.\" },\r\n    };"},"id":60}]},{"LOC":36,"path":"/src/smallsql/junit/TestTransactions.java","prefix_id":"T2-505","label":"/src/smallsql/junit/TestTransactions.java","id":505,"children":[{"prefix_id":"T2-84","attributes":{"LOC":18,"endLine":424,"startLine":405,"file":"TestTransactions.java","clone":"{\r\n\t\tConnection con1 = AllTests.getConnection();\r\n\t\tConnection con2 = AllTests.createConnection();\r\n\t\ttry{\t\t\r\n\t\t\tcon2.setTransactionIsolation( Connection.TRANSACTION_READ_UNCOMMITTED );\r\n\t\t\tcon1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon1.setAutoCommit(false);\r\n\t\t\tcon1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");\r\n\r\n\t\t\tResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");\r\n\t\t\tassertTrue( rs2.next() );\r\n\t\t\tassertEquals( 1, rs2.getInt(1) );\r\n\t\t}finally{\r\n\t\t    dropTable(con1, \"transactions\");\r\n\t\t\tcon1.setAutoCommit(true);\r\n\t\t\tcon2.close();\r\n\t\t}\r\n\t}"},"id":84},{"prefix_id":"T2-85","attributes":{"LOC":18,"endLine":446,"startLine":427,"file":"TestTransactions.java","clone":"{\r\n\t\tConnection con1 = AllTests.getConnection();\r\n\t\tConnection con2 = AllTests.createConnection();\r\n\t\ttry{\t\t\r\n\t\t\tcon2.setTransactionIsolation( Connection.TRANSACTION_READ_COMMITTED );\r\n\t\t\tcon1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon1.setAutoCommit(false);\r\n\t\t\tcon1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");\r\n\r\n\t\t\tResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");\r\n\t\t\tassertTrue( rs2.next() );\r\n\t\t\tassertEquals( 0, rs2.getInt(1) );\r\n\t\t}finally{\r\n            dropTable(con1, \"transactions\");\r\n\t\t\tcon1.setAutoCommit(true);\r\n\t\t\tcon2.close();\r\n\t\t}\r\n\t}"},"id":85}]},{"LOC":42,"path":"/src/smallsql/junit/TestTransactions.java","prefix_id":"T2-507","label":"/src/smallsql/junit/TestTransactions.java","id":507,"children":[{"prefix_id":"T2-388","attributes":{"LOC":21,"endLine":135,"startLine":110,"file":"TestTransactions.java","clone":"{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions (Select * From transactions)\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.commit();\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}"},"id":388},{"prefix_id":"T2-389","attributes":{"LOC":21,"endLine":194,"startLine":169,"file":"TestTransactions.java","clone":"{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.rollback();\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}"},"id":389}]},{"LOC":24,"path":"/src/smallsql/junit/TestGroupBy.java","prefix_id":"T2-509","label":"/src/smallsql/junit/TestGroupBy.java","id":509,"children":[{"prefix_id":"T2-193","attributes":{"LOC":12,"endLine":152,"startLine":141,"file":"TestGroupBy.java","clone":"{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tPreparedStatement pr = con.prepareStatement(\"Select count(*) FROM \" + table1 + \" Group By name Order By name DESC\");\r\n\t\tfor(int i=1; i<=3; i++){\r\n\t\t\tResultSet rs = pr.executeQuery( );\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 1, rs.getInt(1));\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 3, rs.getInt(1));\r\n\t\t}\r\n\t}"},"id":193},{"prefix_id":"T2-194","attributes":{"LOC":12,"endLine":179,"startLine":168,"file":"TestGroupBy.java","clone":"{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tPreparedStatement pr = con.prepareStatement(\"Select abs(sum(abs(3-id))+2) FROM \" + table1 + \" Group By name+'a' Order By 'b'+(Name+'a')\");\r\n\t\tfor(int i=1; i<=3; i++){\r\n\t\t\tResultSet rs = pr.executeQuery( );\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 5, rs.getInt(1));\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 4, rs.getInt(1));\r\n\t\t}\r\n\t}"},"id":194}]},{"LOC":20,"path":"/src/smallsql/database/SSCallableStatement.java","prefix_id":"T2-511","label":"/src/smallsql/database/SSCallableStatement.java","id":511,"children":[{"prefix_id":"T2-72","attributes":{"LOC":10,"endLine":211,"startLine":202,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            MutableNumeric obj = getValue(i).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":72}]},{"LOC":21,"path":"/src/smallsql/database/SSCallableStatement.java","prefix_id":"T2-513","label":"/src/smallsql/database/SSCallableStatement.java","id":513,"children":[{"prefix_id":"T2-121","attributes":{"LOC":7,"endLine":91,"startLine":85,"file":"SSCallableStatement.java","clone":"try{\r\n            String obj = getValue(i).getString();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":121},{"prefix_id":"T2-122","attributes":{"LOC":7,"endLine":200,"startLine":194,"file":"SSCallableStatement.java","clone":"try{\r\n            Object obj = getValue(i).getObject();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":122}]},{"LOC":14,"path":"/src/smallsql/database/SSCallableStatement.java","prefix_id":"T2-515","label":"/src/smallsql/database/SSCallableStatement.java","id":515,"children":[{"prefix_id":"T2-131","attributes":{"LOC":7,"endLine":161,"startLine":155,"file":"SSCallableStatement.java","clone":"try{\r\n            byte[] obj = getValue(i).getBytes();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":131}]},{"LOC":27,"path":"/src/smallsql/database/SSCallableStatement.java","prefix_id":"T2-517","label":"/src/smallsql/database/SSCallableStatement.java","id":517,"children":[{"prefix_id":"T2-157","attributes":{"LOC":9,"endLine":201,"startLine":193,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            Object obj = getValue(i).getObject();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":157},{"prefix_id":"T2-159","attributes":{"LOC":9,"endLine":92,"startLine":84,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            String obj = getValue(i).getString();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":159}]},{"LOC":18,"path":"/src/smallsql/database/SSCallableStatement.java","prefix_id":"T2-519","label":"/src/smallsql/database/SSCallableStatement.java","id":519,"children":[{"prefix_id":"T2-167","attributes":{"LOC":9,"endLine":162,"startLine":154,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            byte[] obj = getValue(i).getBytes();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":167}]},{"LOC":90,"path":"/src/smallsql/database/SSCallableStatement.java","prefix_id":"T2-521","label":"/src/smallsql/database/SSCallableStatement.java","id":521,"children":[{"prefix_id":"T2-275","attributes":{"LOC":9,"endLine":143,"startLine":135,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":275},{"prefix_id":"T2-278","attributes":{"LOC":9,"endLine":116,"startLine":108,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getInt();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":278},{"prefix_id":"T2-279","attributes":{"LOC":9,"endLine":134,"startLine":126,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getFloat();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":279},{"prefix_id":"T2-280","attributes":{"LOC":9,"endLine":101,"startLine":93,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getBoolean();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":280},{"prefix_id":"T2-282","attributes":{"LOC":9,"endLine":125,"startLine":117,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":282}]},{"LOC":16,"path":"/src/smallsql/database/SSCallableStatement.java","prefix_id":"T2-523","label":"/src/smallsql/database/SSCallableStatement.java","id":523,"children":[{"prefix_id":"T2-293","attributes":{"LOC":8,"endLine":210,"startLine":203,"file":"SSCallableStatement.java","clone":"try{\r\n            MutableNumeric obj = getValue(i).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":293}]},{"LOC":16,"path":"/src/smallsql/database/SSCallableStatement.java","prefix_id":"T2-525","label":"/src/smallsql/database/SSCallableStatement.java","id":525,"children":[{"prefix_id":"T2-307","attributes":{"LOC":8,"endLine":152,"startLine":145,"file":"SSCallableStatement.java","clone":"try{\r\n            MutableNumeric obj = getValue(i).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal(scale);\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":307}]},{"LOC":60,"path":"/src/smallsql/database/SSCallableStatement.java","prefix_id":"T2-527","label":"/src/smallsql/database/SSCallableStatement.java","id":527,"children":[{"prefix_id":"T2-364","attributes":{"LOC":10,"endLine":192,"startLine":183,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":364},{"prefix_id":"T2-365","attributes":{"LOC":10,"endLine":182,"startLine":173,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":365},{"prefix_id":"T2-367","attributes":{"LOC":10,"endLine":172,"startLine":163,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":367}]},{"LOC":48,"path":"/src/smallsql/database/SSCallableStatement.java","prefix_id":"T2-529","label":"/src/smallsql/database/SSCallableStatement.java","id":529,"children":[{"prefix_id":"T2-412","attributes":{"LOC":8,"endLine":171,"startLine":164,"file":"SSCallableStatement.java","clone":"try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":412},{"prefix_id":"T2-416","attributes":{"LOC":8,"endLine":181,"startLine":174,"file":"SSCallableStatement.java","clone":"try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":416},{"prefix_id":"T2-417","attributes":{"LOC":8,"endLine":191,"startLine":184,"file":"SSCallableStatement.java","clone":"try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":417}]},{"LOC":20,"path":"/src/smallsql/database/SSCallableStatement.java","prefix_id":"T2-531","label":"/src/smallsql/database/SSCallableStatement.java","id":531,"children":[{"prefix_id":"T2-424","attributes":{"LOC":10,"endLine":153,"startLine":144,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            MutableNumeric obj = getValue(i).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal(scale);\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":424}]},{"LOC":70,"path":"/src/smallsql/database/SSCallableStatement.java","prefix_id":"T2-533","label":"/src/smallsql/database/SSCallableStatement.java","id":533,"children":[{"prefix_id":"T2-429","attributes":{"LOC":7,"endLine":124,"startLine":118,"file":"SSCallableStatement.java","clone":"try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":429},{"prefix_id":"T2-432","attributes":{"LOC":7,"endLine":115,"startLine":109,"file":"SSCallableStatement.java","clone":"try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getInt();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":432},{"prefix_id":"T2-433","attributes":{"LOC":7,"endLine":133,"startLine":127,"file":"SSCallableStatement.java","clone":"try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getFloat();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":433},{"prefix_id":"T2-435","attributes":{"LOC":7,"endLine":142,"startLine":136,"file":"SSCallableStatement.java","clone":"try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":435},{"prefix_id":"T2-436","attributes":{"LOC":7,"endLine":100,"startLine":94,"file":"SSCallableStatement.java","clone":"try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getBoolean();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":436}]},{"LOC":2,"path":"/src/smallsql/database/SSDatabaseMetaData.java","prefix_id":"T2-535","label":"/src/smallsql/database/SSDatabaseMetaData.java","id":535,"children":[{"prefix_id":"T2-96","attributes":{"LOC":1,"endLine":821,"startLine":821,"file":"SSDatabaseMetaData.java","clone":"String[] colNames = {\"PKTABLE_CAT\", \"PKTABLE_SCHEM\", \"PKTABLE_NAME\", \"PKCOLUMN_NAME\", \"FKTABLE_CAT\", \"FKTABLE_SCHEM\", \"FKTABLE_NAME\", \"FKCOLUMN_NAME\", \"KEY_SEQ\", \"UPDATE_RULE\", \"DELETE_RULE\", \"FK_NAME\", \"PK_NAME\", \"DEFERRABILITY\"};"},"id":96}]},{"LOC":2,"path":"/src/smallsql/database/SSDatabaseMetaData.java","prefix_id":"T2-537","label":"/src/smallsql/database/SSDatabaseMetaData.java","id":537,"children":[{"prefix_id":"T2-222","attributes":{"LOC":1,"endLine":838,"startLine":838,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":222},{"prefix_id":"T2-223","attributes":{"LOC":1,"endLine":839,"startLine":839,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":223}]},{"LOC":4,"path":"/src/smallsql/database/SSDatabaseMetaData.java","prefix_id":"T2-539","label":"/src/smallsql/database/SSDatabaseMetaData.java","id":539,"children":[{"prefix_id":"T2-226","attributes":{"LOC":1,"endLine":854,"startLine":854,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":226},{"prefix_id":"T2-227","attributes":{"LOC":1,"endLine":842,"startLine":842,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":227},{"prefix_id":"T2-228","attributes":{"LOC":1,"endLine":843,"startLine":843,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":228},{"prefix_id":"T2-229","attributes":{"LOC":1,"endLine":853,"startLine":853,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":229}]},{"LOC":2,"path":"/src/smallsql/database/SSDatabaseMetaData.java","prefix_id":"T2-541","label":"/src/smallsql/database/SSDatabaseMetaData.java","id":541,"children":[{"prefix_id":"T2-232","attributes":{"LOC":1,"endLine":861,"startLine":861,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":232},{"prefix_id":"T2-233","attributes":{"LOC":1,"endLine":837,"startLine":837,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":233}]},{"LOC":8,"path":"/src/smallsql/database/SSDatabaseMetaData.java","prefix_id":"T2-543","label":"/src/smallsql/database/SSDatabaseMetaData.java","id":543,"children":[{"prefix_id":"T2-236","attributes":{"LOC":1,"endLine":862,"startLine":862,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":236},{"prefix_id":"T2-237","attributes":{"LOC":1,"endLine":856,"startLine":856,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":237},{"prefix_id":"T2-238","attributes":{"LOC":1,"endLine":840,"startLine":840,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":238},{"prefix_id":"T2-239","attributes":{"LOC":1,"endLine":841,"startLine":841,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":239},{"prefix_id":"T2-240","attributes":{"LOC":1,"endLine":833,"startLine":833,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}"},"id":240},{"prefix_id":"T2-241","attributes":{"LOC":1,"endLine":859,"startLine":859,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":241},{"prefix_id":"T2-242","attributes":{"LOC":1,"endLine":863,"startLine":863,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":242},{"prefix_id":"T2-243","attributes":{"LOC":1,"endLine":857,"startLine":857,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":243}]},{"LOC":2,"path":"/src/smallsql/database/SSDatabaseMetaData.java","prefix_id":"T2-545","label":"/src/smallsql/database/SSDatabaseMetaData.java","id":545,"children":[{"prefix_id":"T2-246","attributes":{"LOC":1,"endLine":845,"startLine":845,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}"},"id":246},{"prefix_id":"T2-247","attributes":{"LOC":1,"endLine":844,"startLine":844,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}"},"id":247}]},{"LOC":2,"path":"/src/smallsql/database/SSDatabaseMetaData.java","prefix_id":"T2-547","label":"/src/smallsql/database/SSDatabaseMetaData.java","id":547,"children":[{"prefix_id":"T2-250","attributes":{"LOC":1,"endLine":855,"startLine":855,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.BOOLEAN),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BOOLEAN) ),         Utils.getInteger(1),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":250},{"prefix_id":"T2-251","attributes":{"LOC":1,"endLine":834,"startLine":834,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.BIT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIT) ),             Utils.getInteger(1),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":251}]},{"LOC":9,"path":"/src/smallsql/database/SSDatabaseMetaData.java","prefix_id":"T2-549","label":"/src/smallsql/database/SSDatabaseMetaData.java","id":549,"children":[{"prefix_id":"T2-254","attributes":{"LOC":1,"endLine":851,"startLine":851,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.REAL) ),        \t  Utils.getInteger(7),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":254},{"prefix_id":"T2-255","attributes":{"LOC":1,"endLine":847,"startLine":847,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),      Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLMONEY) ),      Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}"},"id":255},{"prefix_id":"T2-256","attributes":{"LOC":1,"endLine":835,"startLine":835,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TINYINT) ),         Utils.getInteger(3),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.TRUE,  Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":256},{"prefix_id":"T2-257","attributes":{"LOC":1,"endLine":849,"startLine":849,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLINT) ),        Utils.getInteger(5),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":257},{"prefix_id":"T2-258","attributes":{"LOC":1,"endLine":846,"startLine":846,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),           Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.MONEY) ),           Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}"},"id":258},{"prefix_id":"T2-259","attributes":{"LOC":1,"endLine":848,"startLine":848,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.INT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.INT) ),             Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":259},{"prefix_id":"T2-260","attributes":{"LOC":1,"endLine":850,"startLine":850,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":260},{"prefix_id":"T2-261","attributes":{"LOC":1,"endLine":836,"startLine":836,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIGINT) ),          Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":261},{"prefix_id":"T2-262","attributes":{"LOC":1,"endLine":852,"startLine":852,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":262}]},{"LOC":4,"path":"/src/smallsql/database/SSDatabaseMetaData.java","prefix_id":"T2-551","label":"/src/smallsql/database/SSDatabaseMetaData.java","id":551,"children":[{"prefix_id":"T2-347","attributes":{"LOC":1,"endLine":831,"startLine":831,"file":"SSDatabaseMetaData.java","clone":"String[] colNames = {\t\t\"TYPE_NAME\", \t\t\t\t\"DATA_TYPE\", \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"PRECISION\", \t\"LITERAL_PREFIX\", \"LITERAL_SUFFIX\", \t\t\"CREATE_PARAMS\", \"NULLABLE\", \t \"CASE_SENSITIVE\", \"SEARCHABLE\", \"UNSIGNED_ATTRIBUTE\", \"FIXED_PREC_SCALE\", \"AUTO_INCREMENT\", \"LOCAL_TYPE_NAME\", \"MINIMUM_SCALE\", \"MAXIMUM_SCALE\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"NUM_PREC_RADIX\"};"},"id":347},{"prefix_id":"T2-348","attributes":{"LOC":1,"endLine":753,"startLine":753,"file":"SSDatabaseMetaData.java","clone":"String[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"NUM_PREC_RADIX\", \"NULLABLE\", \"REMARKS\", \"COLUMN_DEF\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"CHAR_OCTET_LENGTH\", \"ORDINAL_POSITION\", \"IS_NULLABLE\"};"},"id":348}]},{"LOC":21,"path":"/src/smallsql/database/IndexDescription.java","prefix_id":"T2-553","label":"/src/smallsql/database/IndexDescription.java","id":553,"children":[{"prefix_id":"T2-32","attributes":{"LOC":7,"endLine":219,"startLine":213,"file":"IndexDescription.java","clone":"{\r\n\t    ByteBuffer buffer = ByteBuffer.allocate(8);\r\n\t    buffer.putInt(MAGIC_INDEX);\r\n\t    buffer.putInt(INDEX_VERSION);\r\n\t    buffer.position(0);\r\n\t    raFile.write(buffer);\r\n\t}"},"id":32}]},{"LOC":18,"path":"/src/smallsql/database/IndexDescription.java","prefix_id":"T2-555","label":"/src/smallsql/database/IndexDescription.java","id":555,"children":[{"prefix_id":"T2-409","attributes":{"LOC":9,"endLine":194,"startLine":186,"file":"IndexDescription.java","clone":"catch(Throwable e){\r\n            if(raFile != null)\r\n                try{\r\n                    raFile.close();\r\n                }catch(Exception e2){\r\n                    DriverManager.println(e2.toString());\r\n                }\r\n            throw SmallSQLException.createFromException(e);\r\n        }"},"id":409}]},{"LOC":2,"path":"/src/smallsql/junit/TestDBMetaData.java","prefix_id":"T2-557","label":"/src/smallsql/junit/TestDBMetaData.java","id":557,"children":[{"prefix_id":"T2-13","attributes":{"LOC":1,"endLine":211,"startLine":211,"file":"TestDBMetaData.java","clone":"int[] colTypes = {Types.VARCHAR, Types.SMALLINT, Types.INTEGER, Types.VARCHAR, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.BOOLEAN, Types.SMALLINT, Types.BOOLEAN, Types.BOOLEAN, Types.BOOLEAN, Types.NULL, Types.INTEGER, Types.INTEGER, Types.NULL, Types.NULL, Types.NULL };"},"id":13},{"prefix_id":"T2-14","attributes":{"LOC":1,"endLine":183,"startLine":183,"file":"TestDBMetaData.java","clone":"int[] colTypes = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.INTEGER, Types.INTEGER, Types.INTEGER, Types.NULL, Types.VARCHAR, Types.NULL, Types.NULL, Types.INTEGER, Types.INTEGER, Types.VARCHAR};"},"id":14}]},{"LOC":18,"path":"/src/smallsql/junit/TestDBMetaData.java","prefix_id":"T2-559","label":"/src/smallsql/junit/TestDBMetaData.java","id":559,"children":[{"prefix_id":"T2-22","attributes":{"LOC":6,"endLine":169,"startLine":164,"file":"TestDBMetaData.java","clone":"{\r\n            String type2 = rs.getString(\"TABLE_TYPE\");\r\n            assertTrue( type+\"-\"+type2, type.compareTo(type2)<0);\r\n            type = type2;\r\n            count++;\r\n        }"},"id":22}]},{"LOC":2,"path":"/src/smallsql/junit/TestDBMetaData.java","prefix_id":"T2-561","label":"/src/smallsql/junit/TestDBMetaData.java","id":561,"children":[{"prefix_id":"T2-97","attributes":{"LOC":1,"endLine":234,"startLine":234,"file":"TestDBMetaData.java","clone":"String[] colNames = {\"PKTABLE_CAT\", \"PKTABLE_SCHEM\", \"PKTABLE_NAME\", \"PKCOLUMN_NAME\", \"FKTABLE_CAT\", \"FKTABLE_SCHEM\", \"FKTABLE_NAME\", \"FKCOLUMN_NAME\", \"KEY_SEQ\", \"UPDATE_RULE\", \"DELETE_RULE\", \"FK_NAME\", \"PK_NAME\", \"DEFERRABILITY\"};"},"id":97}]},{"LOC":18,"path":"/src/smallsql/junit/TestDBMetaData.java","prefix_id":"T2-563","label":"/src/smallsql/junit/TestDBMetaData.java","id":563,"children":[{"prefix_id":"T2-114","attributes":{"LOC":6,"endLine":169,"startLine":164,"file":"TestDBMetaData.java","clone":"while(rs.next()){\r\n            String type2 = rs.getString(\"TABLE_TYPE\");\r\n            assertTrue( type+\"-\"+type2, type.compareTo(type2)<0);\r\n            type = type2;\r\n            count++;\r\n        }"},"id":114}]},{"LOC":4,"path":"/src/smallsql/junit/TestDBMetaData.java","prefix_id":"T2-565","label":"/src/smallsql/junit/TestDBMetaData.java","id":565,"children":[{"prefix_id":"T2-174","attributes":{"LOC":1,"endLine":264,"startLine":264,"file":"TestDBMetaData.java","clone":"{Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.SMALLINT, Types.SMALLINT}"},"id":174},{"prefix_id":"T2-175","attributes":{"LOC":1,"endLine":94,"startLine":94,"file":"TestDBMetaData.java","clone":"{Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL }"},"id":175}]},{"LOC":4,"path":"/src/smallsql/junit/TestDBMetaData.java","prefix_id":"T2-567","label":"/src/smallsql/junit/TestDBMetaData.java","id":567,"children":[{"prefix_id":"T2-345","attributes":{"LOC":1,"endLine":210,"startLine":210,"file":"TestDBMetaData.java","clone":"String[] colNames = {\"TYPE_NAME\", \"DATA_TYPE\", \"PRECISION\", \"LITERAL_PREFIX\", \"LITERAL_SUFFIX\", \"CREATE_PARAMS\", \"NULLABLE\", \"CASE_SENSITIVE\", \"SEARCHABLE\", \"UNSIGNED_ATTRIBUTE\", \"FIXED_PREC_SCALE\", \"AUTO_INCREMENT\", \"LOCAL_TYPE_NAME\", \"MINIMUM_SCALE\", \"MAXIMUM_SCALE\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"NUM_PREC_RADIX\"};"},"id":345},{"prefix_id":"T2-346","attributes":{"LOC":1,"endLine":182,"startLine":182,"file":"TestDBMetaData.java","clone":"String[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"NUM_PREC_RADIX\", \"NULLABLE\", \"REMARKS\", \"COLUMN_DEF\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"CHAR_OCTET_LENGTH\", \"ORDINAL_POSITION\", \"IS_NULLABLE\"};"},"id":346}]},{"LOC":2,"path":"/src/smallsql/junit/TestDBMetaData.java","prefix_id":"T2-569","label":"/src/smallsql/junit/TestDBMetaData.java","id":569,"children":[{"prefix_id":"T2-400","attributes":{"LOC":1,"endLine":281,"startLine":281,"file":"TestDBMetaData.java","clone":"int[] colTypes3 = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.BOOLEAN, Types.NULL, Types.VARCHAR, Types.SMALLINT, Types.SMALLINT, Types.VARCHAR, Types.NULL, Types.NULL, Types.NULL, Types.NULL};"},"id":400},{"prefix_id":"T2-401","attributes":{"LOC":1,"endLine":104,"startLine":104,"file":"TestDBMetaData.java","clone":"int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };"},"id":401}]},{"LOC":2,"path":"/src/smallsql/junit/TestDBMetaData.java","prefix_id":"T2-571","label":"/src/smallsql/junit/TestDBMetaData.java","id":571,"children":[{"prefix_id":"T2-446","attributes":{"LOC":1,"endLine":94,"startLine":94,"file":"TestDBMetaData.java","clone":"int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };"},"id":446},{"prefix_id":"T2-447","attributes":{"LOC":1,"endLine":264,"startLine":264,"file":"TestDBMetaData.java","clone":"int[] colTypes = {Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.SMALLINT, Types.SMALLINT};"},"id":447}]},{"LOC":16,"path":"/src/smallsql/junit/TestStatement.java","prefix_id":"T2-573","label":"/src/smallsql/junit/TestStatement.java","id":573,"children":[{"prefix_id":"T2-39","attributes":{"LOC":8,"endLine":55,"startLine":48,"file":"TestStatement.java","clone":"{\r\n    \tif(init) return;\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tdropTable( con, \"statement\");\r\n\t\tst.execute(\"Create Table statement (c varchar(30), i counter)\");\r\n\t\tinit = true;\r\n    }"},"id":39}]},{"LOC":36,"path":"/src/smallsql/junit/TestOperatoren.java","prefix_id":"T2-575","label":"/src/smallsql/junit/TestOperatoren.java","id":575,"children":[{"prefix_id":"T2-183","attributes":{"LOC":9,"endLine":104,"startLine":95,"file":"TestOperatoren.java","clone":"{\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }"},"id":183}]},{"LOC":28,"path":"/src/smallsql/junit/TestOperatoren.java","prefix_id":"T2-577","label":"/src/smallsql/junit/TestOperatoren.java","id":577,"children":[{"prefix_id":"T2-442","attributes":{"LOC":7,"endLine":103,"startLine":96,"file":"TestOperatoren.java","clone":"try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }"},"id":442}]},{"LOC":2,"path":"/src/smallsql/junit/TestDataTypes.java","prefix_id":"T2-579","label":"/src/smallsql/junit/TestDataTypes.java","id":579,"children":[{"prefix_id":"T2-76","attributes":{"LOC":1,"endLine":110,"startLine":110,"file":"TestDataTypes.java","clone":"values = new Object[]{null,new Integer(123), new Integer(-2123), new Integer(392839283)}"},"id":76},{"prefix_id":"T2-77","attributes":{"LOC":1,"endLine":113,"startLine":113,"file":"TestDataTypes.java","clone":"values = new Object[]{null,new Integer(123), new Integer(-2123), new Integer(32000)}"},"id":77}]},{"LOC":36,"path":"/src/smallsql/junit/TestDataTypes.java","prefix_id":"T2-581","label":"/src/smallsql/junit/TestDataTypes.java","id":581,"children":[{"prefix_id":"T2-184","attributes":{"LOC":9,"endLine":77,"startLine":68,"file":"TestDataTypes.java","clone":"{\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }"},"id":184}]},{"LOC":2,"path":"/src/smallsql/junit/TestDataTypes.java","prefix_id":"T2-583","label":"/src/smallsql/junit/TestDataTypes.java","id":583,"children":[{"prefix_id":"T2-285","attributes":{"LOC":1,"endLine":113,"startLine":113,"file":"TestDataTypes.java","clone":"values = new Object[]{null,new Integer(123), new Integer(-2123), new Integer(32000)};"},"id":285},{"prefix_id":"T2-286","attributes":{"LOC":1,"endLine":110,"startLine":110,"file":"TestDataTypes.java","clone":"values = new Object[]{null,new Integer(123), new Integer(-2123), new Integer(392839283)};"},"id":286}]},{"LOC":28,"path":"/src/smallsql/junit/TestDataTypes.java","prefix_id":"T2-585","label":"/src/smallsql/junit/TestDataTypes.java","id":585,"children":[{"prefix_id":"T2-443","attributes":{"LOC":7,"endLine":76,"startLine":69,"file":"TestDataTypes.java","clone":"try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }"},"id":443}]},{"LOC":12,"path":"/src/smallsql/database/MutableNumeric.java","prefix_id":"T2-587","label":"/src/smallsql/database/MutableNumeric.java","id":587,"children":[{"prefix_id":"T2-46","attributes":{"LOC":6,"endLine":240,"startLine":235,"file":"MutableNumeric.java","clone":"if(num.scale < scale){\r\n\t\t\tnum.setScale(scale);\r\n\t\t}else\r\n\t\tif(num.scale > scale){\r\n\t\t\tsetScale(num.scale);\r\n\t\t}"},"id":46},{"prefix_id":"T2-47","attributes":{"LOC":6,"endLine":172,"startLine":167,"file":"MutableNumeric.java","clone":"if(num.scale < scale){\r\n\t\t\tnum.setScale(scale);\r\n\t\t}else\r\n\t\tif(num.scale > scale){\r\n\t\t\tsetScale(num.scale);\r\n\t\t}"},"id":47}]},{"LOC":18,"path":"/src/smallsql/database/TableView.java","prefix_id":"T2-589","label":"/src/smallsql/database/TableView.java","id":589,"children":[{"prefix_id":"T2-408","attributes":{"LOC":9,"endLine":113,"startLine":105,"file":"TableView.java","clone":"catch(Throwable e){\r\n\t\t\tif(raFile != null)\r\n\t\t\t\ttry{\r\n\t\t\t\t\traFile.close();\r\n\t\t\t\t}catch(Exception e2){\r\n\t\t\t\t\tDriverManager.println(e2.toString());\r\n\t\t\t\t}\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}"},"id":408}]},{"LOC":4,"path":"/src/smallsql/database/Index.java","prefix_id":"T2-591","label":"/src/smallsql/database/Index.java","id":591,"children":[{"prefix_id":"T2-351","attributes":{"LOC":2,"endLine":384,"startLine":382,"file":"Index.java","clone":"// the first digit include 0-null; 1-empty; 2 another value\r\n\t\t\tchar digit = (i<0) ? (length == 0 ? (char)1 : 2)\r\n\t\t\t\t\t\t\t  : (key[i]);"},"id":351},{"prefix_id":"T2-352","attributes":{"LOC":2,"endLine":409,"startLine":407,"file":"Index.java","clone":"// the first digit include 0-null; 1-empty; 2 another value\r\n\t\t\tchar digit = (i<0) ? (length == 0 ? (char)1 : 2)\r\n\t\t\t\t\t\t\t  : (key[i]);"},"id":352}]},{"LOC":28,"path":"/src/smallsql/database/Index.java","prefix_id":"T2-593","label":"/src/smallsql/database/Index.java","id":593,"children":[{"prefix_id":"T2-396","attributes":{"LOC":14,"endLine":372,"startLine":359,"file":"Index.java","clone":"if(node.isEmpty()){\r\n\t\t\t\tif(isLastValue){\r\n\t\t\t\t\tnode.addRemainderKey( rowOffset, key, i );\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRootValue( key, i);\r\n\t\t\t}else\r\n\t\t\tif(equals(node.getRemainderValue(), key, i)){\r\n\t\t\t\tif(isLastValue){\r\n\t\t\t\t\tnode.saveValue( rowOffset);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRoot();\r\n\t\t\t}"},"id":396},{"prefix_id":"T2-397","attributes":{"LOC":14,"endLine":431,"startLine":418,"file":"Index.java","clone":"if(node.isEmpty()){\r\n\t\t\t\tif(isLast){\r\n\t\t\t\t\tnode.addRemainderKey( rowOffset, key, i );\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRootValue( key, i );\r\n\t\t\t}else\r\n\t\t\tif(equals(node.getRemainderValue(), key, i)){\r\n\t\t\t\tif(isLast){\r\n\t\t\t\t\tnode.saveValue(rowOffset);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRoot();\r\n\t\t\t}"},"id":397}]},{"LOC":16,"path":"/src/smallsql/database/SSPreparedStatement.java","prefix_id":"T2-595","label":"/src/smallsql/database/SSPreparedStatement.java","id":595,"children":[{"prefix_id":"T2-208","attributes":{"LOC":8,"endLine":254,"startLine":247,"file":"SSPreparedStatement.java","clone":"{\r\n\t\t\t\tresult[b] = EXECUTE_FAILED;\r\n\t\t\t\tif(failed == null){\r\n\t\t\t\t\tfailed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n\t\t\t\t\tfailed.initCause(ex);\r\n\t\t\t\t}\r\n\t\t\t\tfailed.setNextException(ex);\r\n\t\t\t}"},"id":208}]},{"LOC":8,"path":"/src/smallsql/database/SSPreparedStatement.java","prefix_id":"T2-597","label":"/src/smallsql/database/SSPreparedStatement.java","id":597,"children":[{"prefix_id":"T2-298","attributes":{"LOC":4,"endLine":252,"startLine":249,"file":"SSPreparedStatement.java","clone":"if(failed == null){\r\n\t\t\t\t\tfailed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n\t\t\t\t\tfailed.initCause(ex);\r\n\t\t\t\t}"},"id":298}]},{"LOC":16,"path":"/src/smallsql/database/SSPreparedStatement.java","prefix_id":"T2-599","label":"/src/smallsql/database/SSPreparedStatement.java","id":599,"children":[{"prefix_id":"T2-341","attributes":{"LOC":8,"endLine":254,"startLine":247,"file":"SSPreparedStatement.java","clone":"catch (SQLException ex) {\r\n\t\t\t\tresult[b] = EXECUTE_FAILED;\r\n\t\t\t\tif(failed == null){\r\n\t\t\t\t\tfailed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n\t\t\t\t\tfailed.initCause(ex);\r\n\t\t\t\t}\r\n\t\t\t\tfailed.setNextException(ex);\r\n\t\t\t}"},"id":341}]},{"LOC":21,"path":"/src/smallsql/database/View.java","prefix_id":"T2-601","label":"/src/smallsql/database/View.java","id":601,"children":[{"prefix_id":"T2-31","attributes":{"LOC":7,"endLine":144,"startLine":138,"file":"View.java","clone":"{\r\n        ByteBuffer buffer = ByteBuffer.allocate(8);\r\n        buffer.putInt(MAGIC_VIEW);\r\n        buffer.putInt(TABLE_VIEW_VERSION);\r\n        buffer.position(0);\r\n        raFile.write(buffer);\r\n\t}"},"id":31}]},{"LOC":16,"path":"/src/smallsql/database/Utils.java","prefix_id":"T2-603","label":"/src/smallsql/database/Utils.java","id":603,"children":[{"prefix_id":"T2-162","attributes":{"LOC":8,"endLine":212,"startLine":205,"file":"Utils.java","clone":"{\r\n        StringBuffer buf = new StringBuffer(bytes.length << 1);\r\n        for(int i=0; i<bytes.length; i++){\r\n            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n            buf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n        }\r\n        return buf.toString();\r\n    }"},"id":162}]},{"LOC":12,"path":"/src/smallsql/database/Utils.java","prefix_id":"T2-605","label":"/src/smallsql/database/Utils.java","id":605,"children":[{"prefix_id":"T2-318","attributes":{"LOC":6,"endLine":322,"startLine":317,"file":"Utils.java","clone":"{\r\n        try{\r\n            return Double.parseDouble( val ) != 0;\r\n        }catch(NumberFormatException e){/*ignore it if it not a number*/}\r\n        return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );\r\n    }"},"id":318}]},{"LOC":8,"path":"/src/smallsql/database/Utils.java","prefix_id":"T2-607","label":"/src/smallsql/database/Utils.java","id":607,"children":[{"prefix_id":"T2-381","attributes":{"LOC":4,"endLine":210,"startLine":207,"file":"Utils.java","clone":"{\r\n            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n            buf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n        }"},"id":381}]},{"LOC":8,"path":"/src/smallsql/database/IndexScrollStatus.java","prefix_id":"T2-609","label":"/src/smallsql/database/IndexScrollStatus.java","id":609,"children":[{"prefix_id":"T2-92","attributes":{"LOC":4,"endLine":126,"startLine":123,"file":"IndexScrollStatus.java","clone":"nodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));"},"id":92},{"prefix_id":"T2-93","attributes":{"LOC":4,"endLine":95,"startLine":92,"file":"IndexScrollStatus.java","clone":"nodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));"},"id":93}]},{"LOC":16,"path":"/src/smallsql/database/IndexScrollStatus.java","prefix_id":"T2-611","label":"/src/smallsql/database/IndexScrollStatus.java","id":611,"children":[{"prefix_id":"T2-108","attributes":{"LOC":8,"endLine":128,"startLine":121,"file":"IndexScrollStatus.java","clone":"{\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}"},"id":108},{"prefix_id":"T2-109","attributes":{"LOC":8,"endLine":97,"startLine":90,"file":"IndexScrollStatus.java","clone":"{\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}"},"id":109}]},{"LOC":22,"path":"/src/smallsql/database/IndexScrollStatus.java","prefix_id":"T2-613","label":"/src/smallsql/database/IndexScrollStatus.java","id":613,"children":[{"prefix_id":"T2-420","attributes":{"LOC":11,"endLine":99,"startLine":89,"file":"IndexScrollStatus.java","clone":"if(status.nodeValue != null){\r\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else\r\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\r\n\t\t\t\t\t}"},"id":420},{"prefix_id":"T2-421","attributes":{"LOC":11,"endLine":131,"startLine":120,"file":"IndexScrollStatus.java","clone":"if(status.nodeValue != null){\r\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else\r\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//There is no RowOffset in this node"},"id":421}]},{"LOC":20,"path":"/src/smallsql/database/ExpressionFunctionMinute.java","prefix_id":"T2-615","label":"/src/smallsql/database/ExpressionFunctionMinute.java","id":615,"children":[{"prefix_id":"T2-135","attributes":{"LOC":5,"endLine":52,"startLine":48,"file":"ExpressionFunctionMinute.java","clone":"{\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.minute;\r\n\t}"},"id":135}]},{"LOC":10,"path":"/src/smallsql/database/ExpressionFunctionMonth.java","prefix_id":"T2-617","label":"/src/smallsql/database/ExpressionFunctionMonth.java","id":617,"children":[{"prefix_id":"T2-118","attributes":{"LOC":5,"endLine":52,"startLine":48,"file":"ExpressionFunctionMonth.java","clone":"{\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.month+1;\r\n\t}"},"id":118}]},{"LOC":16,"path":"/src/smallsql/database/SSStatement.java","prefix_id":"T2-619","label":"/src/smallsql/database/SSStatement.java","id":619,"children":[{"prefix_id":"T2-207","attributes":{"LOC":8,"endLine":276,"startLine":269,"file":"SSStatement.java","clone":"{\r\n                result[i] = EXECUTE_FAILED;\r\n                if(failed == null){\r\n                    failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n                    failed.initCause(ex);\r\n                }\r\n                failed.setNextException(ex);\r\n            }"},"id":207}]},{"LOC":8,"path":"/src/smallsql/database/SSStatement.java","prefix_id":"T2-621","label":"/src/smallsql/database/SSStatement.java","id":621,"children":[{"prefix_id":"T2-297","attributes":{"LOC":4,"endLine":274,"startLine":271,"file":"SSStatement.java","clone":"if(failed == null){\r\n                    failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n                    failed.initCause(ex);\r\n                }"},"id":297}]},{"LOC":16,"path":"/src/smallsql/database/SSStatement.java","prefix_id":"T2-623","label":"/src/smallsql/database/SSStatement.java","id":623,"children":[{"prefix_id":"T2-342","attributes":{"LOC":8,"endLine":276,"startLine":269,"file":"SSStatement.java","clone":"catch(SQLException ex){\r\n                result[i] = EXECUTE_FAILED;\r\n                if(failed == null){\r\n                    failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n                    failed.initCause(ex);\r\n                }\r\n                failed.setNextException(ex);\r\n            }"},"id":342}]},{"LOC":228,"path":"/src/smallsql/database/language/Language.java","prefix_id":"T2-625","label":"/src/smallsql/database/language/Language.java","id":625,"children":[{"prefix_id":"T2-56","attributes":{"LOC":114,"endLine":628,"startLine":494,"file":"Language.java","clone":"private final String[][] SQL_STATES = {\r\n{ CUSTOM_MESSAGE           \t\t  , \"01000\" },\r\n\r\n{ UNSUPPORTED_OPERATION           , \"01000\" },\r\n{ CANT_LOCK_FILE                  , \"01000\" },\r\n\r\n{ DB_EXISTENT                     , \"01000\" },\r\n{ DB_NONEXISTENT                  , \"01000\" },\r\n{ DB_NOT_DIRECTORY                , \"01000\" },\r\n{ DB_NOTCONNECTED                 , \"01000\" },\r\n\r\n{ CONNECTION_CLOSED               , \"01000\" },\r\n\r\n{ VIEW_INSERT                     , \"01000\" },\r\n{ VIEWDROP_NOT_VIEW               , \"01000\" },\r\n{ VIEW_CANTDROP                   , \"01000\" },\r\n\r\n{ RSET_NOT_PRODUCED               , \"01000\" },\r\n{ RSET_READONLY                   , \"01000\" },\r\n{ RSET_FWDONLY                    , \"01000\" },\r\n{ RSET_CLOSED                     , \"01000\" },\r\n{ RSET_NOT_INSERT_ROW             , \"01000\" },\r\n{ RSET_ON_INSERT_ROW              , \"01000\" },\r\n{ ROWSOURCE_READONLY              , \"01000\" },\r\n{ STMT_IS_CLOSED                  , \"HY010\" },\r\n\r\n{ SUBQUERY_COL_COUNT              , \"01000\" },\r\n{ JOIN_DELETE                     , \"01000\" },\r\n{ JOIN_INSERT                     , \"01000\" },\r\n{ DELETE_WO_FROM                  , \"01000\" },\r\n{ INSERT_WO_FROM                  , \"01000\" },\r\n\r\n{ TABLE_CANT_RENAME               , \"01000\" },\r\n{ TABLE_CANT_DROP                 , \"01000\" },\r\n{ TABLE_CANT_DROP_LOCKED          , \"01000\" },\r\n{ TABLE_CORRUPT_PAGE              , \"01000\" },\r\n{ TABLE_MODIFIED                  , \"01000\" },\r\n{ TABLE_DEADLOCK                  , \"01000\" },\r\n{ TABLE_OR_VIEW_MISSING           , \"01000\" },\r\n{ TABLE_FILE_INVALID              , \"01000\" },\r\n{ TABLE_OR_VIEW_FILE_INVALID      , \"01000\" },\r\n{ TABLE_EXISTENT                  , \"01000\" },\r\n\r\n{ FK_NOT_TABLE                    , \"01000\" },\r\n{ PK_ONLYONE                      , \"01000\" },\r\n{ KEY_DUPLICATE                   , \"01000\" },\r\n\r\n{ MONTH_TOOLARGE                  , \"01000\" },\r\n{ DAYS_TOOLARGE                   , \"01000\" },\r\n{ HOURS_TOOLARGE                  , \"01000\" },\r\n{ MINUTES_TOOLARGE                , \"01000\" },\r\n{ SECS_TOOLARGE                   , \"01000\" },\r\n{ MILLIS_TOOLARGE                 , \"01000\" },\r\n{ DATETIME_INVALID                , \"01000\" },\r\n\r\n{ UNSUPPORTED_CONVERSION_OPER     , \"01000\" },\r\n{ UNSUPPORTED_DATATYPE_OPER       , \"01000\" },\r\n{ UNSUPPORTED_DATATYPE_FUNC       , \"01000\" },\r\n{ UNSUPPORTED_CONVERSION_FUNC     , \"01000\" },\r\n{ UNSUPPORTED_TYPE_CONV           , \"01000\" },\r\n{ UNSUPPORTED_TYPE_SUM            , \"01000\" },\r\n{ UNSUPPORTED_TYPE_MAX            , \"01000\" },\r\n{ UNSUPPORTED_CONVERSION          , \"01000\" },\r\n{ INSERT_INVALID_LEN              , \"01000\" },\r\n{ SUBSTR_INVALID_LEN              , \"01000\" },\r\n\r\n{ VALUE_STR_TOOLARGE              , \"01000\" },\r\n{ VALUE_BIN_TOOLARGE              , \"01000\" },\r\n{ VALUE_NULL_INVALID              , \"01000\" },\r\n{ VALUE_CANT_CONVERT              , \"01000\" },\r\n\r\n{ BYTEARR_INVALID_SIZE            , \"01000\" },\r\n{ LOB_DELETED                     , \"01000\" },\r\n\r\n{ PARAM_CLASS_UNKNOWN             , \"01000\" },\r\n{ PARAM_EMPTY                     , \"01000\" },\r\n{ PARAM_IDX_OUT_RANGE             , \"01000\" },\r\n\r\n{ COL_DUPLICATE                \t  , \"01000\" },\r\n{ COL_MISSING                     , \"01000\" },\r\n{ COL_VAL_UNMATCH                 , \"01000\" },\r\n{ COL_INVALID_SIZE                , \"01000\" },\r\n{ COL_WRONG_PREFIX                , \"01000\" },\r\n{ COL_READONLY                    , \"01000\" },\r\n{ COL_INVALID_NAME                , \"01000\" },\r\n{ COL_IDX_OUT_RANGE               , \"01000\" },\r\n{ COL_AMBIGUOUS                   , \"01000\" },\r\n\r\n{ GROUP_AGGR_INVALID              , \"01000\" },\r\n{ GROUP_AGGR_NOTPART              , \"01000\" },\r\n{ ORDERBY_INTERNAL                , \"01000\" },\r\n{ UNION_DIFFERENT_COLS            , \"01000\" },\r\n\r\n{ INDEX_EXISTS                    , \"01000\" },\r\n{ INDEX_MISSING                   , \"01000\" },\r\n{ INDEX_FILE_INVALID              , \"01000\" },\r\n{ INDEX_CORRUPT                   , \"01000\" },\r\n{ INDEX_TOOMANY_EQUALS            , \"01000\" },\r\n\r\n{ FILE_TOONEW                     , \"01000\" },\r\n{ FILE_TOOOLD                     , \"01000\" },\r\n{ FILE_CANT_DELETE                , \"01000\" },\r\n\r\n{ ROW_0_ABSOLUTE                  , \"01000\" },\r\n{ ROW_NOCURRENT                   , \"01000\" },\r\n{ ROWS_WRONG_MAX                  , \"01000\" },\r\n{ ROW_LOCKED                      , \"01000\" },\r\n{ ROW_DELETED                     , \"01000\" },\r\n\r\n{ SAVEPT_INVALID_TRANS            , \"01000\" },\r\n{ SAVEPT_INVALID_DRIVER           , \"01000\" },\r\n\r\n{ ALIAS_UNSUPPORTED               , \"01000\" },\r\n{ ISOLATION_UNKNOWN               , \"01000\" },\r\n{ FLAGVALUE_INVALID               , \"01000\" },\r\n{ ARGUMENT_INVALID                , \"01000\" },\r\n{ GENER_KEYS_UNREQUIRED           , \"01000\" },\r\n{ SEQUENCE_HEX_INVALID            , \"01000\" },\r\n{ SEQUENCE_HEX_INVALID_STR        , \"01000\" },\r\n\r\n{ SYNTAX_BASE_OFS            \t  , \"01000\" },\r\n{ SYNTAX_BASE_END        \t\t  , \"01000\" },\r\n{ STXADD_ADDITIONAL_TOK\t\t\t  , \"01000\" },\r\n{ STXADD_IDENT_EXPECT\t\t\t  , \"01000\" },\r\n{ STXADD_IDENT_EMPTY \t\t\t  , \"01000\" },\r\n{ STXADD_IDENT_WRONG \t\t\t  , \"01000\" },\r\n{ STXADD_OPER_MINUS \t\t\t  , \"01000\" },\r\n{ STXADD_FUNC_UNKNOWN \t\t\t  , \"01000\" },\r\n{ STXADD_PARAM_INVALID_COUNT\t  , \"01000\" },\r\n{ STXADD_JOIN_INVALID\t  \t\t  , \"01000\" },\r\n{ STXADD_FROM_PAR_CLOSE\t  \t\t  , \"01000\" },\r\n{ STXADD_KEYS_REQUIRED\t  \t\t  , \"01000\" },\r\n{ STXADD_NOT_NUMBER\t  \t\t      , \"01000\" },\r\n{ STXADD_COMMENT_OPEN\t\t\t  , \"01000\" },\r\n\t};"},"id":56},{"prefix_id":"T2-57","attributes":{"LOC":114,"endLine":488,"startLine":354,"file":"Language.java","clone":"private final String[][] MESSAGES = {\r\n{ CUSTOM_MESSAGE           \t\t  , \"{0}\" },\r\n\r\n{ UNSUPPORTED_OPERATION           , \"Unsupported Operation {0}.\" },\r\n{ CANT_LOCK_FILE                  , \"Can''t lock file ''{0}''. A single SmallSQL Database can only be opened from a single process.\" },\r\n\r\n{ DB_EXISTENT                     , \"Database ''{0}'' already exists.\" },\r\n{ DB_NONEXISTENT                  , \"Database ''{0}'' does not exist.\" },\r\n{ DB_NOT_DIRECTORY                , \"Directory ''{0}'' is not a SmallSQL database.\" },\r\n{ DB_NOTCONNECTED                 , \"You are not connected with a Database.\" },\r\n\r\n{ CONNECTION_CLOSED               , \"Connection is already closed.\" },\r\n\r\n{ VIEW_INSERT                     , \"INSERT is not supported for a view.\" },\r\n{ VIEWDROP_NOT_VIEW               , \"Cannot use DROP VIEW with ''{0}'' because it does not is a view.\" },\r\n{ VIEW_CANTDROP                   , \"View ''{0}'' can''t be dropped.\" },\r\n\r\n{ RSET_NOT_PRODUCED               , \"No ResultSet was produced.\" },\r\n{ RSET_READONLY                   , \"ResultSet is read only.\" },\r\n{ RSET_FWDONLY                    , \"ResultSet is forward only.\" },\r\n{ RSET_CLOSED                     , \"ResultSet is closed.\" },\r\n{ RSET_NOT_INSERT_ROW             , \"Cursor is currently not on the insert row.\" },\r\n{ RSET_ON_INSERT_ROW              , \"Cursor is currently on the insert row.\" },\r\n{ ROWSOURCE_READONLY              , \"Rowsource is read only.\" },\r\n{ STMT_IS_CLOSED                  , \"Statement is already closed.\" },\r\n\r\n{ SUBQUERY_COL_COUNT              , \"Count of columns in subquery must be 1 and not {0}.\" },\r\n{ JOIN_DELETE                     , \"The method deleteRow not supported on joins.\" },\r\n{ JOIN_INSERT                     , \"The method insertRow not supported on joins.\" },\r\n{ DELETE_WO_FROM                  , \"The method deleteRow need a FROM expression.\" },\r\n{ INSERT_WO_FROM                  , \"The method insertRow need a FROM expression.\" },\r\n\r\n{ TABLE_CANT_RENAME               , \"Table ''{0}'' can''t be renamed.\" },\r\n{ TABLE_CANT_DROP                 , \"Table ''{0}'' can''t be dropped.\" },\r\n{ TABLE_CANT_DROP_LOCKED          , \"Table ''{0}'' can''t drop because is locked.\" },\r\n{ TABLE_CORRUPT_PAGE              , \"Corrupt table page at position: {0}.\" },\r\n{ TABLE_MODIFIED                  , \"Table ''{0}'' was modified.\" },\r\n{ TABLE_DEADLOCK                  , \"Deadlock, can not create a lock on table ''{0}''.\" },\r\n{ TABLE_OR_VIEW_MISSING           , \"Table or View ''{0}'' does not exist.\" },\r\n{ TABLE_FILE_INVALID              , \"File ''{0}'' does not include a valid SmallSQL Table.\" },\r\n{ TABLE_OR_VIEW_FILE_INVALID      , \"File ''{0}'' is not a valid Table or View store.\" },\r\n{ TABLE_EXISTENT                  , \"Table or View ''{0}'' already exists.\" },\r\n\r\n{ FK_NOT_TABLE                    , \"''{0}'' is not a table.\" },\r\n{ PK_ONLYONE                      , \"A table can have only one primary key.\" },\r\n{ KEY_DUPLICATE                   , \"Duplicate Key.\" },\r\n\r\n{ MONTH_TOOLARGE                  , \"Months are too large in DATE or TIMESTAMP value ''{0}''.\" },\r\n{ DAYS_TOOLARGE                   , \"Days are too large in DATE or TIMESTAMP value ''{0}''.\" },\r\n{ HOURS_TOOLARGE                  , \"Hours are too large in TIME or TIMESTAMP value ''{0}''.\" },\r\n{ MINUTES_TOOLARGE                , \"Minutes are too large in TIME or TIMESTAMP value ''{0}''.\" },\r\n{ SECS_TOOLARGE                   , \"Seconds are too large in TIME or TIMESTAMP value ''{0}''.\" },\r\n{ MILLIS_TOOLARGE                 , \"Milliseconds are too large in TIMESTAMP value ''{0}''.\" },\r\n{ DATETIME_INVALID                , \"''{0}'' is an invalid DATE, TIME or TIMESTAMP.\" },\r\n\r\n{ UNSUPPORTED_CONVERSION_OPER     , \"Unsupported conversion to data type ''{0}'' from data type ''{1}'' for operation ''{2}''.\" },\r\n{ UNSUPPORTED_DATATYPE_OPER       , \"Unsupported data type ''{0}'' for operation ''{1}''.\" },\r\n{ UNSUPPORTED_DATATYPE_FUNC       , \"Unsupported data type ''{0}'' for function ''{1}''.\" },\r\n{ UNSUPPORTED_CONVERSION_FUNC     , \"Unsupported conversion to data type ''{0}'' for function ''{1}''.\" },\r\n{ UNSUPPORTED_TYPE_CONV           , \"Unsupported type for CONVERT function: {0}.\" },\r\n{ UNSUPPORTED_TYPE_SUM            , \"Unsupported data type ''{0}'' for SUM function.\" },\r\n{ UNSUPPORTED_TYPE_MAX            , \"Unsupported data type ''{0}'' for MAX function.\" },\r\n{ UNSUPPORTED_CONVERSION          , \"Can''t convert ''{0}'' [{1}] to ''{2}''.\" },\r\n{ INSERT_INVALID_LEN              , \"Invalid length ''{0}'' in function INSERT.\" },\r\n{ SUBSTR_INVALID_LEN              , \"Invalid length ''{0}'' in function SUBSTRING.\" },\r\n\r\n{ VALUE_STR_TOOLARGE              , \"String value too large for column.\" },\r\n{ VALUE_BIN_TOOLARGE              , \"Binary value with length {0} to large for column with size {1}.\" },\r\n{ VALUE_NULL_INVALID              , \"Null values are not valid for column ''{0}''.\" },\r\n{ VALUE_CANT_CONVERT              , \"Cannot convert a {0} value to a {1} value.\" },\r\n\r\n{ BYTEARR_INVALID_SIZE            , \"Invalid byte array size {0} for UNIQUEIDENFIER.\" },\r\n{ LOB_DELETED                     , \"Lob Object was deleted.\" },\r\n\r\n{ PARAM_CLASS_UNKNOWN             , \"Unknown parameter class: ''{0}''.\" },\r\n{ PARAM_EMPTY                     , \"Parameter {0} is empty.\" },\r\n{ PARAM_IDX_OUT_RANGE             , \"Parameter index {0} out of range. The value must be between 1 and {1}.\" },\r\n\r\n{ COL_DUPLICATE                \t  , \"There is a duplicated column name: ''{0}''.\" },\r\n{ COL_MISSING                     , \"Column ''{0}'' not found.\" },\r\n{ COL_VAL_UNMATCH                 , \"Columns and Values count is not identical.\" },\r\n{ COL_INVALID_SIZE                , \"Invalid column size {0} for column ''{1}''.\" },\r\n{ COL_WRONG_PREFIX                , \"The column prefix ''{0}'' does not match with a table name or alias name used in this query.\" },\r\n{ COL_READONLY                    , \"Column {0} is read only.\" },\r\n{ COL_INVALID_NAME                , \"Invalid column name ''{0}''.\" },\r\n{ COL_IDX_OUT_RANGE               , \"Column index out of range: {0}.\" },\r\n{ COL_AMBIGUOUS                   , \"Column ''{0}'' is ambiguous.\" },\r\n\r\n{ GROUP_AGGR_INVALID              , \"Aggregate function are not valid in the GROUP BY clause ({0}).\" },\r\n{ GROUP_AGGR_NOTPART              , \"Expression ''{0}'' is not part of a aggregate function or GROUP BY clause.\" },\r\n{ ORDERBY_INTERNAL                , \"Internal Error with ORDER BY.\" },\r\n{ UNION_DIFFERENT_COLS            , \"Different SELECT of the UNION have different column count: {0} and {1}.\" },\r\n\r\n{ INDEX_EXISTS                    , \"Index ''{0}'' already exists.\" },\r\n{ INDEX_MISSING                   , \"Index ''{0}'' does not exist.\" },\r\n{ INDEX_FILE_INVALID              , \"File ''{0}'' is not a valid Index store.\" },\r\n{ INDEX_CORRUPT                   , \"Error in loading Index. Index file is corrupt. ({0}).\" },\r\n{ INDEX_TOOMANY_EQUALS            , \"Too many equals entry in Index.\" },\r\n\r\n{ FILE_TOONEW                     , \"File version ({0}) of file ''{1}'' is too new for this runtime.\" },\r\n{ FILE_TOOOLD                     , \"File version ({0}) of file ''{1}'' is too old for this runtime.\" },\r\n{ FILE_CANT_DELETE                , \"File ''{0}'' can't be deleted.\" },\r\n\r\n{ ROW_0_ABSOLUTE                  , \"Row 0 is invalid for method absolute().\" },\r\n{ ROW_NOCURRENT                   , \"No current row.\" },\r\n{ ROWS_WRONG_MAX                  , \"Wrong max rows value: {0}.\" },\r\n{ ROW_LOCKED                      , \"Row is locked from another Connection.\" },\r\n{ ROW_DELETED                     , \"Row already deleted.\" },\r\n\r\n{ SAVEPT_INVALID_TRANS            , \"Savepoint is not valid for this transaction.\" },\r\n{ SAVEPT_INVALID_DRIVER           , \"Savepoint is not valid for this driver {0}.\" },\r\n\r\n{ ALIAS_UNSUPPORTED               , \"Alias not supported for this type of row source.\" },\r\n{ ISOLATION_UNKNOWN               , \"Unknown Transaction Isolation Level: {0}.\" },\r\n{ FLAGVALUE_INVALID               , \"Invalid flag value in method getMoreResults: {0}.\" },\r\n{ ARGUMENT_INVALID                , \"Invalid argument in method setNeedGenratedKeys: {0}.\" },\r\n{ GENER_KEYS_UNREQUIRED           , \"GeneratedKeys not requested.\" },\r\n{ SEQUENCE_HEX_INVALID            , \"Invalid hex sequence at {0}.\" },\r\n{ SEQUENCE_HEX_INVALID_STR        , \"Invalid hex sequence at position {0} in ''{1}''.\" },\r\n\r\n{ SYNTAX_BASE_OFS            \t  , \"Syntax error at offset {0} on ''{1}''. \" },\r\n{ SYNTAX_BASE_END        \t\t  , \"Syntax error, unexpected end of SQL string. \" },\r\n{ STXADD_ADDITIONAL_TOK\t\t\t  , \"Additional token after end of SQL statement.\" },\r\n{ STXADD_IDENT_EXPECT\t\t\t  , \"Identifier expected.\" },\r\n{ STXADD_IDENT_EMPTY \t\t\t  , \"Empty Identifier.\" },\r\n{ STXADD_IDENT_WRONG \t\t\t  , \"Wrong Identifier ''{0}''.\" },\r\n{ STXADD_OPER_MINUS \t\t\t  , \"Invalid operator minus for data type VARBINARY.\" },\r\n{ STXADD_FUNC_UNKNOWN \t\t\t  , \"Unknown function.\" },\r\n{ STXADD_PARAM_INVALID_COUNT\t  , \"Invalid parameter count.\" },\r\n{ STXADD_JOIN_INVALID\t  \t\t  , \"Invalid Join Syntax.\" },\r\n{ STXADD_FROM_PAR_CLOSE\t  \t\t  , \"Unexpected closing parenthesis in FROM clause.\" },\r\n{ STXADD_KEYS_REQUIRED\t  \t\t  , \"Required keywords are: \" },\r\n{ STXADD_NOT_NUMBER\t  \t\t      , \"Number value required (passed = ''{0}'').\" },\r\n{ STXADD_COMMENT_OPEN\t\t\t  , \"Missing end comment mark (''*/'').\" },\r\n\t};"},"id":57}]},{"LOC":14,"path":"/src/smallsql/database/language/Language.java","prefix_id":"T2-627","label":"/src/smallsql/database/language/Language.java","id":627,"children":[{"prefix_id":"T2-104","attributes":{"LOC":7,"endLine":304,"startLine":298,"file":"Language.java","clone":"if (! inserted.add(key)) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Duplicate key: \" + key);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tString value = entries[i][1];\r\n\t\t\t\tmessages.put(key, value);\r\n\t\t\t}"},"id":104},{"prefix_id":"T2-105","attributes":{"LOC":7,"endLine":330,"startLine":324,"file":"Language.java","clone":"if (! inserted.add(key)) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Duplicate key: \" + key);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tString value = SQL_STATES[i][1];\r\n\t\t\t\tsqlStates.put(key, value);\r\n\t\t\t}"},"id":105}]},{"LOC":26,"path":"/src/smallsql/database/language/Language.java","prefix_id":"T2-629","label":"/src/smallsql/database/language/Language.java","id":629,"children":[{"prefix_id":"T2-384","attributes":{"LOC":13,"endLine":306,"startLine":292,"file":"Language.java","clone":"{\r\n\t\tSet inserted = new HashSet(); // for duplicates checking\r\n\t\t\r\n\t\tfor (int i = 0; i < entries.length; i++) {\r\n\t\t\tString key = entries[i][0];\r\n\t\t\t\r\n\t\t\tif (! inserted.add(key)) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Duplicate key: \" + key);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tString value = entries[i][1];\r\n\t\t\t\tmessages.put(key, value);\r\n\t\t\t}\r\n\t\t}\r\n\t}"},"id":384},{"prefix_id":"T2-385","attributes":{"LOC":13,"endLine":332,"startLine":318,"file":"Language.java","clone":"{\r\n\t\tSet inserted = new HashSet(); // for duplicates checking\r\n\t\t\r\n\t\tfor (int i = 0; i < SQL_STATES.length; i++) {\r\n\t\t\tString key = SQL_STATES[i][0];\r\n\t\t\t\r\n\t\t\tif (! inserted.add(key)) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Duplicate key: \" + key);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tString value = SQL_STATES[i][1];\r\n\t\t\t\tsqlStates.put(key, value);\r\n\t\t\t}\r\n\t\t}\r\n\t}"},"id":385}]},{"LOC":51,"path":"/src/smallsql/junit/TestScrollable.java","prefix_id":"T2-631","label":"/src/smallsql/junit/TestScrollable.java","id":631,"children":[{"prefix_id":"T2-188","attributes":{"LOC":17,"endLine":61,"startLine":43,"file":"TestScrollable.java","clone":"{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n\t\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testLastWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Order By v\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}"},"id":188},{"prefix_id":"T2-189","attributes":{"LOC":17,"endLine":94,"startLine":76,"file":"TestScrollable.java","clone":"{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testNextWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}"},"id":189},{"prefix_id":"T2-190","attributes":{"LOC":17,"endLine":126,"startLine":108,"file":"TestScrollable.java","clone":"{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}"},"id":190}]},{"LOC":12,"path":"/src/smallsql/junit/TestThreads.java","prefix_id":"T2-633","label":"/src/smallsql/junit/TestThreads.java","id":633,"children":[{"prefix_id":"T2-152","attributes":{"LOC":4,"endLine":63,"startLine":59,"file":"TestThreads.java","clone":"// wait until all threads are finish\r\n        for(int i = 0; i < threadList.size(); i++){\r\n            Thread thread = (Thread)threadList.get(i);\r\n            thread.join(5000);\r\n        }"},"id":152},{"prefix_id":"T2-153","attributes":{"LOC":4,"endLine":164,"startLine":160,"file":"TestThreads.java","clone":"// wait until all threads are finish\r\n            for(int i = 0; i < threadList.size(); i++){\r\n                Thread thread = (Thread)threadList.get(i);\r\n                thread.join(5000);\r\n            }"},"id":153},{"prefix_id":"T2-154","attributes":{"LOC":4,"endLine":110,"startLine":106,"file":"TestThreads.java","clone":"// wait until all threads are finish\r\n            for(int i = 0; i < threadList.size(); i++){\r\n                Thread thread = (Thread)threadList.get(i);\r\n                thread.join(5000);\r\n            }"},"id":154}]},{"LOC":21,"path":"/src/smallsql/database/Table.java","prefix_id":"T2-635","label":"/src/smallsql/database/Table.java","id":635,"children":[{"prefix_id":"T2-33","attributes":{"LOC":7,"endLine":227,"startLine":221,"file":"Table.java","clone":"{\r\n        ByteBuffer buffer = ByteBuffer.allocate(8);\r\n        buffer.putInt(MAGIC_TABLE);\r\n        buffer.putInt(TABLE_VIEW_VERSION);\r\n        buffer.position(0);\r\n        raFile.write(buffer);\r\n\t}"},"id":33}]},{"LOC":21,"path":"/src/smallsql/database/Table.java","prefix_id":"T2-637","label":"/src/smallsql/database/Table.java","id":637,"children":[{"prefix_id":"T2-322","attributes":{"LOC":7,"endLine":364,"startLine":358,"file":"Table.java","clone":"{\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}"},"id":322},{"prefix_id":"T2-323","attributes":{"LOC":7,"endLine":376,"startLine":370,"file":"Table.java","clone":"{\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}"},"id":323},{"prefix_id":"T2-324","attributes":{"LOC":7,"endLine":394,"startLine":388,"file":"Table.java","clone":"{\r\n                        Iterator values = locks.values().iterator();\r\n                        while(values.hasNext()){\r\n                            TableStorePage lock = (TableStorePage)values.next();\r\n                            if(lock.con != con) return null;\r\n                        }\r\n                    }"},"id":324}]},{"LOC":21,"path":"/src/smallsql/database/Table.java","prefix_id":"T2-639","label":"/src/smallsql/database/Table.java","id":639,"children":[{"prefix_id":"T2-355","attributes":{"LOC":7,"endLine":364,"startLine":357,"file":"Table.java","clone":"// first check if another connection has a lock before creating a table lock\r\n\t\t\t\t\t\tif(locks.size() > 0){\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}"},"id":355},{"prefix_id":"T2-356","attributes":{"LOC":7,"endLine":394,"startLine":388,"file":"Table.java","clone":"if(serializeConnections.size() > 0){\r\n                        Iterator values = locks.values().iterator();\r\n                        while(values.hasNext()){\r\n                            TableStorePage lock = (TableStorePage)values.next();\r\n                            if(lock.con != con) return null;\r\n                        }\r\n                    }"},"id":356},{"prefix_id":"T2-357","attributes":{"LOC":7,"endLine":376,"startLine":370,"file":"Table.java","clone":"if(serializeConnections.size() > 0){\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}"},"id":357}]},{"LOC":18,"path":"/src/smallsql/database/ExpressionArithmetic.java","prefix_id":"T2-641","label":"/src/smallsql/database/ExpressionArithmetic.java","id":641,"children":[{"prefix_id":"T2-199","attributes":{"LOC":9,"endLine":256,"startLine":248,"file":"ExpressionArithmetic.java","clone":"switch(operation){\r\n            case ADD: return left.getLong() + right.getLong();\r\n            case SUB: return left.getLong() - right.getLong();\r\n            case MUL: return left.getLong() * right.getLong();\r\n            case DIV: return left.getLong() / right.getLong();\r\n            case NEGATIVE:  return          - left.getLong();\r\n            case MOD:\t\treturn left.getLong() % right.getLong();\r\n            case BIT_NOT:   return          ~ right.getInt();\r\n        }"},"id":199},{"prefix_id":"T2-200","attributes":{"LOC":9,"endLine":214,"startLine":206,"file":"ExpressionArithmetic.java","clone":"switch(operation){\r\n            case ADD:       return left.getInt() + right.getInt();\r\n            case SUB:       return left.getInt() - right.getInt();\r\n            case MUL:       return left.getInt() * right.getInt();\r\n            case DIV:       return left.getInt() / right.getInt();\r\n            case NEGATIVE:  return               - left.getInt();\r\n            case MOD:\t\treturn left.getInt() % right.getInt();\r\n            case BIT_NOT:   return               ~ left.getInt();\r\n        }"},"id":200}]},{"LOC":30,"path":"/src/smallsql/database/ExpressionArithmetic.java","prefix_id":"T2-643","label":"/src/smallsql/database/ExpressionArithmetic.java","id":643,"children":[{"prefix_id":"T2-269","attributes":{"LOC":15,"endLine":600,"startLine":586,"file":"ExpressionArithmetic.java","clone":"switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getLong() == right.getLong();\r\n                        case GREATER:   return left.getLong() >  right.getLong();\r\n                        case GRE_EQU:   return left.getLong() >= right.getLong();\r\n                        case LESSER:    return left.getLong() <  right.getLong();\r\n                        case LES_EQU:   return left.getLong() <= right.getLong();\r\n                        case UNEQUALS:  return left.getLong() != right.getLong();\r\n                        case BETWEEN:\r\n                                        long _left = left.getLong();\r\n                                        return _left >= right.getLong() && right2.getLong() >= _left;\r\n                        default:\r\n                        \treturn getLong() != 0;\r\n                    }"},"id":269},{"prefix_id":"T2-270","attributes":{"LOC":15,"endLine":650,"startLine":636,"file":"ExpressionArithmetic.java","clone":"switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getMoney() == right.getMoney();\r\n                        case GREATER:   return left.getMoney() >  right.getMoney();\r\n                        case GRE_EQU:   return left.getMoney() >= right.getMoney();\r\n                        case LESSER:    return left.getMoney() <  right.getMoney();\r\n                        case LES_EQU:   return left.getMoney() <= right.getMoney();\r\n                        case UNEQUALS:  return left.getMoney() != right.getMoney();\r\n                        case BETWEEN:\r\n                                        long _left = left.getMoney();\r\n                                        return _left >= right.getMoney() && right2.getMoney() >= _left;\r\n                        default:\r\n                        \treturn getMoney() != 0;\r\n                    }"},"id":270}]},{"LOC":6,"path":"/src/smallsql/database/MemoryStream.java","prefix_id":"T2-645","label":"/src/smallsql/database/MemoryStream.java","id":645,"children":[{"prefix_id":"T2-88","attributes":{"LOC":3,"endLine":126,"startLine":124,"file":"MemoryStream.java","clone":"{\r\n\t\treturn ((puffer[ offset++ ] & 0xFF) << 8) | (puffer[ offset++ ] & 0xFF);\r\n\t}"},"id":88}]},{"LOC":12,"path":"/src/smallsql/database/MemoryStream.java","prefix_id":"T2-647","label":"/src/smallsql/database/MemoryStream.java","id":647,"children":[{"prefix_id":"T2-212","attributes":{"LOC":6,"endLine":162,"startLine":157,"file":"MemoryStream.java","clone":"{\r\n\t\tbyte[] bytes = new byte[length];\r\n\t\tSystem.arraycopy(puffer, offset, bytes, 0, length);\r\n\t\toffset += length;\r\n\t\treturn bytes;\r\n\t}"},"id":212}]},{"LOC":4,"path":"/src/smallsql/database/SQLParser.java","prefix_id":"T2-649","label":"/src/smallsql/database/SQLParser.java","id":649,"children":[{"prefix_id":"T2-172","attributes":{"LOC":1,"endLine":1988,"startLine":1988,"file":"SQLParser.java","clone":"{ SQLTokenizer.DEFAULT, SQLTokenizer.IDENTITY, SQLTokenizer.NOT, SQLTokenizer.NULL, SQLTokenizer.PRIMARY, SQLTokenizer.UNIQUE, SQLTokenizer.COMMA, SQLTokenizer.PARENTHESIS_R}"},"id":172},{"prefix_id":"T2-173","attributes":{"LOC":1,"endLine":1957,"startLine":1957,"file":"SQLParser.java","clone":"{SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW, SQLTokenizer.INDEX, SQLTokenizer.PROCEDURE, SQLTokenizer.UNIQUE, SQLTokenizer.CLUSTERED, SQLTokenizer.NONCLUSTERED}"},"id":173}]},{"LOC":3,"path":"/src/smallsql/database/SQLParser.java","prefix_id":"T2-651","label":"/src/smallsql/database/SQLParser.java","id":651,"children":[{"prefix_id":"T2-215","attributes":{"LOC":1,"endLine":1958,"startLine":1958,"file":"SQLParser.java","clone":"private static final int[] COMMANDS_DROP = {SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW, SQLTokenizer.INDEX, SQLTokenizer.PROCEDURE};"},"id":215},{"prefix_id":"T2-216","attributes":{"LOC":1,"endLine":1977,"startLine":1977,"file":"SQLParser.java","clone":"private static final int[] MISSING_TOKEN_LIST = {SQLTokenizer.COMMA, SQLTokenizer.FROM, SQLTokenizer.GROUP, SQLTokenizer.HAVING, SQLTokenizer.ORDER};"},"id":216},{"prefix_id":"T2-217","attributes":{"LOC":1,"endLine":1955,"startLine":1955,"file":"SQLParser.java","clone":"private static final int[] COMMANDS_ESCAPE = {SQLTokenizer.D, SQLTokenizer.T, SQLTokenizer.TS, SQLTokenizer.FN, SQLTokenizer.CALL};"},"id":217}]},{"LOC":12,"path":"/src/smallsql/database/SQLParser.java","prefix_id":"T2-653","label":"/src/smallsql/database/SQLParser.java","id":653,"children":[{"prefix_id":"T2-314","attributes":{"LOC":6,"endLine":1937,"startLine":1932,"file":"SQLParser.java","clone":"try{\r\n            int maxRows = Integer.parseInt(token.getName(sql));\r\n            selCmd.setMaxRows(maxRows);\r\n        }catch(NumberFormatException e){\r\n            throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\r\n        }"},"id":314},{"prefix_id":"T2-315","attributes":{"LOC":6,"endLine":357,"startLine":352,"file":"SQLParser.java","clone":"try{\r\n\t\t\t\t\t\tint maxRows = Integer.parseInt(token.getName(sql));\r\n\t\t\t\t\t\tselCmd.setMaxRows(maxRows);\r\n\t\t\t\t\t}catch(NumberFormatException e){\r\n\t\t\t\t\t\tthrow createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\r\n\t\t\t\t\t}"},"id":315}]},{"LOC":2,"path":"/src/smallsql/database/SQLParser.java","prefix_id":"T2-655","label":"/src/smallsql/database/SQLParser.java","id":655,"children":[{"prefix_id":"T2-404","attributes":{"LOC":1,"endLine":1988,"startLine":1988,"file":"SQLParser.java","clone":"private static final int[] MISSING_OPTIONS_DATATYPE = { SQLTokenizer.DEFAULT, SQLTokenizer.IDENTITY, SQLTokenizer.NOT, SQLTokenizer.NULL, SQLTokenizer.PRIMARY, SQLTokenizer.UNIQUE, SQLTokenizer.COMMA, SQLTokenizer.PARENTHESIS_R};"},"id":404},{"prefix_id":"T2-405","attributes":{"LOC":1,"endLine":1957,"startLine":1957,"file":"SQLParser.java","clone":"private static final int[] COMMANDS_CREATE = {SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW, SQLTokenizer.INDEX, SQLTokenizer.PROCEDURE, SQLTokenizer.UNIQUE, SQLTokenizer.CLUSTERED, SQLTokenizer.NONCLUSTERED};"},"id":405}]},{"LOC":6,"path":"/src/smallsql/database/ExpressionFunctionCase.java","prefix_id":"T2-657","label":"/src/smallsql/database/ExpressionFunctionCase.java","id":657,"children":[{"prefix_id":"T2-9","attributes":{"LOC":3,"endLine":189,"startLine":187,"file":"ExpressionFunctionCase.java","clone":"for(int i=results.size()-1; i>=0; i--){\r\n\t\t\tprecision = Math.max(precision, results.get(i).getPrecision());\r\n\t\t}"},"id":9},{"prefix_id":"T2-10","attributes":{"LOC":3,"endLine":198,"startLine":196,"file":"ExpressionFunctionCase.java","clone":"for(int i=results.size()-1; i>=0; i--){\r\n\t\t\tprecision = Math.max(precision, results.get(i).getScale());\r\n\t\t}"},"id":10}]},{"LOC":14,"path":"/src/smallsql/database/ExpressionFunctionCase.java","prefix_id":"T2-659","label":"/src/smallsql/database/ExpressionFunctionCase.java","id":659,"children":[{"prefix_id":"T2-64","attributes":{"LOC":7,"endLine":200,"startLine":194,"file":"ExpressionFunctionCase.java","clone":"{\r\n\t\tint precision = 0;\r\n\t\tfor(int i=results.size()-1; i>=0; i--){\r\n\t\t\tprecision = Math.max(precision, results.get(i).getScale());\r\n\t\t}\r\n\t\treturn precision;\r\n\t}"},"id":64},{"prefix_id":"T2-65","attributes":{"LOC":7,"endLine":191,"startLine":185,"file":"ExpressionFunctionCase.java","clone":"{\r\n\t\tint precision = 0;\r\n\t\tfor(int i=results.size()-1; i>=0; i--){\r\n\t\t\tprecision = Math.max(precision, results.get(i).getPrecision());\r\n\t\t}\r\n\t\treturn precision;\r\n\t}"},"id":65}]},{"LOC":20,"path":"/src/smallsql/junit/TestExceptionMethods.java","prefix_id":"T2-661","label":"/src/smallsql/junit/TestExceptionMethods.java","id":661,"children":[{"prefix_id":"T2-68","attributes":{"LOC":10,"endLine":176,"startLine":167,"file":"TestExceptionMethods.java","clone":"{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"ALTER TABLE DuplicatedColumn Add Col INT\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }"},"id":68},{"prefix_id":"T2-69","attributes":{"LOC":10,"endLine":193,"startLine":184,"file":"TestExceptionMethods.java","clone":"{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }"},"id":69}]},{"LOC":24,"path":"/src/smallsql/junit/TestExceptionMethods.java","prefix_id":"T2-663","label":"/src/smallsql/junit/TestExceptionMethods.java","id":663,"children":[{"prefix_id":"T2-140","attributes":{"LOC":12,"endLine":178,"startLine":167,"file":"TestExceptionMethods.java","clone":"try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"ALTER TABLE DuplicatedColumn Add Col INT\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }finally{\r\n            dropTable(con, \"DuplicatedColumn\");\r\n        }"},"id":140},{"prefix_id":"T2-141","attributes":{"LOC":12,"endLine":195,"startLine":184,"file":"TestExceptionMethods.java","clone":"try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }finally{\r\n            dropTable(con, \"DuplicatedColumn\");\r\n        }"},"id":141}]},{"LOC":30,"path":"/src/smallsql/junit/TestExceptionMethods.java","prefix_id":"T2-665","label":"/src/smallsql/junit/TestExceptionMethods.java","id":665,"children":[{"prefix_id":"T2-289","attributes":{"LOC":15,"endLine":179,"startLine":165,"file":"TestExceptionMethods.java","clone":"{\r\n        Connection con = AllTests.getConnection();\r\n        try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"ALTER TABLE DuplicatedColumn Add Col INT\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }finally{\r\n            dropTable(con, \"DuplicatedColumn\");\r\n        }\r\n    }"},"id":289},{"prefix_id":"T2-290","attributes":{"LOC":15,"endLine":196,"startLine":182,"file":"TestExceptionMethods.java","clone":"{\r\n        Connection con = AllTests.getConnection();\r\n        try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }finally{\r\n            dropTable(con, \"DuplicatedColumn\");\r\n        }\r\n    }"},"id":290}]},{"LOC":8,"path":"/src/smallsql/database/SSConnection.java","prefix_id":"T2-667","label":"/src/smallsql/database/SSConnection.java","id":667,"children":[{"prefix_id":"T2-337","attributes":{"LOC":4,"endLine":153,"startLine":150,"file":"SSConnection.java","clone":"for(int i=0; i<count; i++){\r\n\t                TransactionStep page = (TransactionStep)commitPages.get(i);\r\n\t                page.commit();\r\n\t            }"},"id":337},{"prefix_id":"T2-338","attributes":{"LOC":4,"endLine":157,"startLine":154,"file":"SSConnection.java","clone":"for(int i=0; i<count; i++){\r\n\t\t\t\t    TransactionStep page = (TransactionStep)commitPages.get(i);\r\n\t\t\t\t\tpage.freeLock();\r\n\t\t\t\t}"},"id":338}]},{"LOC":18,"path":"/src/smallsql/junit/TestOrderBy.java","prefix_id":"T2-669","label":"/src/smallsql/junit/TestOrderBy.java","id":669,"children":[{"prefix_id":"T2-21","attributes":{"LOC":6,"endLine":137,"startLine":132,"file":"TestOrderBy.java","clone":"{\r\n\t\t\tString newValue = rs.getString(\"c\");\r\n\t\t\tassertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}"},"id":21},{"prefix_id":"T2-23","attributes":{"LOC":6,"endLine":165,"startLine":160,"file":"TestOrderBy.java","clone":"{\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}"},"id":23}]},{"LOC":18,"path":"/src/smallsql/junit/TestOrderBy.java","prefix_id":"T2-671","label":"/src/smallsql/junit/TestOrderBy.java","id":671,"children":[{"prefix_id":"T2-112","attributes":{"LOC":6,"endLine":137,"startLine":132,"file":"TestOrderBy.java","clone":"while(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"c\");\r\n\t\t\tassertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}"},"id":112},{"prefix_id":"T2-113","attributes":{"LOC":6,"endLine":165,"startLine":160,"file":"TestOrderBy.java","clone":"while(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}"},"id":113}]},{"LOC":10,"path":"/src/smallsql/junit/TestOrderBy.java","prefix_id":"T2-673","label":"/src/smallsql/junit/TestOrderBy.java","id":673,"children":[{"prefix_id":"T2-126","attributes":{"LOC":5,"endLine":435,"startLine":431,"file":"TestOrderBy.java","clone":"{\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}"},"id":126},{"prefix_id":"T2-127","attributes":{"LOC":5,"endLine":350,"startLine":346,"file":"TestOrderBy.java","clone":"{\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}"},"id":127}]},{"LOC":10,"path":"/src/smallsql/junit/TestOrderBy.java","prefix_id":"T2-675","label":"/src/smallsql/junit/TestOrderBy.java","id":675,"children":[{"prefix_id":"T2-144","attributes":{"LOC":5,"endLine":435,"startLine":431,"file":"TestOrderBy.java","clone":"while(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}"},"id":144},{"prefix_id":"T2-145","attributes":{"LOC":5,"endLine":350,"startLine":346,"file":"TestOrderBy.java","clone":"while(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}"},"id":145}]},{"LOC":46,"path":"/src/smallsql/junit/TestOrderBy.java","prefix_id":"T2-677","label":"/src/smallsql/junit/TestOrderBy.java","id":677,"children":[{"prefix_id":"T2-310","attributes":{"LOC":23,"endLine":726,"startLine":698,"file":"TestOrderBy.java","clone":"{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n\t\tResultSet rs;\r\n\t\tint count;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");\r\n\t\t\r\n\t\t//jetzt irgendwo in die Mitte scrollen\r\n\t\trs.next();\r\n\t\trs.next();\r\n\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen\r\n\t\t\r\n\t\trs.last();\r\n\t\tcount = 0;\r\n\t\twhile(rs.previous()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\t}"},"id":310},{"prefix_id":"T2-311","attributes":{"LOC":23,"endLine":757,"startLine":729,"file":"TestOrderBy.java","clone":"{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n\t\tResultSet rs;\r\n\t\tint count;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");\r\n\t\t\r\n\t\t//jetzt irgendwo in die Mitte scrollen\r\n\t\trs.next();\r\n\t\trs.next();\r\n\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen\r\n\t\t\r\n\t\trs.last();\r\n\t\tcount = 0;\r\n\t\twhile(rs.previous()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\t}"},"id":311}]},{"LOC":12,"path":"/src/smallsql/junit/TestOrderBy.java","prefix_id":"T2-679","label":"/src/smallsql/junit/TestOrderBy.java","id":679,"children":[{"prefix_id":"T2-333","attributes":{"LOC":6,"endLine":816,"startLine":811,"file":"TestOrderBy.java","clone":"while(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}"},"id":333},{"prefix_id":"T2-334","attributes":{"LOC":6,"endLine":192,"startLine":187,"file":"TestOrderBy.java","clone":"while(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}"},"id":334}]},{"LOC":16,"path":"/src/smallsql/junit/TestOrderBy.java","prefix_id":"T2-681","label":"/src/smallsql/junit/TestOrderBy.java","id":681,"children":[{"prefix_id":"T2-360","attributes":{"LOC":8,"endLine":246,"startLine":239,"file":"TestOrderBy.java","clone":"{\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}"},"id":360},{"prefix_id":"T2-361","attributes":{"LOC":8,"endLine":218,"startLine":211,"file":"TestOrderBy.java","clone":"{\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}"},"id":361}]},{"LOC":40,"path":"/src/smallsql/junit/TestOrderBy.java","prefix_id":"T2-683","label":"/src/smallsql/junit/TestOrderBy.java","id":683,"children":[{"prefix_id":"T2-376","attributes":{"LOC":20,"endLine":437,"startLine":414,"file":"TestOrderBy.java","clone":"{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Asc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}"},"id":376},{"prefix_id":"T2-377","attributes":{"LOC":20,"endLine":352,"startLine":329,"file":"TestOrderBy.java","clone":"{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}"},"id":377}]},{"LOC":44,"path":"/src/smallsql/junit/TestOrderBy.java","prefix_id":"T2-685","label":"/src/smallsql/junit/TestOrderBy.java","id":685,"children":[{"prefix_id":"T2-392","attributes":{"LOC":22,"endLine":251,"startLine":226,"file":"TestOrderBy.java","clone":"{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\r\n\t\tassertEquals( valueCount, count );\r\n\t}"},"id":392},{"prefix_id":"T2-393","attributes":{"LOC":22,"endLine":223,"startLine":198,"file":"TestOrderBy.java","clone":"{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\r\n\t\tassertEquals( valueCount, count );\r\n\t}"},"id":393}]},{"LOC":24,"path":"/src/smallsql/junit/BasicTestCase.java","prefix_id":"T2-687","label":"/src/smallsql/junit/BasicTestCase.java","id":687,"children":[{"prefix_id":"T2-17","attributes":{"LOC":12,"endLine":137,"startLine":125,"file":"BasicTestCase.java","clone":"if(needTrim && obj1 != null){\r\n            // trim for CHAR and BINARY\r\n            if(obj1 instanceof String) obj1 = ((String)obj1).trim();\r\n            if(obj1 instanceof byte[]){\r\n                byte[] tmp = (byte[])obj1;\r\n                int k=tmp.length-1;\r\n                for(; k>= 0; k--) if(tmp[k] != 0) break;\r\n                k++;\r\n                byte[] tmp2 = new byte[k];\r\n                System.arraycopy( tmp, 0, tmp2, 0, k);\r\n                obj1 = tmp2;\r\n            }\r\n        }"},"id":17},{"prefix_id":"T2-18","attributes":{"LOC":12,"endLine":150,"startLine":138,"file":"BasicTestCase.java","clone":"if(needTrim && obj2 != null){\r\n\t\t\t// trim for CHAR and BINARY\r\n\t\t\tif(obj2 instanceof String) obj2 = ((String)obj2).trim();\r\n\t\t\tif(obj2 instanceof byte[]){\r\n\t\t\t\tbyte[] tmp = (byte[])obj2;\r\n\t\t\t\tint k=tmp.length-1;\r\n\t\t\t\tfor(; k>= 0; k--) if(tmp[k] != 0) break;\r\n\t\t\t\tk++;\r\n\t\t\t\tbyte[] tmp2 = new byte[k];\r\n\t\t\t\tSystem.arraycopy( tmp, 0, tmp2, 0, k);\r\n\t\t\t\tobj2 = tmp2;\r\n\t\t\t}\r\n\t\t}"},"id":18}]},{"LOC":16,"path":"/src/smallsql/junit/BasicTestCase.java","prefix_id":"T2-689","label":"/src/smallsql/junit/BasicTestCase.java","id":689,"children":[{"prefix_id":"T2-163","attributes":{"LOC":8,"endLine":109,"startLine":102,"file":"BasicTestCase.java","clone":"{\r\n\t\tStringBuffer buf = new StringBuffer(bytes.length << 1);\r\n\t\tfor(int i=0; i<bytes.length; i++){\r\n\t\t\tbuf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n\t\t\tbuf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n\t\t}\r\n\t\treturn buf.toString();\r\n\t}"},"id":163}]},{"LOC":12,"path":"/src/smallsql/junit/BasicTestCase.java","prefix_id":"T2-691","label":"/src/smallsql/junit/BasicTestCase.java","id":691,"children":[{"prefix_id":"T2-319","attributes":{"LOC":6,"endLine":196,"startLine":191,"file":"BasicTestCase.java","clone":"{\r\n        try{\r\n            return Double.parseDouble( val ) != 0;\r\n        }catch(NumberFormatException e){/*ignore it if it not a number*/}\r\n        return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );\r\n    }"},"id":319}]},{"LOC":8,"path":"/src/smallsql/junit/BasicTestCase.java","prefix_id":"T2-693","label":"/src/smallsql/junit/BasicTestCase.java","id":693,"children":[{"prefix_id":"T2-380","attributes":{"LOC":4,"endLine":107,"startLine":104,"file":"BasicTestCase.java","clone":"{\r\n\t\t\tbuf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n\t\t\tbuf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n\t\t}"},"id":380}]},{"LOC":226,"path":"/src/smallsql/database/language/Language_it.java","prefix_id":"T2-695","label":"/src/smallsql/database/language/Language_it.java","id":695,"children":[{"prefix_id":"T2-61","attributes":{"LOC":113,"endLine":184,"startLine":51,"file":"Language_it.java","clone":"private final String[][] ENTRIES = {\r\n{ UNSUPPORTED_OPERATION           , \"Operazione non supportata: {0}.\" },\r\n{ CANT_LOCK_FILE                  , \"Impossibile bloccare il file ''{0}''. Un database SmallSQL Database può essere aperto da un unico processo.\" },\r\n\r\n{ DB_EXISTENT                     , \"Il database ''{0}'' è già esistente.\" },\r\n{ DB_NONEXISTENT                  , \"Il database ''{0}'' Non esiste.\" },\r\n{ DB_NOT_DIRECTORY                , \"La directory ''{0}'' non è un database SmallSQL.\" },\r\n{ DB_NOTCONNECTED                 , \"L''utente non è connesso a un database.\" },\r\n\r\n{ CONNECTION_CLOSED               , \"La connessione è già chiusa.\" },\r\n\r\n{ VIEW_INSERT                     , \"INSERT non è supportato per una view.\" },\r\n{ VIEWDROP_NOT_VIEW               , \"Non è possibile effettuare DROP VIEW con ''{0}'' perché non è una view.\" },\r\n{ VIEW_CANTDROP                   , \"Non si può effettuare drop sulla view ''{0}''.\" },\r\n\r\n{ RSET_NOT_PRODUCED               , \"Nessun ResultSet è stato prodotto.\" },\r\n{ RSET_READONLY                   , \"Il ResultSet è di sola lettura.\" },\r\n{ RSET_FWDONLY                    , \"Il ResultSet è forward only.\" }, // no real translation\r\n{ RSET_CLOSED                     , \"Il ResultSet è chiuso.\" },\r\n{ RSET_NOT_INSERT_ROW             , \"Il cursore non è attualmente nella riga ''InsertRow''.\" },\r\n{ RSET_ON_INSERT_ROW              , \"Il cursore è attualmente nella riga ''InsertRow''.\" },\r\n{ ROWSOURCE_READONLY              , \"Il Rowsource è di sola lettura.\" },\r\n\r\n{ STMT_IS_CLOSED                  , \"Lo Statement è in stato chiuso.\" },\r\n\r\n{ SUBQUERY_COL_COUNT              , \"Il conteggio delle colonne nella subquery deve essere 1 e non {0}.\" },\r\n{ JOIN_DELETE                     , \"DeleteRow non supportato nelle join.\" },\r\n{ JOIN_INSERT                     , \"InsertRow non supportato nelle join.\" },\r\n{ DELETE_WO_FROM                  , \"DeleteRow necessita un''espressione FROM.\" },\r\n{ INSERT_WO_FROM                  , \"InsertRow necessita un''espressione FROM.\" },\r\n\r\n{ TABLE_CANT_RENAME               , \"La tabella ''{0}'' non può essere rinominata.\" },\r\n{ TABLE_CANT_DROP                 , \"Non si può effettuare DROP della tabella ''{0}''.\" },\r\n{ TABLE_CANT_DROP_LOCKED          , \"Non si può effettuare DROP della tabella ''{0}'' perché è in LOCK.\" },\r\n{ TABLE_CORRUPT_PAGE              , \"Pagina della tabella corrotta alla posizione: {0}.\" },\r\n{ TABLE_MODIFIED                  , \"La tabella ''{0}'' è stata modificata.\" },\r\n{ TABLE_DEADLOCK                  , \"Deadlock: non si può mettere un lock sulla tabella ''{0}''.\" },\r\n{ TABLE_OR_VIEW_MISSING           , \"La tabella/view ''{0}'' non esiste.\" },\r\n{ TABLE_FILE_INVALID              , \"Il file ''{0}'' non include una tabella SmallSQL valida.\" },\r\n{ TABLE_OR_VIEW_FILE_INVALID      , \"Il file ''{0}'' non è un contenitore valido di tabella/view.\" },\r\n{ TABLE_EXISTENT                  , \"La tabella/vista ''{0}'' è già esistente.\" },\r\n\r\n{ FK_NOT_TABLE                    , \"''{0}'' non è una tabella.\" },\r\n{ PK_ONLYONE                      , \"Una tabella può avere solo una primary key.\" },\r\n{ KEY_DUPLICATE                   , \"Chiave duplicata.\" },\r\n\r\n{ MONTH_TOOLARGE                  , \"Valore del mese troppo alto del in DATE o TIMESTAMP ''{0}''.\" },\r\n{ DAYS_TOOLARGE                   , \"Valore del giorno troppo altro in DATE o TIMESTAMP ''{0}''.\" },\r\n{ HOURS_TOOLARGE                  , \"Valore delle ore troppo alto in in TIME o TIMESTAMP ''{0}''.\" },\r\n{ MINUTES_TOOLARGE                , \"Valore dei minuti troppo alto in TIME o TIMESTAMP ''{0}''.\" },\r\n{ SECS_TOOLARGE                   , \"Valore dei secondi troppo alto in TIME o TIMESTAMP ''{0}''.\" },\r\n{ MILLIS_TOOLARGE                 , \"VAlore dei millisecondi troppo alto in TIMESTAMP ''{0}''.\" },\r\n{ DATETIME_INVALID                , \"''{0}'' è un DATE, TIME or TIMESTAMP non valido.\" },\r\n\r\n{ UNSUPPORTED_CONVERSION_OPER     , \"Conversione non supportata verso il tipo di dato ''{0}'' dal tipo ''{1}'' per l''operazione ''{2}''.\" },\r\n{ UNSUPPORTED_DATATYPE_OPER       , \"Tipo di dato ''{0}'' non supportato per l''operazione ''{1}''.\" },\r\n{ UNSUPPORTED_DATATYPE_FUNC       , \"Tipo di dato ''{0}'' non supportato per la funzione ''{1}''.\" },\r\n{ UNSUPPORTED_CONVERSION_FUNC     , \"Conversione verso il tipo di dato ''{0}'' non supportato per la funzione ''{1}''.\" },\r\n{ UNSUPPORTED_TYPE_CONV           , \"Tipo non supportato per la funzione CONVERT: {0}.\" },\r\n{ UNSUPPORTED_TYPE_SUM            , \"Tipo non supportato per la funzione SUM: ''{0}''.\" },\r\n{ UNSUPPORTED_TYPE_MAX            , \"Tipo non supportato per la funzione MAX: ''{0}''.\" },\r\n{ UNSUPPORTED_CONVERSION          , \"Non è possible convertire ''{0}'' [{1}] in ''{2}''.\" },\r\n{ INSERT_INVALID_LEN              , \"Lunghezza non valida ''{0}'' per la funzione INSERT.\" },\r\n{ SUBSTR_INVALID_LEN              , \"Lunghezza non valida ''{0}'' per la funzione SUBSTRING.\" },\r\n\r\n{ VALUE_STR_TOOLARGE              , \"Stringa troppo lunga per la colonna.\" },\r\n{ VALUE_BIN_TOOLARGE              , \"Valore binario di lunghezza {0} eccessiva per la colonna di lunghezza {1}.\" },\r\n{ VALUE_NULL_INVALID              , \"Valori nulli non validi per la colonna ''{0}''.\" },\r\n{ VALUE_CANT_CONVERT              , \"Impossible convertire un valore {0} in un valore {1}.\" },\r\n\r\n{ BYTEARR_INVALID_SIZE            , \"Lunghezza non valida per un array di bytes: {0}.\" },\r\n{ LOB_DELETED                     , \"L''oggetto LOB è stato cancellato.\" },\r\n\r\n{ PARAM_CLASS_UNKNOWN             , \"Classe sconosciuta (''{0}'') per il parametro.\" },\r\n{ PARAM_EMPTY                     , \"Il parametro {0} è vuoto.\" },\r\n{ PARAM_IDX_OUT_RANGE             , \"L''indice {0} per il parametro è fuori dall''intervallo consentito ( 1 <= n <= {1} ).\" },\r\n\r\n{ COL_DUPLICATE                \t  , \"Nome di colonna duplicato: ''{0}''.\" },\r\n{ COL_MISSING                     , \"Colonna ''{0}'' non trovata.\" },\r\n{ COL_VAL_UNMATCH                 , \"Il conteggio di colonne e valori non è identico.\" },\r\n{ COL_INVALID_SIZE                , \"Lunghezza non valida ({0}) per la colonna ''{1}''.\" },\r\n{ COL_WRONG_PREFIX                , \"Il prefisso di colonna ''{0}'' non coincide con un alias o nome di tabella usato nella query.\" },\r\n{ COL_READONLY                    , \"La colonna ''{0}'' è di sola lettura.\" },\r\n{ COL_INVALID_NAME                , \"Nome di colonna non valido ''{0}''.\" },\r\n{ COL_IDX_OUT_RANGE               , \"Indice di colonna fuori dall''intervallo valido: {0}.\" },\r\n{ COL_AMBIGUOUS                   , \"Il nome di colonna ''{0}'' è ambiguo.\" },\r\n\r\n{ GROUP_AGGR_INVALID              , \"Funzione di aggregrazione non valida per la clausola GROUP BY: ({0}).\" },\r\n{ GROUP_AGGR_NOTPART              , \"L''espressione ''{0}'' non è parte di una funzione di aggregazione o della clausola GROUP BY.\" },\r\n{ ORDERBY_INTERNAL                , \"Errore interno per ORDER BY.\" },\r\n{ UNION_DIFFERENT_COLS            , \"SELECT appartenenti ad una UNION con numero di colonne differenti: {0} e {1}.\" },\r\n\r\n{ INDEX_EXISTS                    , \"L''indice ''{0}'' è già esistente.\" },\r\n{ INDEX_MISSING                   , \"L''indice ''{0}'' non esiste.\" },\r\n{ INDEX_FILE_INVALID              , \"Il file ''{0}'' non è un contenitore valido per un indice.\" },\r\n{ INDEX_CORRUPT                   , \"Errore durante il caricamento dell''indice. File dell''indice corrotto: ''{0}''.\" },\r\n{ INDEX_TOOMANY_EQUALS            , \"Troppe voci uguali nell''indice.\" },\r\n\r\n{ FILE_TOONEW                     , \"La versione ({0}) del file ''{1}'' è troppo recente per questo runtime.\" },\r\n{ FILE_TOOOLD                     , \"La versione ({0}) del file ''{1}'' è troppo vecchia per questo runtime.\" },\r\n{ FILE_CANT_DELETE                , \"File ''(0)'' non possono essere eliminati.\" },\r\n\r\n{ ROW_0_ABSOLUTE                  , \"Il numero di riga 0 non è valido per il metodo ''absolute()''.\" },\r\n{ ROW_NOCURRENT                   , \"Nessuna riga corrente.\" },\r\n{ ROWS_WRONG_MAX                  , \"Numero massimo di righe non valido ({0}).\" },\r\n{ ROW_LOCKED                      , \"La riga è bloccata da un''altra connessione.\" },\r\n{ ROW_DELETED                     , \"Riga già cancellata.\" },\r\n\r\n{ SAVEPT_INVALID_TRANS            , \"SAVEPOINT non valido per questa transazione.\" },\r\n{ SAVEPT_INVALID_DRIVER           , \"SAVEPOINT non valido per questo driver {0}.\" },\r\n\r\n{ ALIAS_UNSUPPORTED               , \"Alias non supportato per questo tipo di sorgente righe.\" },\r\n{ ISOLATION_UNKNOWN               , \"Livello di Isolamento transazione sconosciuto: {0}.\" },\r\n{ FLAGVALUE_INVALID               , \"Flag non valida nel metodo ''getMoreResults'': {0}.\" },\r\n{ ARGUMENT_INVALID                , \"Argomento non valido nel metodo ''setNeedGenratedKeys'': {0}.\" },\r\n{ GENER_KEYS_UNREQUIRED           , \"GeneratedKeys non richieste.\" },\r\n{ SEQUENCE_HEX_INVALID            , \"Sequenza esadecimale non valido alla posizione {0}.\" },\r\n{ SEQUENCE_HEX_INVALID_STR        , \"Sequence esadecimale non valida alla positione {0} in ''{1}''.\" },\r\n\r\n{ SYNTAX_BASE_OFS            \t  , \"Errore di sintassi alla posizione {0} in ''{1}''. \" },\r\n{ SYNTAX_BASE_END        \t\t  , \"Errore di sintassi, fine inattesa della stringa SQL. \" },\r\n{ STXADD_ADDITIONAL_TOK\t\t\t  , \"Token aggiuntivo dopo la fine dell''istruzione SQL.\" },\r\n{ STXADD_IDENT_EXPECT\t\t\t  , \"Identificatore atteso.\" },\r\n{ STXADD_IDENT_EMPTY \t\t\t  , \"Identificatore vuoto.\" },\r\n{ STXADD_IDENT_WRONG \t\t\t  , \"Identificatore errato ''{0}''.\" },\r\n{ STXADD_OPER_MINUS \t\t\t  , \"Operatore ''meno'' non valido per il tipo di dato varbinary.\" },\r\n{ STXADD_FUNC_UNKNOWN \t\t\t  , \"Funzione sconosciuta.\" },\r\n{ STXADD_PARAM_INVALID_COUNT\t  , \"Totale parametri non valido.\" },\r\n{ STXADD_JOIN_INVALID\t  \t\t  , \"Sintassi della join non valida.\" },\r\n{ STXADD_FROM_PAR_CLOSE\t  \t\t  , \"Parentesi chiusa non attesa nella clausola from.\" },\r\n{ STXADD_KEYS_REQUIRED\t  \t\t  , \"Le parole chiave richieste sono: \" },\r\n{ STXADD_NOT_NUMBER\t  \t\t      , \"Richiesto valore numerico (passato = ''{0}'').\" },\r\n{ STXADD_COMMENT_OPEN\t  \t\t  , \"Chiusura del commento mancante (''*/'').\" },\r\n\t};"},"id":61}]},{"LOC":10,"path":"/src/smallsql/database/ExpressionFunctionTimestampAdd.java","prefix_id":"T2-697","label":"/src/smallsql/database/ExpressionFunctionTimestampAdd.java","id":697,"children":[{"prefix_id":"T2-178","attributes":{"LOC":5,"endLine":100,"startLine":96,"file":"ExpressionFunctionTimestampAdd.java","clone":"{\r\n\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());\r\n\t\t\t\tdetails2.year += param1.getLong();\r\n\t\t\t\treturn DateTime.calcMillis(details2);\r\n\t\t\t}"},"id":178},{"prefix_id":"T2-179","attributes":{"LOC":5,"endLine":90,"startLine":86,"file":"ExpressionFunctionTimestampAdd.java","clone":"{\r\n\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());\r\n\t\t\t\tdetails2.month += param1.getLong();\r\n\t\t\t\treturn DateTime.calcMillis(details2);\r\n\t\t\t}"},"id":179}]},{"LOC":10,"path":"/src/smallsql/database/ExpressionFunctionConvert.java","prefix_id":"T2-699","label":"/src/smallsql/database/ExpressionFunctionConvert.java","id":699,"children":[{"prefix_id":"T2-265","attributes":{"LOC":5,"endLine":157,"startLine":153,"file":"ExpressionFunctionConvert.java","clone":"{\r\n\t\t\t\t\tbyte[] buffer = new byte[length];\r\n\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );\r\n\t\t\t\t\treturn buffer;\r\n\t\t\t\t}"},"id":265},{"prefix_id":"T2-266","attributes":{"LOC":5,"endLine":146,"startLine":142,"file":"ExpressionFunctionConvert.java","clone":"{\r\n\t\t\t\t\tbyte[] buffer = new byte[length];\r\n\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );\r\n\t\t\t\t\treturn buffer;\r\n\t\t\t\t}"},"id":266}]},{"LOC":8,"path":"/src/smallsql/tools/CommandLine.java","prefix_id":"T2-701","label":"/src/smallsql/tools/CommandLine.java","id":701,"children":[{"prefix_id":"T2-450","attributes":{"LOC":4,"endLine":72,"startLine":69,"file":"CommandLine.java","clone":"for(int i=1; i<=count; i++){\r\n            System.out.print(md.getColumnLabel(i));\r\n            System.out.print('\\t');\r\n        }"},"id":450},{"prefix_id":"T2-451","attributes":{"LOC":4,"endLine":78,"startLine":75,"file":"CommandLine.java","clone":"for(int i=1; i<=count; i++){\r\n                System.out.print(rs.getObject(i));\r\n                System.out.print('\\t');\r\n            }"},"id":451}]},{"LOC":20,"path":"/src/smallsql/database/ExpressionFunctionHour.java","prefix_id":"T2-703","label":"/src/smallsql/database/ExpressionFunctionHour.java","id":703,"children":[{"prefix_id":"T2-137","attributes":{"LOC":5,"endLine":52,"startLine":48,"file":"ExpressionFunctionHour.java","clone":"{\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.hour;\r\n\t}"},"id":137}]},{"LOC":10,"path":"/src/smallsql/database/ExpressionFunctionDayOfYear.java","prefix_id":"T2-705","label":"/src/smallsql/database/ExpressionFunctionDayOfYear.java","id":705,"children":[{"prefix_id":"T2-117","attributes":{"LOC":5,"endLine":52,"startLine":48,"file":"ExpressionFunctionDayOfYear.java","clone":"{\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.dayofyear+1;\r\n\t}"},"id":117}]},{"LOC":36,"path":"/src/smallsql/junit/TestFunctions.java","prefix_id":"T2-707","label":"/src/smallsql/junit/TestFunctions.java","id":707,"children":[{"prefix_id":"T2-182","attributes":{"LOC":9,"endLine":383,"startLine":374,"file":"TestFunctions.java","clone":"{\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }"},"id":182}]},{"LOC":28,"path":"/src/smallsql/junit/TestFunctions.java","prefix_id":"T2-709","label":"/src/smallsql/junit/TestFunctions.java","id":709,"children":[{"prefix_id":"T2-441","attributes":{"LOC":7,"endLine":382,"startLine":375,"file":"TestFunctions.java","clone":"try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }"},"id":441}]},{"LOC":6,"path":"/src/smallsql/junit/TestLanguage.java","prefix_id":"T2-711","label":"/src/smallsql/junit/TestLanguage.java","id":711,"children":[{"prefix_id":"T2-203","attributes":{"LOC":3,"endLine":221,"startLine":218,"file":"TestLanguage.java","clone":"/* WARNING! skips message 0 (CUSTOM_MESSAGE) */\r\n        for (int j = 1; j < engEntriesArr.length; j++) {\r\n            engEntriesSet.add(engEntriesArr[j][0]);\r\n        }"},"id":203},{"prefix_id":"T2-204","attributes":{"LOC":3,"endLine":231,"startLine":229,"file":"TestLanguage.java","clone":"for (int j = 0; j < otherEntriesArr.length; j++) {\r\n                otherEntriesSet.add(otherEntriesArr[j][0]);\r\n            }"},"id":204}]},{"LOC":16,"path":"/src/smallsql/junit/TestLanguage.java","prefix_id":"T2-713","label":"/src/smallsql/junit/TestLanguage.java","id":713,"children":[{"prefix_id":"T2-372","attributes":{"LOC":8,"endLine":259,"startLine":251,"file":"TestLanguage.java","clone":"if (diff.size() > 0) {\r\n                failed = true;\r\n                msgBuf.append(\"\\nAdditional entries for language \").append( OTHER_LANGUAGES[i] ).append(\": \");\r\n                \r\n                for (Iterator itr = diff.iterator(); itr.hasNext(); ) {\r\n                    msgBuf.append(itr.next());\r\n                    if (itr.hasNext()) msgBuf.append(',');\r\n                }\r\n            }"},"id":372},{"prefix_id":"T2-373","attributes":{"LOC":8,"endLine":245,"startLine":237,"file":"TestLanguage.java","clone":"if (diff.size() > 0) {\r\n\t\t\t\tfailed = true;\r\n                msgBuf.append(\"\\nMissing entries for language \").append( OTHER_LANGUAGES[i] ).append(\": \");\r\n\t\t\t\t\r\n\t\t\t\tfor (Iterator itr = diff.iterator(); itr.hasNext(); ) {\r\n\t\t\t\t\tmsgBuf.append(itr.next());\r\n\t\t\t\t\tif (itr.hasNext()) msgBuf.append(',');\r\n\t\t\t\t}\r\n\t\t\t}"},"id":373}]},{"LOC":30,"path":"/src/smallsql/junit/TestAlterTable2.java","prefix_id":"T2-715","label":"/src/smallsql/junit/TestAlterTable2.java","id":715,"children":[{"prefix_id":"T2-301","attributes":{"LOC":10,"endLine":38,"startLine":29,"file":"TestAlterTable2.java","clone":"{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"create table \"+table+\" (keyField varchar(2) primary key)\");\r\n        st.execute(\"alter table \"+table+\" add anotherField varchar(4)\");\r\n        ResultSet rs = st.executeQuery(\"Select * From \" + table);\r\n        assertRSMetaData( rs, new String[]{\"keyField\", \"anotherField\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\r\n        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );\r\n        assertRowCount( 1, rs );\r\n    }"},"id":301},{"prefix_id":"T2-302","attributes":{"LOC":10,"endLine":50,"startLine":41,"file":"TestAlterTable2.java","clone":"{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"create table \"+table+\" (a varchar(2))\");\r\n        st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");\r\n        ResultSet rs = st.executeQuery(\"Select * From \" + table);\r\n        assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\r\n        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );\r\n        assertRowCount( 1, rs );\r\n    }"},"id":302},{"prefix_id":"T2-303","attributes":{"LOC":10,"endLine":80,"startLine":71,"file":"TestAlterTable2.java","clone":"{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"create table \"+table+\" (a varchar(2) unique)\");\r\n        st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");\r\n        ResultSet rs = st.executeQuery(\"Select * From \" + table);\r\n        assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\r\n        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );\r\n        assertRowCount( 2, rs );\r\n    }"},"id":303}]},{"LOC":36,"path":"/src/smallsql/junit/TestMoneyRounding.java","prefix_id":"T2-717","label":"/src/smallsql/junit/TestMoneyRounding.java","id":717,"children":[{"prefix_id":"T2-185","attributes":{"LOC":9,"endLine":62,"startLine":53,"file":"TestMoneyRounding.java","clone":"{\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }"},"id":185}]},{"LOC":28,"path":"/src/smallsql/junit/TestMoneyRounding.java","prefix_id":"T2-719","label":"/src/smallsql/junit/TestMoneyRounding.java","id":719,"children":[{"prefix_id":"T2-440","attributes":{"LOC":7,"endLine":61,"startLine":54,"file":"TestMoneyRounding.java","clone":"try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }"},"id":440}]},{"LOC":9,"path":"/src/smallsql/junit/BenchTest.java","prefix_id":"T2-721","label":"/src/smallsql/junit/BenchTest.java","id":721,"children":[{"prefix_id":"T2-26","attributes":{"LOC":3,"endLine":182,"startLine":180,"file":"BenchTest.java","clone":"if (count != rowCount)\r\n                 System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");"},"id":26},{"prefix_id":"T2-27","attributes":{"LOC":3,"endLine":123,"startLine":121,"file":"BenchTest.java","clone":"if (count != rowCount)\r\n                System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");"},"id":27},{"prefix_id":"T2-28","attributes":{"LOC":3,"endLine":392,"startLine":390,"file":"BenchTest.java","clone":"if (count != rowCount)\r\n                 System.out.println( \"  Failed: Only \" + count + \" rows were updated.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");"},"id":28}]},{"LOC":12,"path":"/src/smallsql/junit/BenchTest.java","prefix_id":"T2-723","label":"/src/smallsql/junit/BenchTest.java","id":723,"children":[{"prefix_id":"T2-42","attributes":{"LOC":6,"endLine":214,"startLine":208,"file":"BenchTest.java","clone":"// There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }"},"id":42},{"prefix_id":"T2-43","attributes":{"LOC":6,"endLine":328,"startLine":322,"file":"BenchTest.java","clone":"// There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }"},"id":43}]},{"LOC":24,"path":"/src/smallsql/junit/BenchTest.java","prefix_id":"T2-725","label":"/src/smallsql/junit/BenchTest.java","id":725,"children":[{"prefix_id":"T2-80","attributes":{"LOC":12,"endLine":333,"startLine":321,"file":"BenchTest.java","clone":"if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");\r\n                    return;\r\n                }\r\n            }"},"id":80},{"prefix_id":"T2-81","attributes":{"LOC":12,"endLine":219,"startLine":207,"file":"BenchTest.java","clone":"if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\r\n                    return;\r\n                }\r\n            }"},"id":81}]},{"LOC":20,"path":"/src/smallsql/database/ExpressionFunctionYear.java","prefix_id":"T2-727","label":"/src/smallsql/database/ExpressionFunctionYear.java","id":727,"children":[{"prefix_id":"T2-134","attributes":{"LOC":5,"endLine":52,"startLine":48,"file":"ExpressionFunctionYear.java","clone":"{\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.year;\r\n\t}"},"id":134}]}]},"label":"project://smallsql0.21_src","relations":[{"target":51,"source":50},{"target":413,"source":412},{"target":414,"source":412},{"target":415,"source":412},{"target":416,"source":412},{"target":417,"source":412},{"target":414,"source":413},{"target":415,"source":413},{"target":416,"source":413},{"target":417,"source":413},{"target":415,"source":414},{"target":416,"source":414},{"target":417,"source":414},{"target":416,"source":415},{"target":417,"source":415},{"target":417,"source":416},{"target":27,"source":26},{"target":28,"source":26},{"target":28,"source":27},{"target":43,"source":42},{"target":251,"source":250},{"target":122,"source":121},{"target":123,"source":121},{"target":123,"source":122},{"target":346,"source":345},{"target":347,"source":345},{"target":348,"source":345},{"target":347,"source":346},{"target":348,"source":346},{"target":348,"source":347},{"target":338,"source":337},{"target":401,"source":400},{"target":356,"source":355},{"target":357,"source":355},{"target":357,"source":356},{"target":32,"source":31},{"target":33,"source":31},{"target":33,"source":32},{"target":113,"source":112},{"target":114,"source":112},{"target":114,"source":113},{"target":307,"source":306},{"target":183,"source":182},{"target":184,"source":182},{"target":185,"source":182},{"target":184,"source":183},{"target":185,"source":183},{"target":185,"source":184},{"target":93,"source":92},{"target":141,"source":140},{"target":233,"source":232},{"target":200,"source":199},{"target":208,"source":207},{"target":81,"source":80},{"target":153,"source":152},{"target":154,"source":152},{"target":154,"source":153},{"target":69,"source":68},{"target":163,"source":162},{"target":105,"source":104},{"target":237,"source":236},{"target":238,"source":236},{"target":239,"source":236},{"target":240,"source":236},{"target":241,"source":236},{"target":242,"source":236},{"target":243,"source":236},{"target":238,"source":237},{"target":239,"source":237},{"target":240,"source":237},{"target":241,"source":237},{"target":242,"source":237},{"target":243,"source":237},{"target":239,"source":238},{"target":240,"source":238},{"target":241,"source":238},{"target":242,"source":238},{"target":243,"source":238},{"target":240,"source":239},{"target":241,"source":239},{"target":242,"source":239},{"target":243,"source":239},{"target":241,"source":240},{"target":242,"source":240},{"target":243,"source":240},{"target":242,"source":241},{"target":243,"source":241},{"target":243,"source":242},{"target":145,"source":144},{"target":352,"source":351},{"target":227,"source":226},{"target":228,"source":226},{"target":229,"source":226},{"target":228,"source":227},{"target":229,"source":227},{"target":229,"source":228},{"target":389,"source":388},{"target":212,"source":211},{"target":298,"source":297},{"target":73,"source":72},{"target":393,"source":392},{"target":315,"source":314},{"target":425,"source":424},{"target":451,"source":450},{"target":377,"source":376},{"target":323,"source":322},{"target":324,"source":322},{"target":324,"source":323},{"target":57,"source":56},{"target":47,"source":46},{"target":149,"source":148},{"target":421,"source":420},{"target":455,"source":454},{"target":173,"source":172},{"target":174,"source":172},{"target":175,"source":172},{"target":174,"source":173},{"target":175,"source":173},{"target":175,"source":174},{"target":342,"source":341},{"target":189,"source":188},{"target":190,"source":188},{"target":190,"source":189},{"target":441,"source":440},{"target":442,"source":440},{"target":443,"source":440},{"target":442,"source":441},{"target":443,"source":441},{"target":443,"source":442},{"target":290,"source":289},{"target":266,"source":265},{"target":397,"source":396},{"target":61,"source":60},{"target":97,"source":96},{"target":319,"source":318},{"target":381,"source":380},{"target":270,"source":269},{"target":65,"source":64},{"target":167,"source":166},{"target":77,"source":76},{"target":216,"source":215},{"target":217,"source":215},{"target":217,"source":216},{"target":109,"source":108},{"target":302,"source":301},{"target":303,"source":301},{"target":303,"source":302},{"target":131,"source":130},{"target":101,"source":100},{"target":373,"source":372},{"target":274,"source":273},{"target":275,"source":273},{"target":276,"source":273},{"target":277,"source":273},{"target":278,"source":273},{"target":279,"source":273},{"target":280,"source":273},{"target":281,"source":273},{"target":282,"source":273},{"target":275,"source":274},{"target":276,"source":274},{"target":277,"source":274},{"target":278,"source":274},{"target":279,"source":274},{"target":280,"source":274},{"target":281,"source":274},{"target":282,"source":274},{"target":276,"source":275},{"target":277,"source":275},{"target":278,"source":275},{"target":279,"source":275},{"target":280,"source":275},{"target":281,"source":275},{"target":282,"source":275},{"target":277,"source":276},{"target":278,"source":276},{"target":279,"source":276},{"target":280,"source":276},{"target":281,"source":276},{"target":282,"source":276},{"target":278,"source":277},{"target":279,"source":277},{"target":280,"source":277},{"target":281,"source":277},{"target":282,"source":277},{"target":279,"source":278},{"target":280,"source":278},{"target":281,"source":278},{"target":282,"source":278},{"target":280,"source":279},{"target":281,"source":279},{"target":282,"source":279},{"target":281,"source":280},{"target":282,"source":280},{"target":282,"source":281},{"target":429,"source":428},{"target":430,"source":428},{"target":431,"source":428},{"target":432,"source":428},{"target":433,"source":428},{"target":434,"source":428},{"target":435,"source":428},{"target":436,"source":428},{"target":437,"source":428},{"target":430,"source":429},{"target":431,"source":429},{"target":432,"source":429},{"target":433,"source":429},{"target":434,"source":429},{"target":435,"source":429},{"target":436,"source":429},{"target":437,"source":429},{"target":431,"source":430},{"target":432,"source":430},{"target":433,"source":430},{"target":434,"source":430},{"target":435,"source":430},{"target":436,"source":430},{"target":437,"source":430},{"target":432,"source":431},{"target":433,"source":431},{"target":434,"source":431},{"target":435,"source":431},{"target":436,"source":431},{"target":437,"source":431},{"target":433,"source":432},{"target":434,"source":432},{"target":435,"source":432},{"target":436,"source":432},{"target":437,"source":432},{"target":434,"source":433},{"target":435,"source":433},{"target":436,"source":433},{"target":437,"source":433},{"target":435,"source":434},{"target":436,"source":434},{"target":437,"source":434},{"target":436,"source":435},{"target":437,"source":435},{"target":437,"source":436},{"target":294,"source":293},{"target":385,"source":384},{"target":365,"source":364},{"target":366,"source":364},{"target":367,"source":364},{"target":368,"source":364},{"target":369,"source":364},{"target":366,"source":365},{"target":367,"source":365},{"target":368,"source":365},{"target":369,"source":365},{"target":367,"source":366},{"target":368,"source":366},{"target":369,"source":366},{"target":368,"source":367},{"target":369,"source":367},{"target":369,"source":368},{"target":22,"source":21},{"target":23,"source":21},{"target":23,"source":22},{"target":10,"source":9},{"target":85,"source":84},{"target":135,"source":134},{"target":136,"source":134},{"target":137,"source":134},{"target":136,"source":135},{"target":137,"source":135},{"target":137,"source":136},{"target":127,"source":126},{"target":118,"source":117},{"target":14,"source":13},{"target":158,"source":157},{"target":159,"source":157},{"target":159,"source":158},{"target":247,"source":246},{"target":18,"source":17},{"target":330,"source":329},{"target":286,"source":285},{"target":409,"source":408},{"target":447,"source":446},{"target":39,"source":38},{"target":255,"source":254},{"target":256,"source":254},{"target":257,"source":254},{"target":258,"source":254},{"target":259,"source":254},{"target":260,"source":254},{"target":261,"source":254},{"target":262,"source":254},{"target":256,"source":255},{"target":257,"source":255},{"target":258,"source":255},{"target":259,"source":255},{"target":260,"source":255},{"target":261,"source":255},{"target":262,"source":255},{"target":257,"source":256},{"target":258,"source":256},{"target":259,"source":256},{"target":260,"source":256},{"target":261,"source":256},{"target":262,"source":256},{"target":258,"source":257},{"target":259,"source":257},{"target":260,"source":257},{"target":261,"source":257},{"target":262,"source":257},{"target":259,"source":258},{"target":260,"source":258},{"target":261,"source":258},{"target":262,"source":258},{"target":260,"source":259},{"target":261,"source":259},{"target":262,"source":259},{"target":261,"source":260},{"target":262,"source":260},{"target":262,"source":261},{"target":194,"source":193},{"target":334,"source":333},{"target":4,"source":3},{"target":405,"source":404},{"target":223,"source":222},{"target":311,"source":310},{"target":204,"source":203},{"target":179,"source":178},{"target":361,"source":360},{"target":89,"source":88}],"duplicatesLOC":2109,"totalLOC":24016,"cloneClasses":[{"LOC":16,"id":2,"children":[{"prefix_id":"T2-3","attributes":{"LOC":8,"path":"/src/smallsql/database/SQLTokenizer.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":642,"startLine":635,"file":"SQLTokenizer.java","clone":"{\r\n        addKeyWord( \"D\",    D);\r\n        addKeyWord( \"T\",    T);\r\n        addKeyWord( \"TS\",   TS);\r\n        addKeyWord( \"FN\",   FN);\r\n        addKeyWord( \"CALL\", CALL);\r\n        addKeyWord( \"OJ\", OJ);\r\n    }"},"id":3},{"prefix_id":"T2-4","attributes":{"LOC":8,"path":"/src/smallsql/database/SQLTokenizer.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":877,"startLine":870,"file":"SQLTokenizer.java","clone":"{\r\n\t\taddKeyWord( \"ISNULL\",      \tIFNULL); //alias for IFNULL, used from MS SQL Server with 2 parameter, from MS Access with 1 parameter\r\n        addKeyWord( \"IFNULL\",       IFNULL);\r\n        addKeyWord( \"USER\",         USER);\r\n        addKeyWord( \"CONVERT\",      CONVERT);\r\n        addKeyWord( \"CAST\",      \tCAST);\r\n\t\taddKeyWord( \"IIF\",      \tIIF);\r\n    }"},"id":4}],"prefix_id":"T2-2","percentageOfProject":0.06662225183},{"LOC":0,"id":6,"children":[],"prefix_id":"T2-6","percentageOfProject":0.0},{"LOC":6,"id":8,"children":[{"prefix_id":"T2-9","attributes":{"LOC":3,"path":"/src/smallsql/database/ExpressionFunctionCase.java","percentageOfClass":50.0,"percentageOfProject":0.01249167222,"endLine":189,"startLine":187,"file":"ExpressionFunctionCase.java","clone":"for(int i=results.size()-1; i>=0; i--){\r\n\t\t\tprecision = Math.max(precision, results.get(i).getPrecision());\r\n\t\t}"},"id":9},{"prefix_id":"T2-10","attributes":{"LOC":3,"path":"/src/smallsql/database/ExpressionFunctionCase.java","percentageOfClass":50.0,"percentageOfProject":0.01249167222,"endLine":198,"startLine":196,"file":"ExpressionFunctionCase.java","clone":"for(int i=results.size()-1; i>=0; i--){\r\n\t\t\tprecision = Math.max(precision, results.get(i).getScale());\r\n\t\t}"},"id":10}],"prefix_id":"T2-8","percentageOfProject":0.02498334444},{"LOC":2,"id":12,"children":[{"prefix_id":"T2-13","attributes":{"LOC":1,"path":"/src/smallsql/junit/TestDBMetaData.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":211,"startLine":211,"file":"TestDBMetaData.java","clone":"int[] colTypes = {Types.VARCHAR, Types.SMALLINT, Types.INTEGER, Types.VARCHAR, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.BOOLEAN, Types.SMALLINT, Types.BOOLEAN, Types.BOOLEAN, Types.BOOLEAN, Types.NULL, Types.INTEGER, Types.INTEGER, Types.NULL, Types.NULL, Types.NULL };"},"id":13},{"prefix_id":"T2-14","attributes":{"LOC":1,"path":"/src/smallsql/junit/TestDBMetaData.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":183,"startLine":183,"file":"TestDBMetaData.java","clone":"int[] colTypes = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.INTEGER, Types.INTEGER, Types.INTEGER, Types.NULL, Types.VARCHAR, Types.NULL, Types.NULL, Types.INTEGER, Types.INTEGER, Types.VARCHAR};"},"id":14}],"prefix_id":"T2-12","percentageOfProject":0.008327781479},{"LOC":24,"id":16,"children":[{"prefix_id":"T2-17","attributes":{"LOC":12,"path":"/src/smallsql/junit/BasicTestCase.java","percentageOfClass":50.0,"percentageOfProject":0.04996668887,"endLine":137,"startLine":125,"file":"BasicTestCase.java","clone":"if(needTrim && obj1 != null){\r\n            // trim for CHAR and BINARY\r\n            if(obj1 instanceof String) obj1 = ((String)obj1).trim();\r\n            if(obj1 instanceof byte[]){\r\n                byte[] tmp = (byte[])obj1;\r\n                int k=tmp.length-1;\r\n                for(; k>= 0; k--) if(tmp[k] != 0) break;\r\n                k++;\r\n                byte[] tmp2 = new byte[k];\r\n                System.arraycopy( tmp, 0, tmp2, 0, k);\r\n                obj1 = tmp2;\r\n            }\r\n        }"},"id":17},{"prefix_id":"T2-18","attributes":{"LOC":12,"path":"/src/smallsql/junit/BasicTestCase.java","percentageOfClass":50.0,"percentageOfProject":0.04996668887,"endLine":150,"startLine":138,"file":"BasicTestCase.java","clone":"if(needTrim && obj2 != null){\r\n\t\t\t// trim for CHAR and BINARY\r\n\t\t\tif(obj2 instanceof String) obj2 = ((String)obj2).trim();\r\n\t\t\tif(obj2 instanceof byte[]){\r\n\t\t\t\tbyte[] tmp = (byte[])obj2;\r\n\t\t\t\tint k=tmp.length-1;\r\n\t\t\t\tfor(; k>= 0; k--) if(tmp[k] != 0) break;\r\n\t\t\t\tk++;\r\n\t\t\t\tbyte[] tmp2 = new byte[k];\r\n\t\t\t\tSystem.arraycopy( tmp, 0, tmp2, 0, k);\r\n\t\t\t\tobj2 = tmp2;\r\n\t\t\t}\r\n\t\t}"},"id":18}],"prefix_id":"T2-16","percentageOfProject":0.09993337775},{"LOC":18,"id":20,"children":[{"prefix_id":"T2-21","attributes":{"LOC":6,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":33.33333333,"percentageOfProject":0.02498334444,"endLine":137,"startLine":132,"file":"TestOrderBy.java","clone":"{\r\n\t\t\tString newValue = rs.getString(\"c\");\r\n\t\t\tassertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}"},"id":21},{"prefix_id":"T2-22","attributes":{"LOC":6,"path":"/src/smallsql/junit/TestDBMetaData.java","percentageOfClass":33.33333333,"percentageOfProject":0.02498334444,"endLine":169,"startLine":164,"file":"TestDBMetaData.java","clone":"{\r\n            String type2 = rs.getString(\"TABLE_TYPE\");\r\n            assertTrue( type+\"-\"+type2, type.compareTo(type2)<0);\r\n            type = type2;\r\n            count++;\r\n        }"},"id":22},{"prefix_id":"T2-23","attributes":{"LOC":6,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":33.33333333,"percentageOfProject":0.02498334444,"endLine":165,"startLine":160,"file":"TestOrderBy.java","clone":"{\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}"},"id":23}],"prefix_id":"T2-20","percentageOfProject":0.07495003331},{"LOC":9,"id":25,"children":[{"prefix_id":"T2-26","attributes":{"LOC":3,"path":"/src/smallsql/junit/BenchTest.java","percentageOfClass":33.33333333,"percentageOfProject":0.01249167222,"endLine":182,"startLine":180,"file":"BenchTest.java","clone":"if (count != rowCount)\r\n                 System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");"},"id":26},{"prefix_id":"T2-27","attributes":{"LOC":3,"path":"/src/smallsql/junit/BenchTest.java","percentageOfClass":33.33333333,"percentageOfProject":0.01249167222,"endLine":123,"startLine":121,"file":"BenchTest.java","clone":"if (count != rowCount)\r\n                System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");"},"id":27},{"prefix_id":"T2-28","attributes":{"LOC":3,"path":"/src/smallsql/junit/BenchTest.java","percentageOfClass":33.33333333,"percentageOfProject":0.01249167222,"endLine":392,"startLine":390,"file":"BenchTest.java","clone":"if (count != rowCount)\r\n                 System.out.println( \"  Failed: Only \" + count + \" rows were updated.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");"},"id":28}],"prefix_id":"T2-25","percentageOfProject":0.03747501666},{"LOC":21,"id":30,"children":[{"prefix_id":"T2-31","attributes":{"LOC":7,"path":"/src/smallsql/database/View.java","percentageOfClass":33.33333333,"percentageOfProject":0.02914723518,"endLine":144,"startLine":138,"file":"View.java","clone":"{\r\n        ByteBuffer buffer = ByteBuffer.allocate(8);\r\n        buffer.putInt(MAGIC_VIEW);\r\n        buffer.putInt(TABLE_VIEW_VERSION);\r\n        buffer.position(0);\r\n        raFile.write(buffer);\r\n\t}"},"id":31},{"prefix_id":"T2-32","attributes":{"LOC":7,"path":"/src/smallsql/database/IndexDescription.java","percentageOfClass":33.33333333,"percentageOfProject":0.02914723518,"endLine":219,"startLine":213,"file":"IndexDescription.java","clone":"{\r\n\t    ByteBuffer buffer = ByteBuffer.allocate(8);\r\n\t    buffer.putInt(MAGIC_INDEX);\r\n\t    buffer.putInt(INDEX_VERSION);\r\n\t    buffer.position(0);\r\n\t    raFile.write(buffer);\r\n\t}"},"id":32},{"prefix_id":"T2-33","attributes":{"LOC":7,"path":"/src/smallsql/database/Table.java","percentageOfClass":33.33333333,"percentageOfProject":0.02914723518,"endLine":227,"startLine":221,"file":"Table.java","clone":"{\r\n        ByteBuffer buffer = ByteBuffer.allocate(8);\r\n        buffer.putInt(MAGIC_TABLE);\r\n        buffer.putInt(TABLE_VIEW_VERSION);\r\n        buffer.position(0);\r\n        raFile.write(buffer);\r\n\t}"},"id":33}],"prefix_id":"T2-30","percentageOfProject":0.08744170553},{"LOC":0,"id":35,"children":[],"prefix_id":"T2-35","percentageOfProject":0.0},{"LOC":16,"id":37,"children":[{"prefix_id":"T2-38","attributes":{"LOC":8,"path":"/src/smallsql/junit/TestExceptions.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":83,"startLine":76,"file":"TestExceptions.java","clone":"{\r\n    \tif(init) return;\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tdropTable( con, \"exceptions\");\r\n\t\tst.execute(\"Create Table exceptions (c varchar(30), i int)\");\r\n\t\tinit = true;\r\n    }"},"id":38},{"prefix_id":"T2-39","attributes":{"LOC":8,"path":"/src/smallsql/junit/TestStatement.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":55,"startLine":48,"file":"TestStatement.java","clone":"{\r\n    \tif(init) return;\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tdropTable( con, \"statement\");\r\n\t\tst.execute(\"Create Table statement (c varchar(30), i counter)\");\r\n\t\tinit = true;\r\n    }"},"id":39}],"prefix_id":"T2-37","percentageOfProject":0.06662225183},{"LOC":12,"id":41,"children":[{"prefix_id":"T2-42","attributes":{"LOC":6,"path":"/src/smallsql/junit/BenchTest.java","percentageOfClass":50.0,"percentageOfProject":0.02498334444,"endLine":214,"startLine":208,"file":"BenchTest.java","clone":"// There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }"},"id":42},{"prefix_id":"T2-43","attributes":{"LOC":6,"path":"/src/smallsql/junit/BenchTest.java","percentageOfClass":50.0,"percentageOfProject":0.02498334444,"endLine":328,"startLine":322,"file":"BenchTest.java","clone":"// There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }"},"id":43}],"prefix_id":"T2-41","percentageOfProject":0.04996668887},{"LOC":12,"id":45,"children":[{"prefix_id":"T2-46","attributes":{"LOC":6,"path":"/src/smallsql/database/MutableNumeric.java","percentageOfClass":50.0,"percentageOfProject":0.02498334444,"endLine":240,"startLine":235,"file":"MutableNumeric.java","clone":"if(num.scale < scale){\r\n\t\t\tnum.setScale(scale);\r\n\t\t}else\r\n\t\tif(num.scale > scale){\r\n\t\t\tsetScale(num.scale);\r\n\t\t}"},"id":46},{"prefix_id":"T2-47","attributes":{"LOC":6,"path":"/src/smallsql/database/MutableNumeric.java","percentageOfClass":50.0,"percentageOfProject":0.02498334444,"endLine":172,"startLine":167,"file":"MutableNumeric.java","clone":"if(num.scale < scale){\r\n\t\t\tnum.setScale(scale);\r\n\t\t}else\r\n\t\tif(num.scale > scale){\r\n\t\t\tsetScale(num.scale);\r\n\t\t}"},"id":47}],"prefix_id":"T2-45","percentageOfProject":0.04996668887},{"LOC":2,"id":49,"children":[{"prefix_id":"T2-50","attributes":{"LOC":1,"path":"/src/smallsql/database/SQLTokenizer.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":164,"startLine":164,"file":"SQLTokenizer.java","clone":"c == '*' && (i+1 < sql.length) && (sql[i+1] == '/')"},"id":50},{"prefix_id":"T2-51","attributes":{"LOC":1,"path":"/src/smallsql/database/SQLTokenizer.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":111,"startLine":111,"file":"SQLTokenizer.java","clone":"c == '-' && (i+1 < sql.length) && (sql[i+1] == '-')"},"id":51}],"prefix_id":"T2-49","percentageOfProject":0.008327781479},{"LOC":0,"id":53,"children":[],"prefix_id":"T2-53","percentageOfProject":0.0},{"LOC":228,"id":55,"children":[{"prefix_id":"T2-56","attributes":{"LOC":114,"path":"/src/smallsql/database/language/Language.java","percentageOfClass":50.0,"percentageOfProject":0.4746835443,"endLine":628,"startLine":494,"file":"Language.java","clone":"private final String[][] SQL_STATES = {\r\n{ CUSTOM_MESSAGE           \t\t  , \"01000\" },\r\n\r\n{ UNSUPPORTED_OPERATION           , \"01000\" },\r\n{ CANT_LOCK_FILE                  , \"01000\" },\r\n\r\n{ DB_EXISTENT                     , \"01000\" },\r\n{ DB_NONEXISTENT                  , \"01000\" },\r\n{ DB_NOT_DIRECTORY                , \"01000\" },\r\n{ DB_NOTCONNECTED                 , \"01000\" },\r\n\r\n{ CONNECTION_CLOSED               , \"01000\" },\r\n\r\n{ VIEW_INSERT                     , \"01000\" },\r\n{ VIEWDROP_NOT_VIEW               , \"01000\" },\r\n{ VIEW_CANTDROP                   , \"01000\" },\r\n\r\n{ RSET_NOT_PRODUCED               , \"01000\" },\r\n{ RSET_READONLY                   , \"01000\" },\r\n{ RSET_FWDONLY                    , \"01000\" },\r\n{ RSET_CLOSED                     , \"01000\" },\r\n{ RSET_NOT_INSERT_ROW             , \"01000\" },\r\n{ RSET_ON_INSERT_ROW              , \"01000\" },\r\n{ ROWSOURCE_READONLY              , \"01000\" },\r\n{ STMT_IS_CLOSED                  , \"HY010\" },\r\n\r\n{ SUBQUERY_COL_COUNT              , \"01000\" },\r\n{ JOIN_DELETE                     , \"01000\" },\r\n{ JOIN_INSERT                     , \"01000\" },\r\n{ DELETE_WO_FROM                  , \"01000\" },\r\n{ INSERT_WO_FROM                  , \"01000\" },\r\n\r\n{ TABLE_CANT_RENAME               , \"01000\" },\r\n{ TABLE_CANT_DROP                 , \"01000\" },\r\n{ TABLE_CANT_DROP_LOCKED          , \"01000\" },\r\n{ TABLE_CORRUPT_PAGE              , \"01000\" },\r\n{ TABLE_MODIFIED                  , \"01000\" },\r\n{ TABLE_DEADLOCK                  , \"01000\" },\r\n{ TABLE_OR_VIEW_MISSING           , \"01000\" },\r\n{ TABLE_FILE_INVALID              , \"01000\" },\r\n{ TABLE_OR_VIEW_FILE_INVALID      , \"01000\" },\r\n{ TABLE_EXISTENT                  , \"01000\" },\r\n\r\n{ FK_NOT_TABLE                    , \"01000\" },\r\n{ PK_ONLYONE                      , \"01000\" },\r\n{ KEY_DUPLICATE                   , \"01000\" },\r\n\r\n{ MONTH_TOOLARGE                  , \"01000\" },\r\n{ DAYS_TOOLARGE                   , \"01000\" },\r\n{ HOURS_TOOLARGE                  , \"01000\" },\r\n{ MINUTES_TOOLARGE                , \"01000\" },\r\n{ SECS_TOOLARGE                   , \"01000\" },\r\n{ MILLIS_TOOLARGE                 , \"01000\" },\r\n{ DATETIME_INVALID                , \"01000\" },\r\n\r\n{ UNSUPPORTED_CONVERSION_OPER     , \"01000\" },\r\n{ UNSUPPORTED_DATATYPE_OPER       , \"01000\" },\r\n{ UNSUPPORTED_DATATYPE_FUNC       , \"01000\" },\r\n{ UNSUPPORTED_CONVERSION_FUNC     , \"01000\" },\r\n{ UNSUPPORTED_TYPE_CONV           , \"01000\" },\r\n{ UNSUPPORTED_TYPE_SUM            , \"01000\" },\r\n{ UNSUPPORTED_TYPE_MAX            , \"01000\" },\r\n{ UNSUPPORTED_CONVERSION          , \"01000\" },\r\n{ INSERT_INVALID_LEN              , \"01000\" },\r\n{ SUBSTR_INVALID_LEN              , \"01000\" },\r\n\r\n{ VALUE_STR_TOOLARGE              , \"01000\" },\r\n{ VALUE_BIN_TOOLARGE              , \"01000\" },\r\n{ VALUE_NULL_INVALID              , \"01000\" },\r\n{ VALUE_CANT_CONVERT              , \"01000\" },\r\n\r\n{ BYTEARR_INVALID_SIZE            , \"01000\" },\r\n{ LOB_DELETED                     , \"01000\" },\r\n\r\n{ PARAM_CLASS_UNKNOWN             , \"01000\" },\r\n{ PARAM_EMPTY                     , \"01000\" },\r\n{ PARAM_IDX_OUT_RANGE             , \"01000\" },\r\n\r\n{ COL_DUPLICATE                \t  , \"01000\" },\r\n{ COL_MISSING                     , \"01000\" },\r\n{ COL_VAL_UNMATCH                 , \"01000\" },\r\n{ COL_INVALID_SIZE                , \"01000\" },\r\n{ COL_WRONG_PREFIX                , \"01000\" },\r\n{ COL_READONLY                    , \"01000\" },\r\n{ COL_INVALID_NAME                , \"01000\" },\r\n{ COL_IDX_OUT_RANGE               , \"01000\" },\r\n{ COL_AMBIGUOUS                   , \"01000\" },\r\n\r\n{ GROUP_AGGR_INVALID              , \"01000\" },\r\n{ GROUP_AGGR_NOTPART              , \"01000\" },\r\n{ ORDERBY_INTERNAL                , \"01000\" },\r\n{ UNION_DIFFERENT_COLS            , \"01000\" },\r\n\r\n{ INDEX_EXISTS                    , \"01000\" },\r\n{ INDEX_MISSING                   , \"01000\" },\r\n{ INDEX_FILE_INVALID              , \"01000\" },\r\n{ INDEX_CORRUPT                   , \"01000\" },\r\n{ INDEX_TOOMANY_EQUALS            , \"01000\" },\r\n\r\n{ FILE_TOONEW                     , \"01000\" },\r\n{ FILE_TOOOLD                     , \"01000\" },\r\n{ FILE_CANT_DELETE                , \"01000\" },\r\n\r\n{ ROW_0_ABSOLUTE                  , \"01000\" },\r\n{ ROW_NOCURRENT                   , \"01000\" },\r\n{ ROWS_WRONG_MAX                  , \"01000\" },\r\n{ ROW_LOCKED                      , \"01000\" },\r\n{ ROW_DELETED                     , \"01000\" },\r\n\r\n{ SAVEPT_INVALID_TRANS            , \"01000\" },\r\n{ SAVEPT_INVALID_DRIVER           , \"01000\" },\r\n\r\n{ ALIAS_UNSUPPORTED               , \"01000\" },\r\n{ ISOLATION_UNKNOWN               , \"01000\" },\r\n{ FLAGVALUE_INVALID               , \"01000\" },\r\n{ ARGUMENT_INVALID                , \"01000\" },\r\n{ GENER_KEYS_UNREQUIRED           , \"01000\" },\r\n{ SEQUENCE_HEX_INVALID            , \"01000\" },\r\n{ SEQUENCE_HEX_INVALID_STR        , \"01000\" },\r\n\r\n{ SYNTAX_BASE_OFS            \t  , \"01000\" },\r\n{ SYNTAX_BASE_END        \t\t  , \"01000\" },\r\n{ STXADD_ADDITIONAL_TOK\t\t\t  , \"01000\" },\r\n{ STXADD_IDENT_EXPECT\t\t\t  , \"01000\" },\r\n{ STXADD_IDENT_EMPTY \t\t\t  , \"01000\" },\r\n{ STXADD_IDENT_WRONG \t\t\t  , \"01000\" },\r\n{ STXADD_OPER_MINUS \t\t\t  , \"01000\" },\r\n{ STXADD_FUNC_UNKNOWN \t\t\t  , \"01000\" },\r\n{ STXADD_PARAM_INVALID_COUNT\t  , \"01000\" },\r\n{ STXADD_JOIN_INVALID\t  \t\t  , \"01000\" },\r\n{ STXADD_FROM_PAR_CLOSE\t  \t\t  , \"01000\" },\r\n{ STXADD_KEYS_REQUIRED\t  \t\t  , \"01000\" },\r\n{ STXADD_NOT_NUMBER\t  \t\t      , \"01000\" },\r\n{ STXADD_COMMENT_OPEN\t\t\t  , \"01000\" },\r\n\t};"},"id":56},{"prefix_id":"T2-57","attributes":{"LOC":114,"path":"/src/smallsql/database/language/Language.java","percentageOfClass":50.0,"percentageOfProject":0.4746835443,"endLine":488,"startLine":354,"file":"Language.java","clone":"private final String[][] MESSAGES = {\r\n{ CUSTOM_MESSAGE           \t\t  , \"{0}\" },\r\n\r\n{ UNSUPPORTED_OPERATION           , \"Unsupported Operation {0}.\" },\r\n{ CANT_LOCK_FILE                  , \"Can''t lock file ''{0}''. A single SmallSQL Database can only be opened from a single process.\" },\r\n\r\n{ DB_EXISTENT                     , \"Database ''{0}'' already exists.\" },\r\n{ DB_NONEXISTENT                  , \"Database ''{0}'' does not exist.\" },\r\n{ DB_NOT_DIRECTORY                , \"Directory ''{0}'' is not a SmallSQL database.\" },\r\n{ DB_NOTCONNECTED                 , \"You are not connected with a Database.\" },\r\n\r\n{ CONNECTION_CLOSED               , \"Connection is already closed.\" },\r\n\r\n{ VIEW_INSERT                     , \"INSERT is not supported for a view.\" },\r\n{ VIEWDROP_NOT_VIEW               , \"Cannot use DROP VIEW with ''{0}'' because it does not is a view.\" },\r\n{ VIEW_CANTDROP                   , \"View ''{0}'' can''t be dropped.\" },\r\n\r\n{ RSET_NOT_PRODUCED               , \"No ResultSet was produced.\" },\r\n{ RSET_READONLY                   , \"ResultSet is read only.\" },\r\n{ RSET_FWDONLY                    , \"ResultSet is forward only.\" },\r\n{ RSET_CLOSED                     , \"ResultSet is closed.\" },\r\n{ RSET_NOT_INSERT_ROW             , \"Cursor is currently not on the insert row.\" },\r\n{ RSET_ON_INSERT_ROW              , \"Cursor is currently on the insert row.\" },\r\n{ ROWSOURCE_READONLY              , \"Rowsource is read only.\" },\r\n{ STMT_IS_CLOSED                  , \"Statement is already closed.\" },\r\n\r\n{ SUBQUERY_COL_COUNT              , \"Count of columns in subquery must be 1 and not {0}.\" },\r\n{ JOIN_DELETE                     , \"The method deleteRow not supported on joins.\" },\r\n{ JOIN_INSERT                     , \"The method insertRow not supported on joins.\" },\r\n{ DELETE_WO_FROM                  , \"The method deleteRow need a FROM expression.\" },\r\n{ INSERT_WO_FROM                  , \"The method insertRow need a FROM expression.\" },\r\n\r\n{ TABLE_CANT_RENAME               , \"Table ''{0}'' can''t be renamed.\" },\r\n{ TABLE_CANT_DROP                 , \"Table ''{0}'' can''t be dropped.\" },\r\n{ TABLE_CANT_DROP_LOCKED          , \"Table ''{0}'' can''t drop because is locked.\" },\r\n{ TABLE_CORRUPT_PAGE              , \"Corrupt table page at position: {0}.\" },\r\n{ TABLE_MODIFIED                  , \"Table ''{0}'' was modified.\" },\r\n{ TABLE_DEADLOCK                  , \"Deadlock, can not create a lock on table ''{0}''.\" },\r\n{ TABLE_OR_VIEW_MISSING           , \"Table or View ''{0}'' does not exist.\" },\r\n{ TABLE_FILE_INVALID              , \"File ''{0}'' does not include a valid SmallSQL Table.\" },\r\n{ TABLE_OR_VIEW_FILE_INVALID      , \"File ''{0}'' is not a valid Table or View store.\" },\r\n{ TABLE_EXISTENT                  , \"Table or View ''{0}'' already exists.\" },\r\n\r\n{ FK_NOT_TABLE                    , \"''{0}'' is not a table.\" },\r\n{ PK_ONLYONE                      , \"A table can have only one primary key.\" },\r\n{ KEY_DUPLICATE                   , \"Duplicate Key.\" },\r\n\r\n{ MONTH_TOOLARGE                  , \"Months are too large in DATE or TIMESTAMP value ''{0}''.\" },\r\n{ DAYS_TOOLARGE                   , \"Days are too large in DATE or TIMESTAMP value ''{0}''.\" },\r\n{ HOURS_TOOLARGE                  , \"Hours are too large in TIME or TIMESTAMP value ''{0}''.\" },\r\n{ MINUTES_TOOLARGE                , \"Minutes are too large in TIME or TIMESTAMP value ''{0}''.\" },\r\n{ SECS_TOOLARGE                   , \"Seconds are too large in TIME or TIMESTAMP value ''{0}''.\" },\r\n{ MILLIS_TOOLARGE                 , \"Milliseconds are too large in TIMESTAMP value ''{0}''.\" },\r\n{ DATETIME_INVALID                , \"''{0}'' is an invalid DATE, TIME or TIMESTAMP.\" },\r\n\r\n{ UNSUPPORTED_CONVERSION_OPER     , \"Unsupported conversion to data type ''{0}'' from data type ''{1}'' for operation ''{2}''.\" },\r\n{ UNSUPPORTED_DATATYPE_OPER       , \"Unsupported data type ''{0}'' for operation ''{1}''.\" },\r\n{ UNSUPPORTED_DATATYPE_FUNC       , \"Unsupported data type ''{0}'' for function ''{1}''.\" },\r\n{ UNSUPPORTED_CONVERSION_FUNC     , \"Unsupported conversion to data type ''{0}'' for function ''{1}''.\" },\r\n{ UNSUPPORTED_TYPE_CONV           , \"Unsupported type for CONVERT function: {0}.\" },\r\n{ UNSUPPORTED_TYPE_SUM            , \"Unsupported data type ''{0}'' for SUM function.\" },\r\n{ UNSUPPORTED_TYPE_MAX            , \"Unsupported data type ''{0}'' for MAX function.\" },\r\n{ UNSUPPORTED_CONVERSION          , \"Can''t convert ''{0}'' [{1}] to ''{2}''.\" },\r\n{ INSERT_INVALID_LEN              , \"Invalid length ''{0}'' in function INSERT.\" },\r\n{ SUBSTR_INVALID_LEN              , \"Invalid length ''{0}'' in function SUBSTRING.\" },\r\n\r\n{ VALUE_STR_TOOLARGE              , \"String value too large for column.\" },\r\n{ VALUE_BIN_TOOLARGE              , \"Binary value with length {0} to large for column with size {1}.\" },\r\n{ VALUE_NULL_INVALID              , \"Null values are not valid for column ''{0}''.\" },\r\n{ VALUE_CANT_CONVERT              , \"Cannot convert a {0} value to a {1} value.\" },\r\n\r\n{ BYTEARR_INVALID_SIZE            , \"Invalid byte array size {0} for UNIQUEIDENFIER.\" },\r\n{ LOB_DELETED                     , \"Lob Object was deleted.\" },\r\n\r\n{ PARAM_CLASS_UNKNOWN             , \"Unknown parameter class: ''{0}''.\" },\r\n{ PARAM_EMPTY                     , \"Parameter {0} is empty.\" },\r\n{ PARAM_IDX_OUT_RANGE             , \"Parameter index {0} out of range. The value must be between 1 and {1}.\" },\r\n\r\n{ COL_DUPLICATE                \t  , \"There is a duplicated column name: ''{0}''.\" },\r\n{ COL_MISSING                     , \"Column ''{0}'' not found.\" },\r\n{ COL_VAL_UNMATCH                 , \"Columns and Values count is not identical.\" },\r\n{ COL_INVALID_SIZE                , \"Invalid column size {0} for column ''{1}''.\" },\r\n{ COL_WRONG_PREFIX                , \"The column prefix ''{0}'' does not match with a table name or alias name used in this query.\" },\r\n{ COL_READONLY                    , \"Column {0} is read only.\" },\r\n{ COL_INVALID_NAME                , \"Invalid column name ''{0}''.\" },\r\n{ COL_IDX_OUT_RANGE               , \"Column index out of range: {0}.\" },\r\n{ COL_AMBIGUOUS                   , \"Column ''{0}'' is ambiguous.\" },\r\n\r\n{ GROUP_AGGR_INVALID              , \"Aggregate function are not valid in the GROUP BY clause ({0}).\" },\r\n{ GROUP_AGGR_NOTPART              , \"Expression ''{0}'' is not part of a aggregate function or GROUP BY clause.\" },\r\n{ ORDERBY_INTERNAL                , \"Internal Error with ORDER BY.\" },\r\n{ UNION_DIFFERENT_COLS            , \"Different SELECT of the UNION have different column count: {0} and {1}.\" },\r\n\r\n{ INDEX_EXISTS                    , \"Index ''{0}'' already exists.\" },\r\n{ INDEX_MISSING                   , \"Index ''{0}'' does not exist.\" },\r\n{ INDEX_FILE_INVALID              , \"File ''{0}'' is not a valid Index store.\" },\r\n{ INDEX_CORRUPT                   , \"Error in loading Index. Index file is corrupt. ({0}).\" },\r\n{ INDEX_TOOMANY_EQUALS            , \"Too many equals entry in Index.\" },\r\n\r\n{ FILE_TOONEW                     , \"File version ({0}) of file ''{1}'' is too new for this runtime.\" },\r\n{ FILE_TOOOLD                     , \"File version ({0}) of file ''{1}'' is too old for this runtime.\" },\r\n{ FILE_CANT_DELETE                , \"File ''{0}'' can't be deleted.\" },\r\n\r\n{ ROW_0_ABSOLUTE                  , \"Row 0 is invalid for method absolute().\" },\r\n{ ROW_NOCURRENT                   , \"No current row.\" },\r\n{ ROWS_WRONG_MAX                  , \"Wrong max rows value: {0}.\" },\r\n{ ROW_LOCKED                      , \"Row is locked from another Connection.\" },\r\n{ ROW_DELETED                     , \"Row already deleted.\" },\r\n\r\n{ SAVEPT_INVALID_TRANS            , \"Savepoint is not valid for this transaction.\" },\r\n{ SAVEPT_INVALID_DRIVER           , \"Savepoint is not valid for this driver {0}.\" },\r\n\r\n{ ALIAS_UNSUPPORTED               , \"Alias not supported for this type of row source.\" },\r\n{ ISOLATION_UNKNOWN               , \"Unknown Transaction Isolation Level: {0}.\" },\r\n{ FLAGVALUE_INVALID               , \"Invalid flag value in method getMoreResults: {0}.\" },\r\n{ ARGUMENT_INVALID                , \"Invalid argument in method setNeedGenratedKeys: {0}.\" },\r\n{ GENER_KEYS_UNREQUIRED           , \"GeneratedKeys not requested.\" },\r\n{ SEQUENCE_HEX_INVALID            , \"Invalid hex sequence at {0}.\" },\r\n{ SEQUENCE_HEX_INVALID_STR        , \"Invalid hex sequence at position {0} in ''{1}''.\" },\r\n\r\n{ SYNTAX_BASE_OFS            \t  , \"Syntax error at offset {0} on ''{1}''. \" },\r\n{ SYNTAX_BASE_END        \t\t  , \"Syntax error, unexpected end of SQL string. \" },\r\n{ STXADD_ADDITIONAL_TOK\t\t\t  , \"Additional token after end of SQL statement.\" },\r\n{ STXADD_IDENT_EXPECT\t\t\t  , \"Identifier expected.\" },\r\n{ STXADD_IDENT_EMPTY \t\t\t  , \"Empty Identifier.\" },\r\n{ STXADD_IDENT_WRONG \t\t\t  , \"Wrong Identifier ''{0}''.\" },\r\n{ STXADD_OPER_MINUS \t\t\t  , \"Invalid operator minus for data type VARBINARY.\" },\r\n{ STXADD_FUNC_UNKNOWN \t\t\t  , \"Unknown function.\" },\r\n{ STXADD_PARAM_INVALID_COUNT\t  , \"Invalid parameter count.\" },\r\n{ STXADD_JOIN_INVALID\t  \t\t  , \"Invalid Join Syntax.\" },\r\n{ STXADD_FROM_PAR_CLOSE\t  \t\t  , \"Unexpected closing parenthesis in FROM clause.\" },\r\n{ STXADD_KEYS_REQUIRED\t  \t\t  , \"Required keywords are: \" },\r\n{ STXADD_NOT_NUMBER\t  \t\t      , \"Number value required (passed = ''{0}'').\" },\r\n{ STXADD_COMMENT_OPEN\t\t\t  , \"Missing end comment mark (''*/'').\" },\r\n\t};"},"id":57}],"prefix_id":"T2-55","percentageOfProject":0.9493670886},{"LOC":226,"id":59,"children":[{"prefix_id":"T2-60","attributes":{"LOC":113,"path":"/src/smallsql/database/language/Language_de.java","percentageOfClass":50.0,"percentageOfProject":0.4705196536,"endLine":183,"startLine":51,"file":"Language_de.java","clone":"private final String[][] ENTRIES = {\r\n            { UNSUPPORTED_OPERATION           , \"Nicht unterstützte Funktion: {0}\" },\r\n            { CANT_LOCK_FILE                  , \"Die Datei ''{0}'' kann nicht gelockt werden. Eine einzelne SmallSQL Datenbank kann nur für einen einzigen Prozess geöffnet werden.\" },\r\n\r\n            { DB_EXISTENT                     , \"Die Datenbank ''{0}'' existiert bereits.\" },\r\n            { DB_NONEXISTENT                  , \"Die Datenbank ''{0}'' existiert nicht.\" },\r\n            { DB_NOT_DIRECTORY                , \"Das Verzeichnis ''{0}'' ist keine SmallSQL Datenbank.\" },\r\n            { DB_NOTCONNECTED                 , \"Sie sind nicht mit einer Datenbank verbunden.\" },\r\n\r\n            { CONNECTION_CLOSED               , \"Die Verbindung ist bereits geschlossen.\" },\r\n\r\n            { VIEW_INSERT                     , \"INSERT wird nicht unterstützt für eine View.\" },\r\n            { VIEWDROP_NOT_VIEW               , \"DROP VIEW kann nicht mit ''{0}'' verwendet werden, weil es keine View ist.\" },\r\n            { VIEW_CANTDROP                   , \"View ''{0}'' kann nicht gelöscht werden.\" },\r\n\r\n            { RSET_NOT_PRODUCED               , \"Es wurde kein ResultSet erzeugt.\" },\r\n            { RSET_READONLY                   , \"Das ResultSet ist schreibgeschützt.\" },\r\n            { RSET_FWDONLY                    , \"Das ResultSet ist forward only.\" },\r\n            { RSET_CLOSED                     , \"Das ResultSet ist geschlossen.\" },\r\n            { RSET_NOT_INSERT_ROW             , \"Der Cursor zeigt aktuell nicht auf die Einfügeposition (insert row).\" },\r\n            { RSET_ON_INSERT_ROW              , \"Der Cursor zeigt aktuell auf die Einfügeposition (insert row).\" },\r\n            { ROWSOURCE_READONLY              , \"Die Rowsource ist schreibgeschützt.\" },\r\n            { STMT_IS_CLOSED                  , \"Das Statement ist bereits geschlossen.\" },\r\n\r\n            { SUBQUERY_COL_COUNT              , \"Die Anzahl der Spalten in der Subquery muss 1 sein und nicht {0}.\" },\r\n            { JOIN_DELETE                     , \"Die Methode deleteRow wird nicht unterstützt für Joins.\" },\r\n            { JOIN_INSERT                     , \"Die Methode insertRow wird nicht unterstützt für Joins.\" },\r\n            { DELETE_WO_FROM                  , \"Die Methode deleteRow benötigt einen FROM Ausdruck.\" },\r\n            { INSERT_WO_FROM                  , \"Die Methode insertRow benötigt einen FROM Ausdruck.\" },\r\n\r\n            { TABLE_CANT_RENAME               , \"Die Tabelle ''{0}'' kann nicht umbenannt werden.\" },\r\n            { TABLE_CANT_DROP                 , \"Die Tabelle ''{0}'' kann nicht gelöscht werden.\" },\r\n            { TABLE_CANT_DROP_LOCKED          , \"Die Tabelle ''{0}'' kann nicht gelöscht werden, weil sie gelockt ist.\" },\r\n            { TABLE_CORRUPT_PAGE              , \"Beschädigte Tabellenseite bei Position: {0}.\" },\r\n            { TABLE_MODIFIED                  , \"Die Tabelle ''{0}'' wurde modifiziert.\" },\r\n            { TABLE_DEADLOCK                  , \"Deadlock, es kann kein Lock erzeugt werden für Tabelle ''{0}''.\" },\r\n            { TABLE_OR_VIEW_MISSING           , \"Tabelle oder View ''{0}'' existiert nicht.\" },\r\n            { TABLE_FILE_INVALID              , \"Die Datei ''{0}'' enthält keine gültige SmallSQL Tabelle.\" },\r\n            { TABLE_OR_VIEW_FILE_INVALID      , \"Die Datei ''{0}'' ist keine gültiger Tabellen oder View Speicher.\" },\r\n            { TABLE_EXISTENT                  , \"Die Tabelle oder View ''{0}'' existiert bereits.\" },\r\n\r\n            { FK_NOT_TABLE                    , \"''{0}'' ist keine Tabelle.\" },\r\n            { PK_ONLYONE                      , \"Eine Tabelle kann nur einen Primärschlüssel haben.\" },\r\n            { KEY_DUPLICATE                   , \"Doppelter Schlüssel.\" },\r\n\r\n            { MONTH_TOOLARGE                  , \"Der Monat ist zu groß im DATE oder TIMESTAMP Wert ''{0}''.\" },\r\n            { DAYS_TOOLARGE                   , \"Die Tage sind zu groß im DATE oder TIMESTAMP Wert ''{0}''.\" },\r\n            { HOURS_TOOLARGE                  , \"Die Stunden sind zu groß im TIME oder TIMESTAMP Wert ''{0}''.\" },\r\n            { MINUTES_TOOLARGE                , \"Die Minuten sind zu groß im TIME oder TIMESTAMP Wert ''{0}''.\" },\r\n            { SECS_TOOLARGE                   , \"Die Sekunden sind zu groß im TIME oder TIMESTAMP Wert ''{0}''.\" },\r\n            { MILLIS_TOOLARGE                 , \"Die Millisekunden sind zu groß im TIMESTAMP Wert ''{0}''.\" },\r\n            { DATETIME_INVALID                , \"''{0}'' ist ein ungültiges DATE, TIME or TIMESTAMP.\" },\r\n\r\n            { UNSUPPORTED_CONVERSION_OPER     , \"Nicht unterstützte Konvertierung zu Datentyp ''{0}'' von Datentyp ''{1}'' für die Operation ''{2}''.\" },\r\n            { UNSUPPORTED_DATATYPE_OPER       , \"Nicht unterstützter Datentyp ''{0}'' für Operation ''{1}''.\" },\r\n            { UNSUPPORTED_DATATYPE_FUNC       , \"Nicht unterstützter Datentyp ''{0}'' für Funktion ''{1}''.\" },\r\n            { UNSUPPORTED_CONVERSION_FUNC     , \"Nicht unterstützte Konvertierung zu Datentyp ''{0}'' für Funktion ''{1}''.\" },\r\n            { UNSUPPORTED_TYPE_CONV           , \"Nicht unterstützter Typ für CONVERT Funktion: {0}.\" },\r\n            { UNSUPPORTED_TYPE_SUM            , \"Nicht unterstützter Datentyp ''{0}'' für SUM Funktion.\" },\r\n            { UNSUPPORTED_TYPE_MAX            , \"Nicht unterstützter Datentyp ''{0}'' für MAX Funktion.\" },\r\n            { UNSUPPORTED_CONVERSION          , \"Kann nicht konvertieren ''{0}'' [{1}] zu ''{2}''.\" },\r\n            { INSERT_INVALID_LEN              , \"Ungültige Länge ''{0}'' in Funktion INSERT.\" },\r\n            { SUBSTR_INVALID_LEN              , \"Ungültige Länge ''{0}'' in Funktion SUBSTRING.\" },\r\n\r\n            { VALUE_STR_TOOLARGE              , \"Der String Wert ist zu groß für die Spalte.\" },\r\n            { VALUE_BIN_TOOLARGE              , \"Ein Binäre Wert mit Länge {0} ist zu groß für eine Spalte mit der Größe {1}.\" },\r\n            { VALUE_NULL_INVALID              , \"Null Werte sind ungültig für die Spalte ''{0}''.\" },\r\n            { VALUE_CANT_CONVERT              , \"Kann nicht konvertieren ein {0} Wert zu einem {1} Wert.\" },\r\n\r\n            { BYTEARR_INVALID_SIZE            , \"Ungültige Bytearray Große {0} für UNIQUEIDENFIER.\" },\r\n            { LOB_DELETED                     , \"Lob Objekt wurde gelöscht.\" },\r\n\r\n            { PARAM_CLASS_UNKNOWN             , \"Unbekante Parameter Klasse: ''{0}''.\" },\r\n            { PARAM_EMPTY                     , \"Parameter {0} ist leer.\" },\r\n            { PARAM_IDX_OUT_RANGE             , \"Parameter Index {0} liegt außerhalb des Gültigkeitsbereiches. Der Wert muss zwischen 1 und {1} liegen.\" },\r\n\r\n            { COL_DUPLICATE                   , \"Es gibt einen doppelten Spaltennamen: ''{0}''.\" },\r\n            { COL_MISSING                     , \"Spalte ''{0}'' wurde nicht gefunden.\" },\r\n            { COL_VAL_UNMATCH                 , \"Die Spaltenanzahl und Werteanzahl ist nicht identisch.\" },\r\n            { COL_INVALID_SIZE                , \"Ungültige Spaltengröße {0} für Spalte ''{1}''.\" },\r\n            { COL_WRONG_PREFIX                , \"Der Spaltenprefix ''{0}'' passt zu keinem Tabellennamen oder Aliasnamen in dieser Abfrage.\" },\r\n            { COL_READONLY                    , \"Die Spalte {0} ist schreibgeschützt.\" },\r\n            { COL_INVALID_NAME                , \"Ungültiger Spaltenname ''{0}''.\" },\r\n            { COL_IDX_OUT_RANGE               , \"Spaltenindex außerhalb des Gültigkeitsbereiches: {0}.\" },\r\n            { COL_AMBIGUOUS                   , \"Die Spalte ''{0}'' ist mehrdeutig.\" },\r\n\r\n            { GROUP_AGGR_INVALID              , \"Aggregatfunktion sind nicht erlaubt im GROUP BY Klausel: ({0}).\" },\r\n            { GROUP_AGGR_NOTPART              , \"Der Ausdruck ''{0}'' ist nicht Teil einer Aggregatfunktion oder GROUP BY Klausel.\" },\r\n            { ORDERBY_INTERNAL                , \"Interner Error mit ORDER BY.\" },\r\n            { UNION_DIFFERENT_COLS            , \"Die SELECT Teile des UNION haben eine unterschiedliche Spaltenanzahl: {0} und {1}.\" },\r\n\r\n            { INDEX_EXISTS                    , \"Index ''{0}'' existiert bereits.\" },\r\n            { INDEX_MISSING                   , \"Index ''{0}'' existiert nicht.\" },\r\n            { INDEX_FILE_INVALID              , \"Die Datei ''{0}'' ist kein gültiger Indexspeicher.\" },\r\n            { INDEX_CORRUPT                   , \"Error beim Laden des Index. Die Index Datei ist beschädigt. ({0}).\" },\r\n            { INDEX_TOOMANY_EQUALS            , \"Zu viele identische Einträge im Index.\" },\r\n\r\n            { FILE_TOONEW                     , \"Dateiversion ({0}) der Datei ''{1}'' ist zu neu für diese Laufzeitbibliothek.\" },\r\n            { FILE_TOOOLD                     , \"Dateiversion ({0}) der Datei ''{1}'' ist zu alt für diese Laufzeitbibliothek.\" },\r\n            { FILE_CANT_DELETE                , \"Datei ''{0}'' kann nicht gelöscht werden.\" },\r\n\r\n            { ROW_0_ABSOLUTE                  , \"Datensatz 0 ist ungültig für die Methode absolute().\" },\r\n            { ROW_NOCURRENT                   , \"Kein aktueller Datensatz.\" },\r\n            { ROWS_WRONG_MAX                  , \"Fehlerhafter Wert für Maximale Datensatzanzahl: {0}.\" },\r\n            { ROW_LOCKED                      , \"Der Datensatz ist gelocked von einer anderen Verbindung.\" },\r\n            { ROW_DELETED                     , \"Der Datensatz ist bereits gelöscht.\" },\r\n\r\n            { SAVEPT_INVALID_TRANS            , \"Der Savepoint ist nicht gültig für die aktuelle Transaction.\" },\r\n            { SAVEPT_INVALID_DRIVER           , \"Der Savepoint ist nicht gültig für diesen Treiber {0}.\" },\r\n\r\n            { ALIAS_UNSUPPORTED               , \"Ein Alias ist nicht erlaubt für diesen Typ von Rowsource.\" },\r\n            { ISOLATION_UNKNOWN               , \"Unbekantes Transaktion Isolation Level: {0}.\" },\r\n            { FLAGVALUE_INVALID               , \"Ungültiger Wert des Flags in Methode getMoreResults: {0}.\" },\r\n            { ARGUMENT_INVALID                , \"Ungültiges Argument in Methode setNeedGenratedKeys: {0}.\" },\r\n            { GENER_KEYS_UNREQUIRED           , \"GeneratedKeys wurden nicht angefordert.\" },\r\n            { SEQUENCE_HEX_INVALID            , \"Ungültige Hexadecimal Sequenze bei Position {0}.\" },\r\n            { SEQUENCE_HEX_INVALID_STR        , \"Ungültige Hexadecimal Sequenze bei Position {0} in ''{1}''.\" },\r\n\r\n            { SYNTAX_BASE_OFS                 , \"Syntax Error bei Position {0} in ''{1}''. \" },\r\n            { SYNTAX_BASE_END                 , \"Syntax Error, unerwartetes Ende des SQL Strings. \" },\r\n            { STXADD_ADDITIONAL_TOK           , \"Zusätzliche Zeichen nach dem Ende des SQL statement.\" },\r\n            { STXADD_IDENT_EXPECT             , \"Bezeichner erwartet.\" },\r\n            { STXADD_IDENT_EMPTY              , \"Leerer Bezeichner.\" },\r\n            { STXADD_IDENT_WRONG              , \"Ungültiger Bezeichner ''{0}''.\" },\r\n            { STXADD_OPER_MINUS               , \"Ungültiger Operator Minus für Datentyp VARBINARY.\" },\r\n            { STXADD_FUNC_UNKNOWN             , \"Unbekannte Funktion.\" },\r\n            { STXADD_PARAM_INVALID_COUNT      , \"Ungültige Paramter Anzahl.\" },\r\n            { STXADD_JOIN_INVALID             , \"Ungültige Join Syntax.\" },\r\n            { STXADD_FROM_PAR_CLOSE           , \"Unerwartet schließende Klammer in FROM Klausel.\" },\r\n            { STXADD_KEYS_REQUIRED            , \"Benötige Schlüsselwörter sind: \" },\r\n            { STXADD_NOT_NUMBER               , \"Eine Zahl ist erforderlich: ''{0}''.\" },\r\n            { STXADD_COMMENT_OPEN             , \"Fehlendes Kommentarende ''*/''.\" },\r\n    };"},"id":60},{"prefix_id":"T2-61","attributes":{"LOC":113,"path":"/src/smallsql/database/language/Language_it.java","percentageOfClass":50.0,"percentageOfProject":0.4705196536,"endLine":184,"startLine":51,"file":"Language_it.java","clone":"private final String[][] ENTRIES = {\r\n{ UNSUPPORTED_OPERATION           , \"Operazione non supportata: {0}.\" },\r\n{ CANT_LOCK_FILE                  , \"Impossibile bloccare il file ''{0}''. Un database SmallSQL Database può essere aperto da un unico processo.\" },\r\n\r\n{ DB_EXISTENT                     , \"Il database ''{0}'' è già esistente.\" },\r\n{ DB_NONEXISTENT                  , \"Il database ''{0}'' Non esiste.\" },\r\n{ DB_NOT_DIRECTORY                , \"La directory ''{0}'' non è un database SmallSQL.\" },\r\n{ DB_NOTCONNECTED                 , \"L''utente non è connesso a un database.\" },\r\n\r\n{ CONNECTION_CLOSED               , \"La connessione è già chiusa.\" },\r\n\r\n{ VIEW_INSERT                     , \"INSERT non è supportato per una view.\" },\r\n{ VIEWDROP_NOT_VIEW               , \"Non è possibile effettuare DROP VIEW con ''{0}'' perché non è una view.\" },\r\n{ VIEW_CANTDROP                   , \"Non si può effettuare drop sulla view ''{0}''.\" },\r\n\r\n{ RSET_NOT_PRODUCED               , \"Nessun ResultSet è stato prodotto.\" },\r\n{ RSET_READONLY                   , \"Il ResultSet è di sola lettura.\" },\r\n{ RSET_FWDONLY                    , \"Il ResultSet è forward only.\" }, // no real translation\r\n{ RSET_CLOSED                     , \"Il ResultSet è chiuso.\" },\r\n{ RSET_NOT_INSERT_ROW             , \"Il cursore non è attualmente nella riga ''InsertRow''.\" },\r\n{ RSET_ON_INSERT_ROW              , \"Il cursore è attualmente nella riga ''InsertRow''.\" },\r\n{ ROWSOURCE_READONLY              , \"Il Rowsource è di sola lettura.\" },\r\n\r\n{ STMT_IS_CLOSED                  , \"Lo Statement è in stato chiuso.\" },\r\n\r\n{ SUBQUERY_COL_COUNT              , \"Il conteggio delle colonne nella subquery deve essere 1 e non {0}.\" },\r\n{ JOIN_DELETE                     , \"DeleteRow non supportato nelle join.\" },\r\n{ JOIN_INSERT                     , \"InsertRow non supportato nelle join.\" },\r\n{ DELETE_WO_FROM                  , \"DeleteRow necessita un''espressione FROM.\" },\r\n{ INSERT_WO_FROM                  , \"InsertRow necessita un''espressione FROM.\" },\r\n\r\n{ TABLE_CANT_RENAME               , \"La tabella ''{0}'' non può essere rinominata.\" },\r\n{ TABLE_CANT_DROP                 , \"Non si può effettuare DROP della tabella ''{0}''.\" },\r\n{ TABLE_CANT_DROP_LOCKED          , \"Non si può effettuare DROP della tabella ''{0}'' perché è in LOCK.\" },\r\n{ TABLE_CORRUPT_PAGE              , \"Pagina della tabella corrotta alla posizione: {0}.\" },\r\n{ TABLE_MODIFIED                  , \"La tabella ''{0}'' è stata modificata.\" },\r\n{ TABLE_DEADLOCK                  , \"Deadlock: non si può mettere un lock sulla tabella ''{0}''.\" },\r\n{ TABLE_OR_VIEW_MISSING           , \"La tabella/view ''{0}'' non esiste.\" },\r\n{ TABLE_FILE_INVALID              , \"Il file ''{0}'' non include una tabella SmallSQL valida.\" },\r\n{ TABLE_OR_VIEW_FILE_INVALID      , \"Il file ''{0}'' non è un contenitore valido di tabella/view.\" },\r\n{ TABLE_EXISTENT                  , \"La tabella/vista ''{0}'' è già esistente.\" },\r\n\r\n{ FK_NOT_TABLE                    , \"''{0}'' non è una tabella.\" },\r\n{ PK_ONLYONE                      , \"Una tabella può avere solo una primary key.\" },\r\n{ KEY_DUPLICATE                   , \"Chiave duplicata.\" },\r\n\r\n{ MONTH_TOOLARGE                  , \"Valore del mese troppo alto del in DATE o TIMESTAMP ''{0}''.\" },\r\n{ DAYS_TOOLARGE                   , \"Valore del giorno troppo altro in DATE o TIMESTAMP ''{0}''.\" },\r\n{ HOURS_TOOLARGE                  , \"Valore delle ore troppo alto in in TIME o TIMESTAMP ''{0}''.\" },\r\n{ MINUTES_TOOLARGE                , \"Valore dei minuti troppo alto in TIME o TIMESTAMP ''{0}''.\" },\r\n{ SECS_TOOLARGE                   , \"Valore dei secondi troppo alto in TIME o TIMESTAMP ''{0}''.\" },\r\n{ MILLIS_TOOLARGE                 , \"VAlore dei millisecondi troppo alto in TIMESTAMP ''{0}''.\" },\r\n{ DATETIME_INVALID                , \"''{0}'' è un DATE, TIME or TIMESTAMP non valido.\" },\r\n\r\n{ UNSUPPORTED_CONVERSION_OPER     , \"Conversione non supportata verso il tipo di dato ''{0}'' dal tipo ''{1}'' per l''operazione ''{2}''.\" },\r\n{ UNSUPPORTED_DATATYPE_OPER       , \"Tipo di dato ''{0}'' non supportato per l''operazione ''{1}''.\" },\r\n{ UNSUPPORTED_DATATYPE_FUNC       , \"Tipo di dato ''{0}'' non supportato per la funzione ''{1}''.\" },\r\n{ UNSUPPORTED_CONVERSION_FUNC     , \"Conversione verso il tipo di dato ''{0}'' non supportato per la funzione ''{1}''.\" },\r\n{ UNSUPPORTED_TYPE_CONV           , \"Tipo non supportato per la funzione CONVERT: {0}.\" },\r\n{ UNSUPPORTED_TYPE_SUM            , \"Tipo non supportato per la funzione SUM: ''{0}''.\" },\r\n{ UNSUPPORTED_TYPE_MAX            , \"Tipo non supportato per la funzione MAX: ''{0}''.\" },\r\n{ UNSUPPORTED_CONVERSION          , \"Non è possible convertire ''{0}'' [{1}] in ''{2}''.\" },\r\n{ INSERT_INVALID_LEN              , \"Lunghezza non valida ''{0}'' per la funzione INSERT.\" },\r\n{ SUBSTR_INVALID_LEN              , \"Lunghezza non valida ''{0}'' per la funzione SUBSTRING.\" },\r\n\r\n{ VALUE_STR_TOOLARGE              , \"Stringa troppo lunga per la colonna.\" },\r\n{ VALUE_BIN_TOOLARGE              , \"Valore binario di lunghezza {0} eccessiva per la colonna di lunghezza {1}.\" },\r\n{ VALUE_NULL_INVALID              , \"Valori nulli non validi per la colonna ''{0}''.\" },\r\n{ VALUE_CANT_CONVERT              , \"Impossible convertire un valore {0} in un valore {1}.\" },\r\n\r\n{ BYTEARR_INVALID_SIZE            , \"Lunghezza non valida per un array di bytes: {0}.\" },\r\n{ LOB_DELETED                     , \"L''oggetto LOB è stato cancellato.\" },\r\n\r\n{ PARAM_CLASS_UNKNOWN             , \"Classe sconosciuta (''{0}'') per il parametro.\" },\r\n{ PARAM_EMPTY                     , \"Il parametro {0} è vuoto.\" },\r\n{ PARAM_IDX_OUT_RANGE             , \"L''indice {0} per il parametro è fuori dall''intervallo consentito ( 1 <= n <= {1} ).\" },\r\n\r\n{ COL_DUPLICATE                \t  , \"Nome di colonna duplicato: ''{0}''.\" },\r\n{ COL_MISSING                     , \"Colonna ''{0}'' non trovata.\" },\r\n{ COL_VAL_UNMATCH                 , \"Il conteggio di colonne e valori non è identico.\" },\r\n{ COL_INVALID_SIZE                , \"Lunghezza non valida ({0}) per la colonna ''{1}''.\" },\r\n{ COL_WRONG_PREFIX                , \"Il prefisso di colonna ''{0}'' non coincide con un alias o nome di tabella usato nella query.\" },\r\n{ COL_READONLY                    , \"La colonna ''{0}'' è di sola lettura.\" },\r\n{ COL_INVALID_NAME                , \"Nome di colonna non valido ''{0}''.\" },\r\n{ COL_IDX_OUT_RANGE               , \"Indice di colonna fuori dall''intervallo valido: {0}.\" },\r\n{ COL_AMBIGUOUS                   , \"Il nome di colonna ''{0}'' è ambiguo.\" },\r\n\r\n{ GROUP_AGGR_INVALID              , \"Funzione di aggregrazione non valida per la clausola GROUP BY: ({0}).\" },\r\n{ GROUP_AGGR_NOTPART              , \"L''espressione ''{0}'' non è parte di una funzione di aggregazione o della clausola GROUP BY.\" },\r\n{ ORDERBY_INTERNAL                , \"Errore interno per ORDER BY.\" },\r\n{ UNION_DIFFERENT_COLS            , \"SELECT appartenenti ad una UNION con numero di colonne differenti: {0} e {1}.\" },\r\n\r\n{ INDEX_EXISTS                    , \"L''indice ''{0}'' è già esistente.\" },\r\n{ INDEX_MISSING                   , \"L''indice ''{0}'' non esiste.\" },\r\n{ INDEX_FILE_INVALID              , \"Il file ''{0}'' non è un contenitore valido per un indice.\" },\r\n{ INDEX_CORRUPT                   , \"Errore durante il caricamento dell''indice. File dell''indice corrotto: ''{0}''.\" },\r\n{ INDEX_TOOMANY_EQUALS            , \"Troppe voci uguali nell''indice.\" },\r\n\r\n{ FILE_TOONEW                     , \"La versione ({0}) del file ''{1}'' è troppo recente per questo runtime.\" },\r\n{ FILE_TOOOLD                     , \"La versione ({0}) del file ''{1}'' è troppo vecchia per questo runtime.\" },\r\n{ FILE_CANT_DELETE                , \"File ''(0)'' non possono essere eliminati.\" },\r\n\r\n{ ROW_0_ABSOLUTE                  , \"Il numero di riga 0 non è valido per il metodo ''absolute()''.\" },\r\n{ ROW_NOCURRENT                   , \"Nessuna riga corrente.\" },\r\n{ ROWS_WRONG_MAX                  , \"Numero massimo di righe non valido ({0}).\" },\r\n{ ROW_LOCKED                      , \"La riga è bloccata da un''altra connessione.\" },\r\n{ ROW_DELETED                     , \"Riga già cancellata.\" },\r\n\r\n{ SAVEPT_INVALID_TRANS            , \"SAVEPOINT non valido per questa transazione.\" },\r\n{ SAVEPT_INVALID_DRIVER           , \"SAVEPOINT non valido per questo driver {0}.\" },\r\n\r\n{ ALIAS_UNSUPPORTED               , \"Alias non supportato per questo tipo di sorgente righe.\" },\r\n{ ISOLATION_UNKNOWN               , \"Livello di Isolamento transazione sconosciuto: {0}.\" },\r\n{ FLAGVALUE_INVALID               , \"Flag non valida nel metodo ''getMoreResults'': {0}.\" },\r\n{ ARGUMENT_INVALID                , \"Argomento non valido nel metodo ''setNeedGenratedKeys'': {0}.\" },\r\n{ GENER_KEYS_UNREQUIRED           , \"GeneratedKeys non richieste.\" },\r\n{ SEQUENCE_HEX_INVALID            , \"Sequenza esadecimale non valido alla posizione {0}.\" },\r\n{ SEQUENCE_HEX_INVALID_STR        , \"Sequence esadecimale non valida alla positione {0} in ''{1}''.\" },\r\n\r\n{ SYNTAX_BASE_OFS            \t  , \"Errore di sintassi alla posizione {0} in ''{1}''. \" },\r\n{ SYNTAX_BASE_END        \t\t  , \"Errore di sintassi, fine inattesa della stringa SQL. \" },\r\n{ STXADD_ADDITIONAL_TOK\t\t\t  , \"Token aggiuntivo dopo la fine dell''istruzione SQL.\" },\r\n{ STXADD_IDENT_EXPECT\t\t\t  , \"Identificatore atteso.\" },\r\n{ STXADD_IDENT_EMPTY \t\t\t  , \"Identificatore vuoto.\" },\r\n{ STXADD_IDENT_WRONG \t\t\t  , \"Identificatore errato ''{0}''.\" },\r\n{ STXADD_OPER_MINUS \t\t\t  , \"Operatore ''meno'' non valido per il tipo di dato varbinary.\" },\r\n{ STXADD_FUNC_UNKNOWN \t\t\t  , \"Funzione sconosciuta.\" },\r\n{ STXADD_PARAM_INVALID_COUNT\t  , \"Totale parametri non valido.\" },\r\n{ STXADD_JOIN_INVALID\t  \t\t  , \"Sintassi della join non valida.\" },\r\n{ STXADD_FROM_PAR_CLOSE\t  \t\t  , \"Parentesi chiusa non attesa nella clausola from.\" },\r\n{ STXADD_KEYS_REQUIRED\t  \t\t  , \"Le parole chiave richieste sono: \" },\r\n{ STXADD_NOT_NUMBER\t  \t\t      , \"Richiesto valore numerico (passato = ''{0}'').\" },\r\n{ STXADD_COMMENT_OPEN\t  \t\t  , \"Chiusura del commento mancante (''*/'').\" },\r\n\t};"},"id":61}],"prefix_id":"T2-59","percentageOfProject":0.9410393071},{"LOC":14,"id":63,"children":[{"prefix_id":"T2-64","attributes":{"LOC":7,"path":"/src/smallsql/database/ExpressionFunctionCase.java","percentageOfClass":50.0,"percentageOfProject":0.02914723518,"endLine":200,"startLine":194,"file":"ExpressionFunctionCase.java","clone":"{\r\n\t\tint precision = 0;\r\n\t\tfor(int i=results.size()-1; i>=0; i--){\r\n\t\t\tprecision = Math.max(precision, results.get(i).getScale());\r\n\t\t}\r\n\t\treturn precision;\r\n\t}"},"id":64},{"prefix_id":"T2-65","attributes":{"LOC":7,"path":"/src/smallsql/database/ExpressionFunctionCase.java","percentageOfClass":50.0,"percentageOfProject":0.02914723518,"endLine":191,"startLine":185,"file":"ExpressionFunctionCase.java","clone":"{\r\n\t\tint precision = 0;\r\n\t\tfor(int i=results.size()-1; i>=0; i--){\r\n\t\t\tprecision = Math.max(precision, results.get(i).getPrecision());\r\n\t\t}\r\n\t\treturn precision;\r\n\t}"},"id":65}],"prefix_id":"T2-63","percentageOfProject":0.05829447035},{"LOC":20,"id":67,"children":[{"prefix_id":"T2-68","attributes":{"LOC":10,"path":"/src/smallsql/junit/TestExceptionMethods.java","percentageOfClass":50.0,"percentageOfProject":0.0416389074,"endLine":176,"startLine":167,"file":"TestExceptionMethods.java","clone":"{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"ALTER TABLE DuplicatedColumn Add Col INT\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }"},"id":68},{"prefix_id":"T2-69","attributes":{"LOC":10,"path":"/src/smallsql/junit/TestExceptionMethods.java","percentageOfClass":50.0,"percentageOfProject":0.0416389074,"endLine":193,"startLine":184,"file":"TestExceptionMethods.java","clone":"{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }"},"id":69}],"prefix_id":"T2-67","percentageOfProject":0.08327781479},{"LOC":20,"id":71,"children":[{"prefix_id":"T2-72","attributes":{"LOC":10,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":50.0,"percentageOfProject":0.0416389074,"endLine":211,"startLine":202,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            MutableNumeric obj = getValue(i).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":72},{"prefix_id":"T2-73","attributes":{"LOC":10,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":50.0,"percentageOfProject":0.0416389074,"endLine":328,"startLine":319,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            MutableNumeric obj = getValue(columnIndex).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":73}],"prefix_id":"T2-71","percentageOfProject":0.08327781479},{"LOC":2,"id":75,"children":[{"prefix_id":"T2-76","attributes":{"LOC":1,"path":"/src/smallsql/junit/TestDataTypes.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":110,"startLine":110,"file":"TestDataTypes.java","clone":"values = new Object[]{null,new Integer(123), new Integer(-2123), new Integer(392839283)}"},"id":76},{"prefix_id":"T2-77","attributes":{"LOC":1,"path":"/src/smallsql/junit/TestDataTypes.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":113,"startLine":113,"file":"TestDataTypes.java","clone":"values = new Object[]{null,new Integer(123), new Integer(-2123), new Integer(32000)}"},"id":77}],"prefix_id":"T2-75","percentageOfProject":0.008327781479},{"LOC":24,"id":79,"children":[{"prefix_id":"T2-80","attributes":{"LOC":12,"path":"/src/smallsql/junit/BenchTest.java","percentageOfClass":50.0,"percentageOfProject":0.04996668887,"endLine":333,"startLine":321,"file":"BenchTest.java","clone":"if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");\r\n                    return;\r\n                }\r\n            }"},"id":80},{"prefix_id":"T2-81","attributes":{"LOC":12,"path":"/src/smallsql/junit/BenchTest.java","percentageOfClass":50.0,"percentageOfProject":0.04996668887,"endLine":219,"startLine":207,"file":"BenchTest.java","clone":"if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\r\n                    return;\r\n                }\r\n            }"},"id":81}],"prefix_id":"T2-79","percentageOfProject":0.09993337775},{"LOC":36,"id":83,"children":[{"prefix_id":"T2-84","attributes":{"LOC":18,"path":"/src/smallsql/junit/TestTransactions.java","percentageOfClass":50.0,"percentageOfProject":0.07495003331,"endLine":424,"startLine":405,"file":"TestTransactions.java","clone":"{\r\n\t\tConnection con1 = AllTests.getConnection();\r\n\t\tConnection con2 = AllTests.createConnection();\r\n\t\ttry{\t\t\r\n\t\t\tcon2.setTransactionIsolation( Connection.TRANSACTION_READ_UNCOMMITTED );\r\n\t\t\tcon1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon1.setAutoCommit(false);\r\n\t\t\tcon1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");\r\n\r\n\t\t\tResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");\r\n\t\t\tassertTrue( rs2.next() );\r\n\t\t\tassertEquals( 1, rs2.getInt(1) );\r\n\t\t}finally{\r\n\t\t    dropTable(con1, \"transactions\");\r\n\t\t\tcon1.setAutoCommit(true);\r\n\t\t\tcon2.close();\r\n\t\t}\r\n\t}"},"id":84},{"prefix_id":"T2-85","attributes":{"LOC":18,"path":"/src/smallsql/junit/TestTransactions.java","percentageOfClass":50.0,"percentageOfProject":0.07495003331,"endLine":446,"startLine":427,"file":"TestTransactions.java","clone":"{\r\n\t\tConnection con1 = AllTests.getConnection();\r\n\t\tConnection con2 = AllTests.createConnection();\r\n\t\ttry{\t\t\r\n\t\t\tcon2.setTransactionIsolation( Connection.TRANSACTION_READ_COMMITTED );\r\n\t\t\tcon1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon1.setAutoCommit(false);\r\n\t\t\tcon1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");\r\n\r\n\t\t\tResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");\r\n\t\t\tassertTrue( rs2.next() );\r\n\t\t\tassertEquals( 0, rs2.getInt(1) );\r\n\t\t}finally{\r\n            dropTable(con1, \"transactions\");\r\n\t\t\tcon1.setAutoCommit(true);\r\n\t\t\tcon2.close();\r\n\t\t}\r\n\t}"},"id":85}],"prefix_id":"T2-83","percentageOfProject":0.1499000666},{"LOC":6,"id":87,"children":[{"prefix_id":"T2-88","attributes":{"LOC":3,"path":"/src/smallsql/database/MemoryStream.java","percentageOfClass":50.0,"percentageOfProject":0.01249167222,"endLine":126,"startLine":124,"file":"MemoryStream.java","clone":"{\r\n\t\treturn ((puffer[ offset++ ] & 0xFF) << 8) | (puffer[ offset++ ] & 0xFF);\r\n\t}"},"id":88},{"prefix_id":"T2-89","attributes":{"LOC":3,"path":"/src/smallsql/database/LongTreeList.java","percentageOfClass":50.0,"percentageOfProject":0.01249167222,"endLine":593,"startLine":591,"file":"LongTreeList.java","clone":"{\r\n\t\treturn ((data[ offset++ ] & 0xFF) << 8) | (data[ offset++ ] & 0xFF);\r\n\t}"},"id":89}],"prefix_id":"T2-87","percentageOfProject":0.02498334444},{"LOC":8,"id":91,"children":[{"prefix_id":"T2-92","attributes":{"LOC":4,"path":"/src/smallsql/database/IndexScrollStatus.java","percentageOfClass":50.0,"percentageOfProject":0.01665556296,"endLine":126,"startLine":123,"file":"IndexScrollStatus.java","clone":"nodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));"},"id":92},{"prefix_id":"T2-93","attributes":{"LOC":4,"path":"/src/smallsql/database/IndexScrollStatus.java","percentageOfClass":50.0,"percentageOfProject":0.01665556296,"endLine":95,"startLine":92,"file":"IndexScrollStatus.java","clone":"nodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));"},"id":93}],"prefix_id":"T2-91","percentageOfProject":0.03331112592},{"LOC":2,"id":95,"children":[{"prefix_id":"T2-96","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":821,"startLine":821,"file":"SSDatabaseMetaData.java","clone":"String[] colNames = {\"PKTABLE_CAT\", \"PKTABLE_SCHEM\", \"PKTABLE_NAME\", \"PKCOLUMN_NAME\", \"FKTABLE_CAT\", \"FKTABLE_SCHEM\", \"FKTABLE_NAME\", \"FKCOLUMN_NAME\", \"KEY_SEQ\", \"UPDATE_RULE\", \"DELETE_RULE\", \"FK_NAME\", \"PK_NAME\", \"DEFERRABILITY\"};"},"id":96},{"prefix_id":"T2-97","attributes":{"LOC":1,"path":"/src/smallsql/junit/TestDBMetaData.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":234,"startLine":234,"file":"TestDBMetaData.java","clone":"String[] colNames = {\"PKTABLE_CAT\", \"PKTABLE_SCHEM\", \"PKTABLE_NAME\", \"PKCOLUMN_NAME\", \"FKTABLE_CAT\", \"FKTABLE_SCHEM\", \"FKTABLE_NAME\", \"FKCOLUMN_NAME\", \"KEY_SEQ\", \"UPDATE_RULE\", \"DELETE_RULE\", \"FK_NAME\", \"PK_NAME\", \"DEFERRABILITY\"};"},"id":97}],"prefix_id":"T2-95","percentageOfProject":0.008327781479},{"LOC":16,"id":99,"children":[{"prefix_id":"T2-100","attributes":{"LOC":8,"path":"/src/smallsql/database/SQLTokenizer.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":877,"startLine":870,"file":"SQLTokenizer.java","clone":"static{\r\n\t\taddKeyWord( \"ISNULL\",      \tIFNULL); //alias for IFNULL, used from MS SQL Server with 2 parameter, from MS Access with 1 parameter\r\n        addKeyWord( \"IFNULL\",       IFNULL);\r\n        addKeyWord( \"USER\",         USER);\r\n        addKeyWord( \"CONVERT\",      CONVERT);\r\n        addKeyWord( \"CAST\",      \tCAST);\r\n\t\taddKeyWord( \"IIF\",      \tIIF);\r\n    }"},"id":100},{"prefix_id":"T2-101","attributes":{"LOC":8,"path":"/src/smallsql/database/SQLTokenizer.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":642,"startLine":635,"file":"SQLTokenizer.java","clone":"static{\r\n        addKeyWord( \"D\",    D);\r\n        addKeyWord( \"T\",    T);\r\n        addKeyWord( \"TS\",   TS);\r\n        addKeyWord( \"FN\",   FN);\r\n        addKeyWord( \"CALL\", CALL);\r\n        addKeyWord( \"OJ\", OJ);\r\n    }"},"id":101}],"prefix_id":"T2-99","percentageOfProject":0.06662225183},{"LOC":14,"id":103,"children":[{"prefix_id":"T2-104","attributes":{"LOC":7,"path":"/src/smallsql/database/language/Language.java","percentageOfClass":50.0,"percentageOfProject":0.02914723518,"endLine":304,"startLine":298,"file":"Language.java","clone":"if (! inserted.add(key)) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Duplicate key: \" + key);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tString value = entries[i][1];\r\n\t\t\t\tmessages.put(key, value);\r\n\t\t\t}"},"id":104},{"prefix_id":"T2-105","attributes":{"LOC":7,"path":"/src/smallsql/database/language/Language.java","percentageOfClass":50.0,"percentageOfProject":0.02914723518,"endLine":330,"startLine":324,"file":"Language.java","clone":"if (! inserted.add(key)) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Duplicate key: \" + key);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tString value = SQL_STATES[i][1];\r\n\t\t\t\tsqlStates.put(key, value);\r\n\t\t\t}"},"id":105}],"prefix_id":"T2-103","percentageOfProject":0.05829447035},{"LOC":16,"id":107,"children":[{"prefix_id":"T2-108","attributes":{"LOC":8,"path":"/src/smallsql/database/IndexScrollStatus.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":128,"startLine":121,"file":"IndexScrollStatus.java","clone":"{\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}"},"id":108},{"prefix_id":"T2-109","attributes":{"LOC":8,"path":"/src/smallsql/database/IndexScrollStatus.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":97,"startLine":90,"file":"IndexScrollStatus.java","clone":"{\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}"},"id":109}],"prefix_id":"T2-107","percentageOfProject":0.06662225183},{"LOC":18,"id":111,"children":[{"prefix_id":"T2-112","attributes":{"LOC":6,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":33.33333333,"percentageOfProject":0.02498334444,"endLine":137,"startLine":132,"file":"TestOrderBy.java","clone":"while(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"c\");\r\n\t\t\tassertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}"},"id":112},{"prefix_id":"T2-113","attributes":{"LOC":6,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":33.33333333,"percentageOfProject":0.02498334444,"endLine":165,"startLine":160,"file":"TestOrderBy.java","clone":"while(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}"},"id":113},{"prefix_id":"T2-114","attributes":{"LOC":6,"path":"/src/smallsql/junit/TestDBMetaData.java","percentageOfClass":33.33333333,"percentageOfProject":0.02498334444,"endLine":169,"startLine":164,"file":"TestDBMetaData.java","clone":"while(rs.next()){\r\n            String type2 = rs.getString(\"TABLE_TYPE\");\r\n            assertTrue( type+\"-\"+type2, type.compareTo(type2)<0);\r\n            type = type2;\r\n            count++;\r\n        }"},"id":114}],"prefix_id":"T2-111","percentageOfProject":0.07495003331},{"LOC":10,"id":116,"children":[{"prefix_id":"T2-117","attributes":{"LOC":5,"path":"/src/smallsql/database/ExpressionFunctionDayOfYear.java","percentageOfClass":50.0,"percentageOfProject":0.0208194537,"endLine":52,"startLine":48,"file":"ExpressionFunctionDayOfYear.java","clone":"{\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.dayofyear+1;\r\n\t}"},"id":117},{"prefix_id":"T2-118","attributes":{"LOC":5,"path":"/src/smallsql/database/ExpressionFunctionMonth.java","percentageOfClass":50.0,"percentageOfProject":0.0208194537,"endLine":52,"startLine":48,"file":"ExpressionFunctionMonth.java","clone":"{\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.month+1;\r\n\t}"},"id":118}],"prefix_id":"T2-116","percentageOfProject":0.0416389074},{"LOC":21,"id":120,"children":[{"prefix_id":"T2-121","attributes":{"LOC":7,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":33.33333333,"percentageOfProject":0.02914723518,"endLine":91,"startLine":85,"file":"SSCallableStatement.java","clone":"try{\r\n            String obj = getValue(i).getString();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":121},{"prefix_id":"T2-122","attributes":{"LOC":7,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":33.33333333,"percentageOfProject":0.02914723518,"endLine":200,"startLine":194,"file":"SSCallableStatement.java","clone":"try{\r\n            Object obj = getValue(i).getObject();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":122},{"prefix_id":"T2-123","attributes":{"LOC":7,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":33.33333333,"percentageOfProject":0.02914723518,"endLine":296,"startLine":290,"file":"SSResultSet.java","clone":"try{\r\n            Object obj = getValue(columnIndex).getApiObject();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":123}],"prefix_id":"T2-120","percentageOfProject":0.08744170553},{"LOC":10,"id":125,"children":[{"prefix_id":"T2-126","attributes":{"LOC":5,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":50.0,"percentageOfProject":0.0208194537,"endLine":435,"startLine":431,"file":"TestOrderBy.java","clone":"{\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}"},"id":126},{"prefix_id":"T2-127","attributes":{"LOC":5,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":50.0,"percentageOfProject":0.0208194537,"endLine":350,"startLine":346,"file":"TestOrderBy.java","clone":"{\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}"},"id":127}],"prefix_id":"T2-125","percentageOfProject":0.0416389074},{"LOC":14,"id":129,"children":[{"prefix_id":"T2-130","attributes":{"LOC":7,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":50.0,"percentageOfProject":0.02914723518,"endLine":166,"startLine":160,"file":"SSResultSet.java","clone":"try{\r\n            byte[] obj = getValue(columnIndex).getBytes();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":130},{"prefix_id":"T2-131","attributes":{"LOC":7,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":50.0,"percentageOfProject":0.02914723518,"endLine":161,"startLine":155,"file":"SSCallableStatement.java","clone":"try{\r\n            byte[] obj = getValue(i).getBytes();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":131}],"prefix_id":"T2-129","percentageOfProject":0.05829447035},{"LOC":20,"id":133,"children":[{"prefix_id":"T2-134","attributes":{"LOC":5,"path":"/src/smallsql/database/ExpressionFunctionYear.java","percentageOfClass":25.0,"percentageOfProject":0.0208194537,"endLine":52,"startLine":48,"file":"ExpressionFunctionYear.java","clone":"{\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.year;\r\n\t}"},"id":134},{"prefix_id":"T2-135","attributes":{"LOC":5,"path":"/src/smallsql/database/ExpressionFunctionMinute.java","percentageOfClass":25.0,"percentageOfProject":0.0208194537,"endLine":52,"startLine":48,"file":"ExpressionFunctionMinute.java","clone":"{\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.minute;\r\n\t}"},"id":135},{"prefix_id":"T2-136","attributes":{"LOC":5,"path":"/src/smallsql/database/ExpressionFunctionDayOfMonth.java","percentageOfClass":25.0,"percentageOfProject":0.0208194537,"endLine":52,"startLine":48,"file":"ExpressionFunctionDayOfMonth.java","clone":"{\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.day;\r\n\t}"},"id":136},{"prefix_id":"T2-137","attributes":{"LOC":5,"path":"/src/smallsql/database/ExpressionFunctionHour.java","percentageOfClass":25.0,"percentageOfProject":0.0208194537,"endLine":52,"startLine":48,"file":"ExpressionFunctionHour.java","clone":"{\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.hour;\r\n\t}"},"id":137}],"prefix_id":"T2-133","percentageOfProject":0.08327781479},{"LOC":24,"id":139,"children":[{"prefix_id":"T2-140","attributes":{"LOC":12,"path":"/src/smallsql/junit/TestExceptionMethods.java","percentageOfClass":50.0,"percentageOfProject":0.04996668887,"endLine":178,"startLine":167,"file":"TestExceptionMethods.java","clone":"try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"ALTER TABLE DuplicatedColumn Add Col INT\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }finally{\r\n            dropTable(con, \"DuplicatedColumn\");\r\n        }"},"id":140},{"prefix_id":"T2-141","attributes":{"LOC":12,"path":"/src/smallsql/junit/TestExceptionMethods.java","percentageOfClass":50.0,"percentageOfProject":0.04996668887,"endLine":195,"startLine":184,"file":"TestExceptionMethods.java","clone":"try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }finally{\r\n            dropTable(con, \"DuplicatedColumn\");\r\n        }"},"id":141}],"prefix_id":"T2-139","percentageOfProject":0.09993337775},{"LOC":10,"id":143,"children":[{"prefix_id":"T2-144","attributes":{"LOC":5,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":50.0,"percentageOfProject":0.0208194537,"endLine":435,"startLine":431,"file":"TestOrderBy.java","clone":"while(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}"},"id":144},{"prefix_id":"T2-145","attributes":{"LOC":5,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":50.0,"percentageOfProject":0.0208194537,"endLine":350,"startLine":346,"file":"TestOrderBy.java","clone":"while(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}"},"id":145}],"prefix_id":"T2-143","percentageOfProject":0.0416389074},{"LOC":10,"id":147,"children":[{"prefix_id":"T2-148","attributes":{"LOC":5,"path":"/src/smallsql/database/SQLTokenizer.java","percentageOfClass":50.0,"percentageOfProject":0.0208194537,"endLine":368,"startLine":363,"file":"SQLTokenizer.java","clone":"{\r\n        // for Error messages\r\n        keywords.put( new Integer(VALUE),       \"<expression>\" );\r\n        keywords.put( new Integer(IDENTIFIER),   \"<identifier>\" );\r\n        keywords.put( new Integer(NUMBERVALUE), \"<number>\" );\r\n    }"},"id":148},{"prefix_id":"T2-149","attributes":{"LOC":5,"path":"/src/smallsql/database/SQLTokenizer.java","percentageOfClass":50.0,"percentageOfProject":0.0208194537,"endLine":399,"startLine":394,"file":"SQLTokenizer.java","clone":"{\r\n\t\t// for error messages\r\n\t\tkeywords.put( new Integer(LESSER_EQU),\t\"<=\" );\r\n\t\tkeywords.put( new Integer(UNEQUALS),   \t\"<>\" );\r\n\t\tkeywords.put( new Integer(GREATER_EQU), \">=\" );\r\n\t}"},"id":149}],"prefix_id":"T2-147","percentageOfProject":0.0416389074},{"LOC":12,"id":151,"children":[{"prefix_id":"T2-152","attributes":{"LOC":4,"path":"/src/smallsql/junit/TestThreads.java","percentageOfClass":33.33333333,"percentageOfProject":0.01665556296,"endLine":63,"startLine":59,"file":"TestThreads.java","clone":"// wait until all threads are finish\r\n        for(int i = 0; i < threadList.size(); i++){\r\n            Thread thread = (Thread)threadList.get(i);\r\n            thread.join(5000);\r\n        }"},"id":152},{"prefix_id":"T2-153","attributes":{"LOC":4,"path":"/src/smallsql/junit/TestThreads.java","percentageOfClass":33.33333333,"percentageOfProject":0.01665556296,"endLine":164,"startLine":160,"file":"TestThreads.java","clone":"// wait until all threads are finish\r\n            for(int i = 0; i < threadList.size(); i++){\r\n                Thread thread = (Thread)threadList.get(i);\r\n                thread.join(5000);\r\n            }"},"id":153},{"prefix_id":"T2-154","attributes":{"LOC":4,"path":"/src/smallsql/junit/TestThreads.java","percentageOfClass":33.33333333,"percentageOfProject":0.01665556296,"endLine":110,"startLine":106,"file":"TestThreads.java","clone":"// wait until all threads are finish\r\n            for(int i = 0; i < threadList.size(); i++){\r\n                Thread thread = (Thread)threadList.get(i);\r\n                thread.join(5000);\r\n            }"},"id":154}],"prefix_id":"T2-151","percentageOfProject":0.04996668887},{"LOC":27,"id":156,"children":[{"prefix_id":"T2-157","attributes":{"LOC":9,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":33.33333333,"percentageOfProject":0.03747501666,"endLine":201,"startLine":193,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            Object obj = getValue(i).getObject();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":157},{"prefix_id":"T2-158","attributes":{"LOC":9,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":33.33333333,"percentageOfProject":0.03747501666,"endLine":297,"startLine":289,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            Object obj = getValue(columnIndex).getApiObject();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":158},{"prefix_id":"T2-159","attributes":{"LOC":9,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":33.33333333,"percentageOfProject":0.03747501666,"endLine":92,"startLine":84,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            String obj = getValue(i).getString();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":159}],"prefix_id":"T2-156","percentageOfProject":0.11242505},{"LOC":16,"id":161,"children":[{"prefix_id":"T2-162","attributes":{"LOC":8,"path":"/src/smallsql/database/Utils.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":212,"startLine":205,"file":"Utils.java","clone":"{\r\n        StringBuffer buf = new StringBuffer(bytes.length << 1);\r\n        for(int i=0; i<bytes.length; i++){\r\n            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n            buf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n        }\r\n        return buf.toString();\r\n    }"},"id":162},{"prefix_id":"T2-163","attributes":{"LOC":8,"path":"/src/smallsql/junit/BasicTestCase.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":109,"startLine":102,"file":"BasicTestCase.java","clone":"{\r\n\t\tStringBuffer buf = new StringBuffer(bytes.length << 1);\r\n\t\tfor(int i=0; i<bytes.length; i++){\r\n\t\t\tbuf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n\t\t\tbuf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n\t\t}\r\n\t\treturn buf.toString();\r\n\t}"},"id":163}],"prefix_id":"T2-161","percentageOfProject":0.06662225183},{"LOC":18,"id":165,"children":[{"prefix_id":"T2-166","attributes":{"LOC":9,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":50.0,"percentageOfProject":0.03747501666,"endLine":167,"startLine":159,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            byte[] obj = getValue(columnIndex).getBytes();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":166},{"prefix_id":"T2-167","attributes":{"LOC":9,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":50.0,"percentageOfProject":0.03747501666,"endLine":162,"startLine":154,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            byte[] obj = getValue(i).getBytes();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":167}],"prefix_id":"T2-165","percentageOfProject":0.07495003331},{"LOC":0,"id":169,"children":[],"prefix_id":"T2-169","percentageOfProject":0.0},{"LOC":4,"id":171,"children":[{"prefix_id":"T2-172","attributes":{"LOC":1,"path":"/src/smallsql/database/SQLParser.java","percentageOfClass":25.0,"percentageOfProject":0.00416389074,"endLine":1988,"startLine":1988,"file":"SQLParser.java","clone":"{ SQLTokenizer.DEFAULT, SQLTokenizer.IDENTITY, SQLTokenizer.NOT, SQLTokenizer.NULL, SQLTokenizer.PRIMARY, SQLTokenizer.UNIQUE, SQLTokenizer.COMMA, SQLTokenizer.PARENTHESIS_R}"},"id":172},{"prefix_id":"T2-173","attributes":{"LOC":1,"path":"/src/smallsql/database/SQLParser.java","percentageOfClass":25.0,"percentageOfProject":0.00416389074,"endLine":1957,"startLine":1957,"file":"SQLParser.java","clone":"{SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW, SQLTokenizer.INDEX, SQLTokenizer.PROCEDURE, SQLTokenizer.UNIQUE, SQLTokenizer.CLUSTERED, SQLTokenizer.NONCLUSTERED}"},"id":173},{"prefix_id":"T2-174","attributes":{"LOC":1,"path":"/src/smallsql/junit/TestDBMetaData.java","percentageOfClass":25.0,"percentageOfProject":0.00416389074,"endLine":264,"startLine":264,"file":"TestDBMetaData.java","clone":"{Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.SMALLINT, Types.SMALLINT}"},"id":174},{"prefix_id":"T2-175","attributes":{"LOC":1,"path":"/src/smallsql/junit/TestDBMetaData.java","percentageOfClass":25.0,"percentageOfProject":0.00416389074,"endLine":94,"startLine":94,"file":"TestDBMetaData.java","clone":"{Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL }"},"id":175}],"prefix_id":"T2-171","percentageOfProject":0.01665556296},{"LOC":10,"id":177,"children":[{"prefix_id":"T2-178","attributes":{"LOC":5,"path":"/src/smallsql/database/ExpressionFunctionTimestampAdd.java","percentageOfClass":50.0,"percentageOfProject":0.0208194537,"endLine":100,"startLine":96,"file":"ExpressionFunctionTimestampAdd.java","clone":"{\r\n\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());\r\n\t\t\t\tdetails2.year += param1.getLong();\r\n\t\t\t\treturn DateTime.calcMillis(details2);\r\n\t\t\t}"},"id":178},{"prefix_id":"T2-179","attributes":{"LOC":5,"path":"/src/smallsql/database/ExpressionFunctionTimestampAdd.java","percentageOfClass":50.0,"percentageOfProject":0.0208194537,"endLine":90,"startLine":86,"file":"ExpressionFunctionTimestampAdd.java","clone":"{\r\n\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());\r\n\t\t\t\tdetails2.month += param1.getLong();\r\n\t\t\t\treturn DateTime.calcMillis(details2);\r\n\t\t\t}"},"id":179}],"prefix_id":"T2-177","percentageOfProject":0.0416389074},{"LOC":36,"id":181,"children":[{"prefix_id":"T2-182","attributes":{"LOC":9,"path":"/src/smallsql/junit/TestFunctions.java","percentageOfClass":25.0,"percentageOfProject":0.03747501666,"endLine":383,"startLine":374,"file":"TestFunctions.java","clone":"{\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }"},"id":182},{"prefix_id":"T2-183","attributes":{"LOC":9,"path":"/src/smallsql/junit/TestOperatoren.java","percentageOfClass":25.0,"percentageOfProject":0.03747501666,"endLine":104,"startLine":95,"file":"TestOperatoren.java","clone":"{\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }"},"id":183},{"prefix_id":"T2-184","attributes":{"LOC":9,"path":"/src/smallsql/junit/TestDataTypes.java","percentageOfClass":25.0,"percentageOfProject":0.03747501666,"endLine":77,"startLine":68,"file":"TestDataTypes.java","clone":"{\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }"},"id":184},{"prefix_id":"T2-185","attributes":{"LOC":9,"path":"/src/smallsql/junit/TestMoneyRounding.java","percentageOfClass":25.0,"percentageOfProject":0.03747501666,"endLine":62,"startLine":53,"file":"TestMoneyRounding.java","clone":"{\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }"},"id":185}],"prefix_id":"T2-181","percentageOfProject":0.1499000666},{"LOC":51,"id":187,"children":[{"prefix_id":"T2-188","attributes":{"LOC":17,"path":"/src/smallsql/junit/TestScrollable.java","percentageOfClass":33.33333333,"percentageOfProject":0.07078614257,"endLine":61,"startLine":43,"file":"TestScrollable.java","clone":"{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n\t\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testLastWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Order By v\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}"},"id":188},{"prefix_id":"T2-189","attributes":{"LOC":17,"path":"/src/smallsql/junit/TestScrollable.java","percentageOfClass":33.33333333,"percentageOfProject":0.07078614257,"endLine":94,"startLine":76,"file":"TestScrollable.java","clone":"{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testNextWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}"},"id":189},{"prefix_id":"T2-190","attributes":{"LOC":17,"path":"/src/smallsql/junit/TestScrollable.java","percentageOfClass":33.33333333,"percentageOfProject":0.07078614257,"endLine":126,"startLine":108,"file":"TestScrollable.java","clone":"{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}"},"id":190}],"prefix_id":"T2-187","percentageOfProject":0.2123584277},{"LOC":24,"id":192,"children":[{"prefix_id":"T2-193","attributes":{"LOC":12,"path":"/src/smallsql/junit/TestGroupBy.java","percentageOfClass":50.0,"percentageOfProject":0.04996668887,"endLine":152,"startLine":141,"file":"TestGroupBy.java","clone":"{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tPreparedStatement pr = con.prepareStatement(\"Select count(*) FROM \" + table1 + \" Group By name Order By name DESC\");\r\n\t\tfor(int i=1; i<=3; i++){\r\n\t\t\tResultSet rs = pr.executeQuery( );\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 1, rs.getInt(1));\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 3, rs.getInt(1));\r\n\t\t}\r\n\t}"},"id":193},{"prefix_id":"T2-194","attributes":{"LOC":12,"path":"/src/smallsql/junit/TestGroupBy.java","percentageOfClass":50.0,"percentageOfProject":0.04996668887,"endLine":179,"startLine":168,"file":"TestGroupBy.java","clone":"{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tPreparedStatement pr = con.prepareStatement(\"Select abs(sum(abs(3-id))+2) FROM \" + table1 + \" Group By name+'a' Order By 'b'+(Name+'a')\");\r\n\t\tfor(int i=1; i<=3; i++){\r\n\t\t\tResultSet rs = pr.executeQuery( );\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 5, rs.getInt(1));\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 4, rs.getInt(1));\r\n\t\t}\r\n\t}"},"id":194}],"prefix_id":"T2-192","percentageOfProject":0.09993337775},{"LOC":0,"id":196,"children":[],"prefix_id":"T2-196","percentageOfProject":0.0},{"LOC":18,"id":198,"children":[{"prefix_id":"T2-199","attributes":{"LOC":9,"path":"/src/smallsql/database/ExpressionArithmetic.java","percentageOfClass":50.0,"percentageOfProject":0.03747501666,"endLine":256,"startLine":248,"file":"ExpressionArithmetic.java","clone":"switch(operation){\r\n            case ADD: return left.getLong() + right.getLong();\r\n            case SUB: return left.getLong() - right.getLong();\r\n            case MUL: return left.getLong() * right.getLong();\r\n            case DIV: return left.getLong() / right.getLong();\r\n            case NEGATIVE:  return          - left.getLong();\r\n            case MOD:\t\treturn left.getLong() % right.getLong();\r\n            case BIT_NOT:   return          ~ right.getInt();\r\n        }"},"id":199},{"prefix_id":"T2-200","attributes":{"LOC":9,"path":"/src/smallsql/database/ExpressionArithmetic.java","percentageOfClass":50.0,"percentageOfProject":0.03747501666,"endLine":214,"startLine":206,"file":"ExpressionArithmetic.java","clone":"switch(operation){\r\n            case ADD:       return left.getInt() + right.getInt();\r\n            case SUB:       return left.getInt() - right.getInt();\r\n            case MUL:       return left.getInt() * right.getInt();\r\n            case DIV:       return left.getInt() / right.getInt();\r\n            case NEGATIVE:  return               - left.getInt();\r\n            case MOD:\t\treturn left.getInt() % right.getInt();\r\n            case BIT_NOT:   return               ~ left.getInt();\r\n        }"},"id":200}],"prefix_id":"T2-198","percentageOfProject":0.07495003331},{"LOC":6,"id":202,"children":[{"prefix_id":"T2-203","attributes":{"LOC":3,"path":"/src/smallsql/junit/TestLanguage.java","percentageOfClass":50.0,"percentageOfProject":0.01249167222,"endLine":221,"startLine":218,"file":"TestLanguage.java","clone":"/* WARNING! skips message 0 (CUSTOM_MESSAGE) */\r\n        for (int j = 1; j < engEntriesArr.length; j++) {\r\n            engEntriesSet.add(engEntriesArr[j][0]);\r\n        }"},"id":203},{"prefix_id":"T2-204","attributes":{"LOC":3,"path":"/src/smallsql/junit/TestLanguage.java","percentageOfClass":50.0,"percentageOfProject":0.01249167222,"endLine":231,"startLine":229,"file":"TestLanguage.java","clone":"for (int j = 0; j < otherEntriesArr.length; j++) {\r\n                otherEntriesSet.add(otherEntriesArr[j][0]);\r\n            }"},"id":204}],"prefix_id":"T2-202","percentageOfProject":0.02498334444},{"LOC":16,"id":206,"children":[{"prefix_id":"T2-207","attributes":{"LOC":8,"path":"/src/smallsql/database/SSStatement.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":276,"startLine":269,"file":"SSStatement.java","clone":"{\r\n                result[i] = EXECUTE_FAILED;\r\n                if(failed == null){\r\n                    failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n                    failed.initCause(ex);\r\n                }\r\n                failed.setNextException(ex);\r\n            }"},"id":207},{"prefix_id":"T2-208","attributes":{"LOC":8,"path":"/src/smallsql/database/SSPreparedStatement.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":254,"startLine":247,"file":"SSPreparedStatement.java","clone":"{\r\n\t\t\t\tresult[b] = EXECUTE_FAILED;\r\n\t\t\t\tif(failed == null){\r\n\t\t\t\t\tfailed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n\t\t\t\t\tfailed.initCause(ex);\r\n\t\t\t\t}\r\n\t\t\t\tfailed.setNextException(ex);\r\n\t\t\t}"},"id":208}],"prefix_id":"T2-206","percentageOfProject":0.06662225183},{"LOC":12,"id":210,"children":[{"prefix_id":"T2-211","attributes":{"LOC":6,"path":"/src/smallsql/database/StoreImpl.java","percentageOfClass":50.0,"percentageOfProject":0.02498334444,"endLine":528,"startLine":523,"file":"StoreImpl.java","clone":"{\r\n        byte[] daten = new byte[length];\r\n        System.arraycopy( page, offset, daten, 0, length);\r\n        offset += length;\r\n        return daten;\r\n    }"},"id":211},{"prefix_id":"T2-212","attributes":{"LOC":6,"path":"/src/smallsql/database/MemoryStream.java","percentageOfClass":50.0,"percentageOfProject":0.02498334444,"endLine":162,"startLine":157,"file":"MemoryStream.java","clone":"{\r\n\t\tbyte[] bytes = new byte[length];\r\n\t\tSystem.arraycopy(puffer, offset, bytes, 0, length);\r\n\t\toffset += length;\r\n\t\treturn bytes;\r\n\t}"},"id":212}],"prefix_id":"T2-210","percentageOfProject":0.04996668887},{"LOC":3,"id":214,"children":[{"prefix_id":"T2-215","attributes":{"LOC":1,"path":"/src/smallsql/database/SQLParser.java","percentageOfClass":33.33333333,"percentageOfProject":0.00416389074,"endLine":1958,"startLine":1958,"file":"SQLParser.java","clone":"private static final int[] COMMANDS_DROP = {SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW, SQLTokenizer.INDEX, SQLTokenizer.PROCEDURE};"},"id":215},{"prefix_id":"T2-216","attributes":{"LOC":1,"path":"/src/smallsql/database/SQLParser.java","percentageOfClass":33.33333333,"percentageOfProject":0.00416389074,"endLine":1977,"startLine":1977,"file":"SQLParser.java","clone":"private static final int[] MISSING_TOKEN_LIST = {SQLTokenizer.COMMA, SQLTokenizer.FROM, SQLTokenizer.GROUP, SQLTokenizer.HAVING, SQLTokenizer.ORDER};"},"id":216},{"prefix_id":"T2-217","attributes":{"LOC":1,"path":"/src/smallsql/database/SQLParser.java","percentageOfClass":33.33333333,"percentageOfProject":0.00416389074,"endLine":1955,"startLine":1955,"file":"SQLParser.java","clone":"private static final int[] COMMANDS_ESCAPE = {SQLTokenizer.D, SQLTokenizer.T, SQLTokenizer.TS, SQLTokenizer.FN, SQLTokenizer.CALL};"},"id":217}],"prefix_id":"T2-214","percentageOfProject":0.01249167222},{"LOC":0,"id":219,"children":[],"prefix_id":"T2-219","percentageOfProject":0.0},{"LOC":2,"id":221,"children":[{"prefix_id":"T2-222","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":838,"startLine":838,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":222},{"prefix_id":"T2-223","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":839,"startLine":839,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":223}],"prefix_id":"T2-221","percentageOfProject":0.008327781479},{"LOC":4,"id":225,"children":[{"prefix_id":"T2-226","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":25.0,"percentageOfProject":0.00416389074,"endLine":854,"startLine":854,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":226},{"prefix_id":"T2-227","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":25.0,"percentageOfProject":0.00416389074,"endLine":842,"startLine":842,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":227},{"prefix_id":"T2-228","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":25.0,"percentageOfProject":0.00416389074,"endLine":843,"startLine":843,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":228},{"prefix_id":"T2-229","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":25.0,"percentageOfProject":0.00416389074,"endLine":853,"startLine":853,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":229}],"prefix_id":"T2-225","percentageOfProject":0.01665556296},{"LOC":2,"id":231,"children":[{"prefix_id":"T2-232","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":861,"startLine":861,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":232},{"prefix_id":"T2-233","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":837,"startLine":837,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":233}],"prefix_id":"T2-231","percentageOfProject":0.008327781479},{"LOC":8,"id":235,"children":[{"prefix_id":"T2-236","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":12.5,"percentageOfProject":0.00416389074,"endLine":862,"startLine":862,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":236},{"prefix_id":"T2-237","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":12.5,"percentageOfProject":0.00416389074,"endLine":856,"startLine":856,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":237},{"prefix_id":"T2-238","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":12.5,"percentageOfProject":0.00416389074,"endLine":840,"startLine":840,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":238},{"prefix_id":"T2-239","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":12.5,"percentageOfProject":0.00416389074,"endLine":841,"startLine":841,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":239},{"prefix_id":"T2-240","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":12.5,"percentageOfProject":0.00416389074,"endLine":833,"startLine":833,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}"},"id":240},{"prefix_id":"T2-241","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":12.5,"percentageOfProject":0.00416389074,"endLine":859,"startLine":859,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":241},{"prefix_id":"T2-242","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":12.5,"percentageOfProject":0.00416389074,"endLine":863,"startLine":863,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":242},{"prefix_id":"T2-243","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":12.5,"percentageOfProject":0.00416389074,"endLine":857,"startLine":857,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}"},"id":243}],"prefix_id":"T2-235","percentageOfProject":0.03331112592},{"LOC":2,"id":245,"children":[{"prefix_id":"T2-246","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":845,"startLine":845,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}"},"id":246},{"prefix_id":"T2-247","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":844,"startLine":844,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}"},"id":247}],"prefix_id":"T2-245","percentageOfProject":0.008327781479},{"LOC":2,"id":249,"children":[{"prefix_id":"T2-250","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":855,"startLine":855,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.BOOLEAN),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BOOLEAN) ),         Utils.getInteger(1),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":250},{"prefix_id":"T2-251","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":834,"startLine":834,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.BIT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIT) ),             Utils.getInteger(1),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":251}],"prefix_id":"T2-249","percentageOfProject":0.008327781479},{"LOC":9,"id":253,"children":[{"prefix_id":"T2-254","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":11.11111111,"percentageOfProject":0.00416389074,"endLine":851,"startLine":851,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.REAL) ),        \t  Utils.getInteger(7),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":254},{"prefix_id":"T2-255","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":11.11111111,"percentageOfProject":0.00416389074,"endLine":847,"startLine":847,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),      Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLMONEY) ),      Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}"},"id":255},{"prefix_id":"T2-256","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":11.11111111,"percentageOfProject":0.00416389074,"endLine":835,"startLine":835,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TINYINT) ),         Utils.getInteger(3),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.TRUE,  Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":256},{"prefix_id":"T2-257","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":11.11111111,"percentageOfProject":0.00416389074,"endLine":849,"startLine":849,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLINT) ),        Utils.getInteger(5),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":257},{"prefix_id":"T2-258","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":11.11111111,"percentageOfProject":0.00416389074,"endLine":846,"startLine":846,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),           Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.MONEY) ),           Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}"},"id":258},{"prefix_id":"T2-259","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":11.11111111,"percentageOfProject":0.00416389074,"endLine":848,"startLine":848,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.INT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.INT) ),             Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":259},{"prefix_id":"T2-260","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":11.11111111,"percentageOfProject":0.00416389074,"endLine":850,"startLine":850,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":260},{"prefix_id":"T2-261","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":11.11111111,"percentageOfProject":0.00416389074,"endLine":836,"startLine":836,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIGINT) ),          Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":261},{"prefix_id":"T2-262","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":11.11111111,"percentageOfProject":0.00416389074,"endLine":852,"startLine":852,"file":"SSDatabaseMetaData.java","clone":"{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"},"id":262}],"prefix_id":"T2-253","percentageOfProject":0.03747501666},{"LOC":10,"id":264,"children":[{"prefix_id":"T2-265","attributes":{"LOC":5,"path":"/src/smallsql/database/ExpressionFunctionConvert.java","percentageOfClass":50.0,"percentageOfProject":0.0208194537,"endLine":157,"startLine":153,"file":"ExpressionFunctionConvert.java","clone":"{\r\n\t\t\t\t\tbyte[] buffer = new byte[length];\r\n\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );\r\n\t\t\t\t\treturn buffer;\r\n\t\t\t\t}"},"id":265},{"prefix_id":"T2-266","attributes":{"LOC":5,"path":"/src/smallsql/database/ExpressionFunctionConvert.java","percentageOfClass":50.0,"percentageOfProject":0.0208194537,"endLine":146,"startLine":142,"file":"ExpressionFunctionConvert.java","clone":"{\r\n\t\t\t\t\tbyte[] buffer = new byte[length];\r\n\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );\r\n\t\t\t\t\treturn buffer;\r\n\t\t\t\t}"},"id":266}],"prefix_id":"T2-264","percentageOfProject":0.0416389074},{"LOC":30,"id":268,"children":[{"prefix_id":"T2-269","attributes":{"LOC":15,"path":"/src/smallsql/database/ExpressionArithmetic.java","percentageOfClass":50.0,"percentageOfProject":0.06245836109,"endLine":600,"startLine":586,"file":"ExpressionArithmetic.java","clone":"switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getLong() == right.getLong();\r\n                        case GREATER:   return left.getLong() >  right.getLong();\r\n                        case GRE_EQU:   return left.getLong() >= right.getLong();\r\n                        case LESSER:    return left.getLong() <  right.getLong();\r\n                        case LES_EQU:   return left.getLong() <= right.getLong();\r\n                        case UNEQUALS:  return left.getLong() != right.getLong();\r\n                        case BETWEEN:\r\n                                        long _left = left.getLong();\r\n                                        return _left >= right.getLong() && right2.getLong() >= _left;\r\n                        default:\r\n                        \treturn getLong() != 0;\r\n                    }"},"id":269},{"prefix_id":"T2-270","attributes":{"LOC":15,"path":"/src/smallsql/database/ExpressionArithmetic.java","percentageOfClass":50.0,"percentageOfProject":0.06245836109,"endLine":650,"startLine":636,"file":"ExpressionArithmetic.java","clone":"switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getMoney() == right.getMoney();\r\n                        case GREATER:   return left.getMoney() >  right.getMoney();\r\n                        case GRE_EQU:   return left.getMoney() >= right.getMoney();\r\n                        case LESSER:    return left.getMoney() <  right.getMoney();\r\n                        case LES_EQU:   return left.getMoney() <= right.getMoney();\r\n                        case UNEQUALS:  return left.getMoney() != right.getMoney();\r\n                        case BETWEEN:\r\n                                        long _left = left.getMoney();\r\n                                        return _left >= right.getMoney() && right2.getMoney() >= _left;\r\n                        default:\r\n                        \treturn getMoney() != 0;\r\n                    }"},"id":270}],"prefix_id":"T2-268","percentageOfProject":0.1249167222},{"LOC":90,"id":272,"children":[{"prefix_id":"T2-273","attributes":{"LOC":9,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":10.0,"percentageOfProject":0.03747501666,"endLine":106,"startLine":98,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getBoolean();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":273},{"prefix_id":"T2-274","attributes":{"LOC":9,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":10.0,"percentageOfProject":0.03747501666,"endLine":148,"startLine":140,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getDouble();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":274},{"prefix_id":"T2-275","attributes":{"LOC":9,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":10.0,"percentageOfProject":0.03747501666,"endLine":143,"startLine":135,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":275},{"prefix_id":"T2-276","attributes":{"LOC":9,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":10.0,"percentageOfProject":0.03747501666,"endLine":121,"startLine":113,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getInt();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":276},{"prefix_id":"T2-277","attributes":{"LOC":9,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":10.0,"percentageOfProject":0.03747501666,"endLine":130,"startLine":122,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":277},{"prefix_id":"T2-278","attributes":{"LOC":9,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":10.0,"percentageOfProject":0.03747501666,"endLine":116,"startLine":108,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getInt();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":278},{"prefix_id":"T2-279","attributes":{"LOC":9,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":10.0,"percentageOfProject":0.03747501666,"endLine":134,"startLine":126,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getFloat();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":279},{"prefix_id":"T2-280","attributes":{"LOC":9,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":10.0,"percentageOfProject":0.03747501666,"endLine":101,"startLine":93,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getBoolean();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":280},{"prefix_id":"T2-281","attributes":{"LOC":9,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":10.0,"percentageOfProject":0.03747501666,"endLine":139,"startLine":131,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getFloat();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":281},{"prefix_id":"T2-282","attributes":{"LOC":9,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":10.0,"percentageOfProject":0.03747501666,"endLine":125,"startLine":117,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":282}],"prefix_id":"T2-272","percentageOfProject":0.3747501666},{"LOC":2,"id":284,"children":[{"prefix_id":"T2-285","attributes":{"LOC":1,"path":"/src/smallsql/junit/TestDataTypes.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":113,"startLine":113,"file":"TestDataTypes.java","clone":"values = new Object[]{null,new Integer(123), new Integer(-2123), new Integer(32000)};"},"id":285},{"prefix_id":"T2-286","attributes":{"LOC":1,"path":"/src/smallsql/junit/TestDataTypes.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":110,"startLine":110,"file":"TestDataTypes.java","clone":"values = new Object[]{null,new Integer(123), new Integer(-2123), new Integer(392839283)};"},"id":286}],"prefix_id":"T2-284","percentageOfProject":0.008327781479},{"LOC":30,"id":288,"children":[{"prefix_id":"T2-289","attributes":{"LOC":15,"path":"/src/smallsql/junit/TestExceptionMethods.java","percentageOfClass":50.0,"percentageOfProject":0.06245836109,"endLine":179,"startLine":165,"file":"TestExceptionMethods.java","clone":"{\r\n        Connection con = AllTests.getConnection();\r\n        try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"ALTER TABLE DuplicatedColumn Add Col INT\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }finally{\r\n            dropTable(con, \"DuplicatedColumn\");\r\n        }\r\n    }"},"id":289},{"prefix_id":"T2-290","attributes":{"LOC":15,"path":"/src/smallsql/junit/TestExceptionMethods.java","percentageOfClass":50.0,"percentageOfProject":0.06245836109,"endLine":196,"startLine":182,"file":"TestExceptionMethods.java","clone":"{\r\n        Connection con = AllTests.getConnection();\r\n        try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }finally{\r\n            dropTable(con, \"DuplicatedColumn\");\r\n        }\r\n    }"},"id":290}],"prefix_id":"T2-288","percentageOfProject":0.1249167222},{"LOC":16,"id":292,"children":[{"prefix_id":"T2-293","attributes":{"LOC":8,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":210,"startLine":203,"file":"SSCallableStatement.java","clone":"try{\r\n            MutableNumeric obj = getValue(i).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":293},{"prefix_id":"T2-294","attributes":{"LOC":8,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":327,"startLine":320,"file":"SSResultSet.java","clone":"try{\r\n            MutableNumeric obj = getValue(columnIndex).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":294}],"prefix_id":"T2-292","percentageOfProject":0.06662225183},{"LOC":8,"id":296,"children":[{"prefix_id":"T2-297","attributes":{"LOC":4,"path":"/src/smallsql/database/SSStatement.java","percentageOfClass":50.0,"percentageOfProject":0.01665556296,"endLine":274,"startLine":271,"file":"SSStatement.java","clone":"if(failed == null){\r\n                    failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n                    failed.initCause(ex);\r\n                }"},"id":297},{"prefix_id":"T2-298","attributes":{"LOC":4,"path":"/src/smallsql/database/SSPreparedStatement.java","percentageOfClass":50.0,"percentageOfProject":0.01665556296,"endLine":252,"startLine":249,"file":"SSPreparedStatement.java","clone":"if(failed == null){\r\n\t\t\t\t\tfailed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n\t\t\t\t\tfailed.initCause(ex);\r\n\t\t\t\t}"},"id":298}],"prefix_id":"T2-296","percentageOfProject":0.03331112592},{"LOC":30,"id":300,"children":[{"prefix_id":"T2-301","attributes":{"LOC":10,"path":"/src/smallsql/junit/TestAlterTable2.java","percentageOfClass":33.33333333,"percentageOfProject":0.0416389074,"endLine":38,"startLine":29,"file":"TestAlterTable2.java","clone":"{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"create table \"+table+\" (keyField varchar(2) primary key)\");\r\n        st.execute(\"alter table \"+table+\" add anotherField varchar(4)\");\r\n        ResultSet rs = st.executeQuery(\"Select * From \" + table);\r\n        assertRSMetaData( rs, new String[]{\"keyField\", \"anotherField\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\r\n        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );\r\n        assertRowCount( 1, rs );\r\n    }"},"id":301},{"prefix_id":"T2-302","attributes":{"LOC":10,"path":"/src/smallsql/junit/TestAlterTable2.java","percentageOfClass":33.33333333,"percentageOfProject":0.0416389074,"endLine":50,"startLine":41,"file":"TestAlterTable2.java","clone":"{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"create table \"+table+\" (a varchar(2))\");\r\n        st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");\r\n        ResultSet rs = st.executeQuery(\"Select * From \" + table);\r\n        assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\r\n        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );\r\n        assertRowCount( 1, rs );\r\n    }"},"id":302},{"prefix_id":"T2-303","attributes":{"LOC":10,"path":"/src/smallsql/junit/TestAlterTable2.java","percentageOfClass":33.33333333,"percentageOfProject":0.0416389074,"endLine":80,"startLine":71,"file":"TestAlterTable2.java","clone":"{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"create table \"+table+\" (a varchar(2) unique)\");\r\n        st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");\r\n        ResultSet rs = st.executeQuery(\"Select * From \" + table);\r\n        assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\r\n        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );\r\n        assertRowCount( 2, rs );\r\n    }"},"id":303}],"prefix_id":"T2-300","percentageOfProject":0.1249167222},{"LOC":16,"id":305,"children":[{"prefix_id":"T2-306","attributes":{"LOC":8,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":157,"startLine":150,"file":"SSResultSet.java","clone":"try{\r\n            MutableNumeric obj = getValue(columnIndex).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal(scale);\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":306},{"prefix_id":"T2-307","attributes":{"LOC":8,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":152,"startLine":145,"file":"SSCallableStatement.java","clone":"try{\r\n            MutableNumeric obj = getValue(i).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal(scale);\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":307}],"prefix_id":"T2-305","percentageOfProject":0.06662225183},{"LOC":46,"id":309,"children":[{"prefix_id":"T2-310","attributes":{"LOC":23,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":50.0,"percentageOfProject":0.09576948701,"endLine":726,"startLine":698,"file":"TestOrderBy.java","clone":"{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n\t\tResultSet rs;\r\n\t\tint count;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");\r\n\t\t\r\n\t\t//jetzt irgendwo in die Mitte scrollen\r\n\t\trs.next();\r\n\t\trs.next();\r\n\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen\r\n\t\t\r\n\t\trs.last();\r\n\t\tcount = 0;\r\n\t\twhile(rs.previous()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\t}"},"id":310},{"prefix_id":"T2-311","attributes":{"LOC":23,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":50.0,"percentageOfProject":0.09576948701,"endLine":757,"startLine":729,"file":"TestOrderBy.java","clone":"{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n\t\tResultSet rs;\r\n\t\tint count;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");\r\n\t\t\r\n\t\t//jetzt irgendwo in die Mitte scrollen\r\n\t\trs.next();\r\n\t\trs.next();\r\n\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen\r\n\t\t\r\n\t\trs.last();\r\n\t\tcount = 0;\r\n\t\twhile(rs.previous()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\t}"},"id":311}],"prefix_id":"T2-309","percentageOfProject":0.191538974},{"LOC":12,"id":313,"children":[{"prefix_id":"T2-314","attributes":{"LOC":6,"path":"/src/smallsql/database/SQLParser.java","percentageOfClass":50.0,"percentageOfProject":0.02498334444,"endLine":1937,"startLine":1932,"file":"SQLParser.java","clone":"try{\r\n            int maxRows = Integer.parseInt(token.getName(sql));\r\n            selCmd.setMaxRows(maxRows);\r\n        }catch(NumberFormatException e){\r\n            throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\r\n        }"},"id":314},{"prefix_id":"T2-315","attributes":{"LOC":6,"path":"/src/smallsql/database/SQLParser.java","percentageOfClass":50.0,"percentageOfProject":0.02498334444,"endLine":357,"startLine":352,"file":"SQLParser.java","clone":"try{\r\n\t\t\t\t\t\tint maxRows = Integer.parseInt(token.getName(sql));\r\n\t\t\t\t\t\tselCmd.setMaxRows(maxRows);\r\n\t\t\t\t\t}catch(NumberFormatException e){\r\n\t\t\t\t\t\tthrow createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\r\n\t\t\t\t\t}"},"id":315}],"prefix_id":"T2-313","percentageOfProject":0.04996668887},{"LOC":12,"id":317,"children":[{"prefix_id":"T2-318","attributes":{"LOC":6,"path":"/src/smallsql/database/Utils.java","percentageOfClass":50.0,"percentageOfProject":0.02498334444,"endLine":322,"startLine":317,"file":"Utils.java","clone":"{\r\n        try{\r\n            return Double.parseDouble( val ) != 0;\r\n        }catch(NumberFormatException e){/*ignore it if it not a number*/}\r\n        return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );\r\n    }"},"id":318},{"prefix_id":"T2-319","attributes":{"LOC":6,"path":"/src/smallsql/junit/BasicTestCase.java","percentageOfClass":50.0,"percentageOfProject":0.02498334444,"endLine":196,"startLine":191,"file":"BasicTestCase.java","clone":"{\r\n        try{\r\n            return Double.parseDouble( val ) != 0;\r\n        }catch(NumberFormatException e){/*ignore it if it not a number*/}\r\n        return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );\r\n    }"},"id":319}],"prefix_id":"T2-317","percentageOfProject":0.04996668887},{"LOC":21,"id":321,"children":[{"prefix_id":"T2-322","attributes":{"LOC":7,"path":"/src/smallsql/database/Table.java","percentageOfClass":33.33333333,"percentageOfProject":0.02914723518,"endLine":364,"startLine":358,"file":"Table.java","clone":"{\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}"},"id":322},{"prefix_id":"T2-323","attributes":{"LOC":7,"path":"/src/smallsql/database/Table.java","percentageOfClass":33.33333333,"percentageOfProject":0.02914723518,"endLine":376,"startLine":370,"file":"Table.java","clone":"{\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}"},"id":323},{"prefix_id":"T2-324","attributes":{"LOC":7,"path":"/src/smallsql/database/Table.java","percentageOfClass":33.33333333,"percentageOfProject":0.02914723518,"endLine":394,"startLine":388,"file":"Table.java","clone":"{\r\n                        Iterator values = locks.values().iterator();\r\n                        while(values.hasNext()){\r\n                            TableStorePage lock = (TableStorePage)values.next();\r\n                            if(lock.con != con) return null;\r\n                        }\r\n                    }"},"id":324}],"prefix_id":"T2-321","percentageOfProject":0.08744170553},{"LOC":0,"id":326,"children":[],"prefix_id":"T2-326","percentageOfProject":0.0},{"LOC":22,"id":328,"children":[{"prefix_id":"T2-329","attributes":{"LOC":11,"path":"/src/smallsql/database/ExpressionFunctionTruncate.java","percentageOfClass":50.0,"percentageOfProject":0.04580279813,"endLine":60,"startLine":50,"file":"ExpressionFunctionTruncate.java","clone":"if(places > 0){\r\n\t\t\tfor(int i=0; i<places; i++){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue *= factor;\r\n\t\t}else{\r\n\t\t\tfor(int i=0; i>places; i--){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue /= factor;\r\n\t\t}"},"id":329},{"prefix_id":"T2-330","attributes":{"LOC":11,"path":"/src/smallsql/database/ExpressionFunctionRound.java","percentageOfClass":50.0,"percentageOfProject":0.04580279813,"endLine":60,"startLine":50,"file":"ExpressionFunctionRound.java","clone":"if(places > 0){\r\n\t\t\tfor(int i=0; i<places; i++){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue *= factor;\r\n\t\t}else{\r\n\t\t\tfor(int i=0; i>places; i--){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue /= factor;\r\n\t\t}"},"id":330}],"prefix_id":"T2-328","percentageOfProject":0.09160559627},{"LOC":12,"id":332,"children":[{"prefix_id":"T2-333","attributes":{"LOC":6,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":50.0,"percentageOfProject":0.02498334444,"endLine":816,"startLine":811,"file":"TestOrderBy.java","clone":"while(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}"},"id":333},{"prefix_id":"T2-334","attributes":{"LOC":6,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":50.0,"percentageOfProject":0.02498334444,"endLine":192,"startLine":187,"file":"TestOrderBy.java","clone":"while(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}"},"id":334}],"prefix_id":"T2-332","percentageOfProject":0.04996668887},{"LOC":8,"id":336,"children":[{"prefix_id":"T2-337","attributes":{"LOC":4,"path":"/src/smallsql/database/SSConnection.java","percentageOfClass":50.0,"percentageOfProject":0.01665556296,"endLine":153,"startLine":150,"file":"SSConnection.java","clone":"for(int i=0; i<count; i++){\r\n\t                TransactionStep page = (TransactionStep)commitPages.get(i);\r\n\t                page.commit();\r\n\t            }"},"id":337},{"prefix_id":"T2-338","attributes":{"LOC":4,"path":"/src/smallsql/database/SSConnection.java","percentageOfClass":50.0,"percentageOfProject":0.01665556296,"endLine":157,"startLine":154,"file":"SSConnection.java","clone":"for(int i=0; i<count; i++){\r\n\t\t\t\t    TransactionStep page = (TransactionStep)commitPages.get(i);\r\n\t\t\t\t\tpage.freeLock();\r\n\t\t\t\t}"},"id":338}],"prefix_id":"T2-336","percentageOfProject":0.03331112592},{"LOC":16,"id":340,"children":[{"prefix_id":"T2-341","attributes":{"LOC":8,"path":"/src/smallsql/database/SSPreparedStatement.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":254,"startLine":247,"file":"SSPreparedStatement.java","clone":"catch (SQLException ex) {\r\n\t\t\t\tresult[b] = EXECUTE_FAILED;\r\n\t\t\t\tif(failed == null){\r\n\t\t\t\t\tfailed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n\t\t\t\t\tfailed.initCause(ex);\r\n\t\t\t\t}\r\n\t\t\t\tfailed.setNextException(ex);\r\n\t\t\t}"},"id":341},{"prefix_id":"T2-342","attributes":{"LOC":8,"path":"/src/smallsql/database/SSStatement.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":276,"startLine":269,"file":"SSStatement.java","clone":"catch(SQLException ex){\r\n                result[i] = EXECUTE_FAILED;\r\n                if(failed == null){\r\n                    failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n                    failed.initCause(ex);\r\n                }\r\n                failed.setNextException(ex);\r\n            }"},"id":342}],"prefix_id":"T2-340","percentageOfProject":0.06662225183},{"LOC":4,"id":344,"children":[{"prefix_id":"T2-345","attributes":{"LOC":1,"path":"/src/smallsql/junit/TestDBMetaData.java","percentageOfClass":25.0,"percentageOfProject":0.00416389074,"endLine":210,"startLine":210,"file":"TestDBMetaData.java","clone":"String[] colNames = {\"TYPE_NAME\", \"DATA_TYPE\", \"PRECISION\", \"LITERAL_PREFIX\", \"LITERAL_SUFFIX\", \"CREATE_PARAMS\", \"NULLABLE\", \"CASE_SENSITIVE\", \"SEARCHABLE\", \"UNSIGNED_ATTRIBUTE\", \"FIXED_PREC_SCALE\", \"AUTO_INCREMENT\", \"LOCAL_TYPE_NAME\", \"MINIMUM_SCALE\", \"MAXIMUM_SCALE\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"NUM_PREC_RADIX\"};"},"id":345},{"prefix_id":"T2-346","attributes":{"LOC":1,"path":"/src/smallsql/junit/TestDBMetaData.java","percentageOfClass":25.0,"percentageOfProject":0.00416389074,"endLine":182,"startLine":182,"file":"TestDBMetaData.java","clone":"String[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"NUM_PREC_RADIX\", \"NULLABLE\", \"REMARKS\", \"COLUMN_DEF\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"CHAR_OCTET_LENGTH\", \"ORDINAL_POSITION\", \"IS_NULLABLE\"};"},"id":346},{"prefix_id":"T2-347","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":25.0,"percentageOfProject":0.00416389074,"endLine":831,"startLine":831,"file":"SSDatabaseMetaData.java","clone":"String[] colNames = {\t\t\"TYPE_NAME\", \t\t\t\t\"DATA_TYPE\", \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"PRECISION\", \t\"LITERAL_PREFIX\", \"LITERAL_SUFFIX\", \t\t\"CREATE_PARAMS\", \"NULLABLE\", \t \"CASE_SENSITIVE\", \"SEARCHABLE\", \"UNSIGNED_ATTRIBUTE\", \"FIXED_PREC_SCALE\", \"AUTO_INCREMENT\", \"LOCAL_TYPE_NAME\", \"MINIMUM_SCALE\", \"MAXIMUM_SCALE\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"NUM_PREC_RADIX\"};"},"id":347},{"prefix_id":"T2-348","attributes":{"LOC":1,"path":"/src/smallsql/database/SSDatabaseMetaData.java","percentageOfClass":25.0,"percentageOfProject":0.00416389074,"endLine":753,"startLine":753,"file":"SSDatabaseMetaData.java","clone":"String[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"NUM_PREC_RADIX\", \"NULLABLE\", \"REMARKS\", \"COLUMN_DEF\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"CHAR_OCTET_LENGTH\", \"ORDINAL_POSITION\", \"IS_NULLABLE\"};"},"id":348}],"prefix_id":"T2-344","percentageOfProject":0.01665556296},{"LOC":4,"id":350,"children":[{"prefix_id":"T2-351","attributes":{"LOC":2,"path":"/src/smallsql/database/Index.java","percentageOfClass":50.0,"percentageOfProject":0.008327781479,"endLine":384,"startLine":382,"file":"Index.java","clone":"// the first digit include 0-null; 1-empty; 2 another value\r\n\t\t\tchar digit = (i<0) ? (length == 0 ? (char)1 : 2)\r\n\t\t\t\t\t\t\t  : (key[i]);"},"id":351},{"prefix_id":"T2-352","attributes":{"LOC":2,"path":"/src/smallsql/database/Index.java","percentageOfClass":50.0,"percentageOfProject":0.008327781479,"endLine":409,"startLine":407,"file":"Index.java","clone":"// the first digit include 0-null; 1-empty; 2 another value\r\n\t\t\tchar digit = (i<0) ? (length == 0 ? (char)1 : 2)\r\n\t\t\t\t\t\t\t  : (key[i]);"},"id":352}],"prefix_id":"T2-350","percentageOfProject":0.01665556296},{"LOC":21,"id":354,"children":[{"prefix_id":"T2-355","attributes":{"LOC":7,"path":"/src/smallsql/database/Table.java","percentageOfClass":33.33333333,"percentageOfProject":0.02914723518,"endLine":364,"startLine":357,"file":"Table.java","clone":"// first check if another connection has a lock before creating a table lock\r\n\t\t\t\t\t\tif(locks.size() > 0){\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}"},"id":355},{"prefix_id":"T2-356","attributes":{"LOC":7,"path":"/src/smallsql/database/Table.java","percentageOfClass":33.33333333,"percentageOfProject":0.02914723518,"endLine":394,"startLine":388,"file":"Table.java","clone":"if(serializeConnections.size() > 0){\r\n                        Iterator values = locks.values().iterator();\r\n                        while(values.hasNext()){\r\n                            TableStorePage lock = (TableStorePage)values.next();\r\n                            if(lock.con != con) return null;\r\n                        }\r\n                    }"},"id":356},{"prefix_id":"T2-357","attributes":{"LOC":7,"path":"/src/smallsql/database/Table.java","percentageOfClass":33.33333333,"percentageOfProject":0.02914723518,"endLine":376,"startLine":370,"file":"Table.java","clone":"if(serializeConnections.size() > 0){\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}"},"id":357}],"prefix_id":"T2-354","percentageOfProject":0.08744170553},{"LOC":16,"id":359,"children":[{"prefix_id":"T2-360","attributes":{"LOC":8,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":246,"startLine":239,"file":"TestOrderBy.java","clone":"{\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}"},"id":360},{"prefix_id":"T2-361","attributes":{"LOC":8,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":218,"startLine":211,"file":"TestOrderBy.java","clone":"{\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}"},"id":361}],"prefix_id":"T2-359","percentageOfProject":0.06662225183},{"LOC":60,"id":363,"children":[{"prefix_id":"T2-364","attributes":{"LOC":10,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":16.66666667,"percentageOfProject":0.0416389074,"endLine":192,"startLine":183,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":364},{"prefix_id":"T2-365","attributes":{"LOC":10,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":16.66666667,"percentageOfProject":0.0416389074,"endLine":182,"startLine":173,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":365},{"prefix_id":"T2-366","attributes":{"LOC":10,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":16.66666667,"percentageOfProject":0.0416389074,"endLine":189,"startLine":180,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":366},{"prefix_id":"T2-367","attributes":{"LOC":10,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":16.66666667,"percentageOfProject":0.0416389074,"endLine":172,"startLine":163,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":367},{"prefix_id":"T2-368","attributes":{"LOC":10,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":16.66666667,"percentageOfProject":0.0416389074,"endLine":177,"startLine":168,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":368},{"prefix_id":"T2-369","attributes":{"LOC":10,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":16.66666667,"percentageOfProject":0.0416389074,"endLine":199,"startLine":190,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":369}],"prefix_id":"T2-363","percentageOfProject":0.2498334444},{"LOC":16,"id":371,"children":[{"prefix_id":"T2-372","attributes":{"LOC":8,"path":"/src/smallsql/junit/TestLanguage.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":259,"startLine":251,"file":"TestLanguage.java","clone":"if (diff.size() > 0) {\r\n                failed = true;\r\n                msgBuf.append(\"\\nAdditional entries for language \").append( OTHER_LANGUAGES[i] ).append(\": \");\r\n                \r\n                for (Iterator itr = diff.iterator(); itr.hasNext(); ) {\r\n                    msgBuf.append(itr.next());\r\n                    if (itr.hasNext()) msgBuf.append(',');\r\n                }\r\n            }"},"id":372},{"prefix_id":"T2-373","attributes":{"LOC":8,"path":"/src/smallsql/junit/TestLanguage.java","percentageOfClass":50.0,"percentageOfProject":0.03331112592,"endLine":245,"startLine":237,"file":"TestLanguage.java","clone":"if (diff.size() > 0) {\r\n\t\t\t\tfailed = true;\r\n                msgBuf.append(\"\\nMissing entries for language \").append( OTHER_LANGUAGES[i] ).append(\": \");\r\n\t\t\t\t\r\n\t\t\t\tfor (Iterator itr = diff.iterator(); itr.hasNext(); ) {\r\n\t\t\t\t\tmsgBuf.append(itr.next());\r\n\t\t\t\t\tif (itr.hasNext()) msgBuf.append(',');\r\n\t\t\t\t}\r\n\t\t\t}"},"id":373}],"prefix_id":"T2-371","percentageOfProject":0.06662225183},{"LOC":40,"id":375,"children":[{"prefix_id":"T2-376","attributes":{"LOC":20,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":50.0,"percentageOfProject":0.08327781479,"endLine":437,"startLine":414,"file":"TestOrderBy.java","clone":"{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Asc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}"},"id":376},{"prefix_id":"T2-377","attributes":{"LOC":20,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":50.0,"percentageOfProject":0.08327781479,"endLine":352,"startLine":329,"file":"TestOrderBy.java","clone":"{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}"},"id":377}],"prefix_id":"T2-375","percentageOfProject":0.1665556296},{"LOC":8,"id":379,"children":[{"prefix_id":"T2-380","attributes":{"LOC":4,"path":"/src/smallsql/junit/BasicTestCase.java","percentageOfClass":50.0,"percentageOfProject":0.01665556296,"endLine":107,"startLine":104,"file":"BasicTestCase.java","clone":"{\r\n\t\t\tbuf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n\t\t\tbuf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n\t\t}"},"id":380},{"prefix_id":"T2-381","attributes":{"LOC":4,"path":"/src/smallsql/database/Utils.java","percentageOfClass":50.0,"percentageOfProject":0.01665556296,"endLine":210,"startLine":207,"file":"Utils.java","clone":"{\r\n            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n            buf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n        }"},"id":381}],"prefix_id":"T2-379","percentageOfProject":0.03331112592},{"LOC":26,"id":383,"children":[{"prefix_id":"T2-384","attributes":{"LOC":13,"path":"/src/smallsql/database/language/Language.java","percentageOfClass":50.0,"percentageOfProject":0.05413057961,"endLine":306,"startLine":292,"file":"Language.java","clone":"{\r\n\t\tSet inserted = new HashSet(); // for duplicates checking\r\n\t\t\r\n\t\tfor (int i = 0; i < entries.length; i++) {\r\n\t\t\tString key = entries[i][0];\r\n\t\t\t\r\n\t\t\tif (! inserted.add(key)) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Duplicate key: \" + key);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tString value = entries[i][1];\r\n\t\t\t\tmessages.put(key, value);\r\n\t\t\t}\r\n\t\t}\r\n\t}"},"id":384},{"prefix_id":"T2-385","attributes":{"LOC":13,"path":"/src/smallsql/database/language/Language.java","percentageOfClass":50.0,"percentageOfProject":0.05413057961,"endLine":332,"startLine":318,"file":"Language.java","clone":"{\r\n\t\tSet inserted = new HashSet(); // for duplicates checking\r\n\t\t\r\n\t\tfor (int i = 0; i < SQL_STATES.length; i++) {\r\n\t\t\tString key = SQL_STATES[i][0];\r\n\t\t\t\r\n\t\t\tif (! inserted.add(key)) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Duplicate key: \" + key);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tString value = SQL_STATES[i][1];\r\n\t\t\t\tsqlStates.put(key, value);\r\n\t\t\t}\r\n\t\t}\r\n\t}"},"id":385}],"prefix_id":"T2-383","percentageOfProject":0.1082611592},{"LOC":42,"id":387,"children":[{"prefix_id":"T2-388","attributes":{"LOC":21,"path":"/src/smallsql/junit/TestTransactions.java","percentageOfClass":50.0,"percentageOfProject":0.08744170553,"endLine":135,"startLine":110,"file":"TestTransactions.java","clone":"{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions (Select * From transactions)\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.commit();\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}"},"id":388},{"prefix_id":"T2-389","attributes":{"LOC":21,"path":"/src/smallsql/junit/TestTransactions.java","percentageOfClass":50.0,"percentageOfProject":0.08744170553,"endLine":194,"startLine":169,"file":"TestTransactions.java","clone":"{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.rollback();\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}"},"id":389}],"prefix_id":"T2-387","percentageOfProject":0.1748834111},{"LOC":44,"id":391,"children":[{"prefix_id":"T2-392","attributes":{"LOC":22,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":50.0,"percentageOfProject":0.09160559627,"endLine":251,"startLine":226,"file":"TestOrderBy.java","clone":"{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\r\n\t\tassertEquals( valueCount, count );\r\n\t}"},"id":392},{"prefix_id":"T2-393","attributes":{"LOC":22,"path":"/src/smallsql/junit/TestOrderBy.java","percentageOfClass":50.0,"percentageOfProject":0.09160559627,"endLine":223,"startLine":198,"file":"TestOrderBy.java","clone":"{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\r\n\t\tassertEquals( valueCount, count );\r\n\t}"},"id":393}],"prefix_id":"T2-391","percentageOfProject":0.1832111925},{"LOC":28,"id":395,"children":[{"prefix_id":"T2-396","attributes":{"LOC":14,"path":"/src/smallsql/database/Index.java","percentageOfClass":50.0,"percentageOfProject":0.05829447035,"endLine":372,"startLine":359,"file":"Index.java","clone":"if(node.isEmpty()){\r\n\t\t\t\tif(isLastValue){\r\n\t\t\t\t\tnode.addRemainderKey( rowOffset, key, i );\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRootValue( key, i);\r\n\t\t\t}else\r\n\t\t\tif(equals(node.getRemainderValue(), key, i)){\r\n\t\t\t\tif(isLastValue){\r\n\t\t\t\t\tnode.saveValue( rowOffset);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRoot();\r\n\t\t\t}"},"id":396},{"prefix_id":"T2-397","attributes":{"LOC":14,"path":"/src/smallsql/database/Index.java","percentageOfClass":50.0,"percentageOfProject":0.05829447035,"endLine":431,"startLine":418,"file":"Index.java","clone":"if(node.isEmpty()){\r\n\t\t\t\tif(isLast){\r\n\t\t\t\t\tnode.addRemainderKey( rowOffset, key, i );\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRootValue( key, i );\r\n\t\t\t}else\r\n\t\t\tif(equals(node.getRemainderValue(), key, i)){\r\n\t\t\t\tif(isLast){\r\n\t\t\t\t\tnode.saveValue(rowOffset);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRoot();\r\n\t\t\t}"},"id":397}],"prefix_id":"T2-395","percentageOfProject":0.1165889407},{"LOC":2,"id":399,"children":[{"prefix_id":"T2-400","attributes":{"LOC":1,"path":"/src/smallsql/junit/TestDBMetaData.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":281,"startLine":281,"file":"TestDBMetaData.java","clone":"int[] colTypes3 = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.BOOLEAN, Types.NULL, Types.VARCHAR, Types.SMALLINT, Types.SMALLINT, Types.VARCHAR, Types.NULL, Types.NULL, Types.NULL, Types.NULL};"},"id":400},{"prefix_id":"T2-401","attributes":{"LOC":1,"path":"/src/smallsql/junit/TestDBMetaData.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":104,"startLine":104,"file":"TestDBMetaData.java","clone":"int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };"},"id":401}],"prefix_id":"T2-399","percentageOfProject":0.008327781479},{"LOC":2,"id":403,"children":[{"prefix_id":"T2-404","attributes":{"LOC":1,"path":"/src/smallsql/database/SQLParser.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":1988,"startLine":1988,"file":"SQLParser.java","clone":"private static final int[] MISSING_OPTIONS_DATATYPE = { SQLTokenizer.DEFAULT, SQLTokenizer.IDENTITY, SQLTokenizer.NOT, SQLTokenizer.NULL, SQLTokenizer.PRIMARY, SQLTokenizer.UNIQUE, SQLTokenizer.COMMA, SQLTokenizer.PARENTHESIS_R};"},"id":404},{"prefix_id":"T2-405","attributes":{"LOC":1,"path":"/src/smallsql/database/SQLParser.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":1957,"startLine":1957,"file":"SQLParser.java","clone":"private static final int[] COMMANDS_CREATE = {SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW, SQLTokenizer.INDEX, SQLTokenizer.PROCEDURE, SQLTokenizer.UNIQUE, SQLTokenizer.CLUSTERED, SQLTokenizer.NONCLUSTERED};"},"id":405}],"prefix_id":"T2-403","percentageOfProject":0.008327781479},{"LOC":18,"id":407,"children":[{"prefix_id":"T2-408","attributes":{"LOC":9,"path":"/src/smallsql/database/TableView.java","percentageOfClass":50.0,"percentageOfProject":0.03747501666,"endLine":113,"startLine":105,"file":"TableView.java","clone":"catch(Throwable e){\r\n\t\t\tif(raFile != null)\r\n\t\t\t\ttry{\r\n\t\t\t\t\traFile.close();\r\n\t\t\t\t}catch(Exception e2){\r\n\t\t\t\t\tDriverManager.println(e2.toString());\r\n\t\t\t\t}\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}"},"id":408},{"prefix_id":"T2-409","attributes":{"LOC":9,"path":"/src/smallsql/database/IndexDescription.java","percentageOfClass":50.0,"percentageOfProject":0.03747501666,"endLine":194,"startLine":186,"file":"IndexDescription.java","clone":"catch(Throwable e){\r\n            if(raFile != null)\r\n                try{\r\n                    raFile.close();\r\n                }catch(Exception e2){\r\n                    DriverManager.println(e2.toString());\r\n                }\r\n            throw SmallSQLException.createFromException(e);\r\n        }"},"id":409}],"prefix_id":"T2-407","percentageOfProject":0.07495003331},{"LOC":48,"id":411,"children":[{"prefix_id":"T2-412","attributes":{"LOC":8,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":16.66666667,"percentageOfProject":0.03331112592,"endLine":171,"startLine":164,"file":"SSCallableStatement.java","clone":"try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":412},{"prefix_id":"T2-413","attributes":{"LOC":8,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":16.66666667,"percentageOfProject":0.03331112592,"endLine":198,"startLine":191,"file":"SSResultSet.java","clone":"try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":413},{"prefix_id":"T2-414","attributes":{"LOC":8,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":16.66666667,"percentageOfProject":0.03331112592,"endLine":176,"startLine":169,"file":"SSResultSet.java","clone":"try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":414},{"prefix_id":"T2-415","attributes":{"LOC":8,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":16.66666667,"percentageOfProject":0.03331112592,"endLine":188,"startLine":181,"file":"SSResultSet.java","clone":"try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":415},{"prefix_id":"T2-416","attributes":{"LOC":8,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":16.66666667,"percentageOfProject":0.03331112592,"endLine":181,"startLine":174,"file":"SSCallableStatement.java","clone":"try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":416},{"prefix_id":"T2-417","attributes":{"LOC":8,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":16.66666667,"percentageOfProject":0.03331112592,"endLine":191,"startLine":184,"file":"SSCallableStatement.java","clone":"try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":417}],"prefix_id":"T2-411","percentageOfProject":0.1998667555},{"LOC":22,"id":419,"children":[{"prefix_id":"T2-420","attributes":{"LOC":11,"path":"/src/smallsql/database/IndexScrollStatus.java","percentageOfClass":50.0,"percentageOfProject":0.04580279813,"endLine":99,"startLine":89,"file":"IndexScrollStatus.java","clone":"if(status.nodeValue != null){\r\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else\r\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\r\n\t\t\t\t\t}"},"id":420},{"prefix_id":"T2-421","attributes":{"LOC":11,"path":"/src/smallsql/database/IndexScrollStatus.java","percentageOfClass":50.0,"percentageOfProject":0.04580279813,"endLine":131,"startLine":120,"file":"IndexScrollStatus.java","clone":"if(status.nodeValue != null){\r\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else\r\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//There is no RowOffset in this node"},"id":421}],"prefix_id":"T2-419","percentageOfProject":0.09160559627},{"LOC":20,"id":423,"children":[{"prefix_id":"T2-424","attributes":{"LOC":10,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":50.0,"percentageOfProject":0.0416389074,"endLine":153,"startLine":144,"file":"SSCallableStatement.java","clone":"{\r\n        try{\r\n            MutableNumeric obj = getValue(i).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal(scale);\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":424},{"prefix_id":"T2-425","attributes":{"LOC":10,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":50.0,"percentageOfProject":0.0416389074,"endLine":158,"startLine":149,"file":"SSResultSet.java","clone":"{\r\n        try{\r\n            MutableNumeric obj = getValue(columnIndex).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal(scale);\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"},"id":425}],"prefix_id":"T2-423","percentageOfProject":0.08327781479},{"LOC":70,"id":427,"children":[{"prefix_id":"T2-428","attributes":{"LOC":7,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":10.0,"percentageOfProject":0.02914723518,"endLine":129,"startLine":123,"file":"SSResultSet.java","clone":"try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":428},{"prefix_id":"T2-429","attributes":{"LOC":7,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":10.0,"percentageOfProject":0.02914723518,"endLine":124,"startLine":118,"file":"SSCallableStatement.java","clone":"try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":429},{"prefix_id":"T2-430","attributes":{"LOC":7,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":10.0,"percentageOfProject":0.02914723518,"endLine":120,"startLine":114,"file":"SSResultSet.java","clone":"try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getInt();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":430},{"prefix_id":"T2-431","attributes":{"LOC":7,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":10.0,"percentageOfProject":0.02914723518,"endLine":105,"startLine":99,"file":"SSResultSet.java","clone":"try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getBoolean();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":431},{"prefix_id":"T2-432","attributes":{"LOC":7,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":10.0,"percentageOfProject":0.02914723518,"endLine":115,"startLine":109,"file":"SSCallableStatement.java","clone":"try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getInt();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":432},{"prefix_id":"T2-433","attributes":{"LOC":7,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":10.0,"percentageOfProject":0.02914723518,"endLine":133,"startLine":127,"file":"SSCallableStatement.java","clone":"try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getFloat();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":433},{"prefix_id":"T2-434","attributes":{"LOC":7,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":10.0,"percentageOfProject":0.02914723518,"endLine":138,"startLine":132,"file":"SSResultSet.java","clone":"try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getFloat();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":434},{"prefix_id":"T2-435","attributes":{"LOC":7,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":10.0,"percentageOfProject":0.02914723518,"endLine":142,"startLine":136,"file":"SSCallableStatement.java","clone":"try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":435},{"prefix_id":"T2-436","attributes":{"LOC":7,"path":"/src/smallsql/database/SSCallableStatement.java","percentageOfClass":10.0,"percentageOfProject":0.02914723518,"endLine":100,"startLine":94,"file":"SSCallableStatement.java","clone":"try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getBoolean();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":436},{"prefix_id":"T2-437","attributes":{"LOC":7,"path":"/src/smallsql/database/SSResultSet.java","percentageOfClass":10.0,"percentageOfProject":0.02914723518,"endLine":147,"startLine":141,"file":"SSResultSet.java","clone":"try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getDouble();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }"},"id":437}],"prefix_id":"T2-427","percentageOfProject":0.2914723518},{"LOC":28,"id":439,"children":[{"prefix_id":"T2-440","attributes":{"LOC":7,"path":"/src/smallsql/junit/TestMoneyRounding.java","percentageOfClass":25.0,"percentageOfProject":0.02914723518,"endLine":61,"startLine":54,"file":"TestMoneyRounding.java","clone":"try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }"},"id":440},{"prefix_id":"T2-441","attributes":{"LOC":7,"path":"/src/smallsql/junit/TestFunctions.java","percentageOfClass":25.0,"percentageOfProject":0.02914723518,"endLine":382,"startLine":375,"file":"TestFunctions.java","clone":"try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }"},"id":441},{"prefix_id":"T2-442","attributes":{"LOC":7,"path":"/src/smallsql/junit/TestOperatoren.java","percentageOfClass":25.0,"percentageOfProject":0.02914723518,"endLine":103,"startLine":96,"file":"TestOperatoren.java","clone":"try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }"},"id":442},{"prefix_id":"T2-443","attributes":{"LOC":7,"path":"/src/smallsql/junit/TestDataTypes.java","percentageOfClass":25.0,"percentageOfProject":0.02914723518,"endLine":76,"startLine":69,"file":"TestDataTypes.java","clone":"try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }"},"id":443}],"prefix_id":"T2-439","percentageOfProject":0.1165889407},{"LOC":2,"id":445,"children":[{"prefix_id":"T2-446","attributes":{"LOC":1,"path":"/src/smallsql/junit/TestDBMetaData.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":94,"startLine":94,"file":"TestDBMetaData.java","clone":"int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };"},"id":446},{"prefix_id":"T2-447","attributes":{"LOC":1,"path":"/src/smallsql/junit/TestDBMetaData.java","percentageOfClass":50.0,"percentageOfProject":0.00416389074,"endLine":264,"startLine":264,"file":"TestDBMetaData.java","clone":"int[] colTypes = {Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.SMALLINT, Types.SMALLINT};"},"id":447}],"prefix_id":"T2-445","percentageOfProject":0.008327781479},{"LOC":8,"id":449,"children":[{"prefix_id":"T2-450","attributes":{"LOC":4,"path":"/src/smallsql/tools/CommandLine.java","percentageOfClass":50.0,"percentageOfProject":0.01665556296,"endLine":72,"startLine":69,"file":"CommandLine.java","clone":"for(int i=1; i<=count; i++){\r\n            System.out.print(md.getColumnLabel(i));\r\n            System.out.print('\\t');\r\n        }"},"id":450},{"prefix_id":"T2-451","attributes":{"LOC":4,"path":"/src/smallsql/tools/CommandLine.java","percentageOfClass":50.0,"percentageOfProject":0.01665556296,"endLine":78,"startLine":75,"file":"CommandLine.java","clone":"for(int i=1; i<=count; i++){\r\n                System.out.print(rs.getObject(i));\r\n                System.out.print('\\t');\r\n            }"},"id":451}],"prefix_id":"T2-449","percentageOfProject":0.03331112592},{"LOC":10,"id":453,"children":[{"prefix_id":"T2-454","attributes":{"LOC":5,"path":"/src/smallsql/database/SQLTokenizer.java","percentageOfClass":50.0,"percentageOfProject":0.0208194537,"endLine":399,"startLine":394,"file":"SQLTokenizer.java","clone":"static{\r\n\t\t// for error messages\r\n\t\tkeywords.put( new Integer(LESSER_EQU),\t\"<=\" );\r\n\t\tkeywords.put( new Integer(UNEQUALS),   \t\"<>\" );\r\n\t\tkeywords.put( new Integer(GREATER_EQU), \">=\" );\r\n\t}"},"id":454},{"prefix_id":"T2-455","attributes":{"LOC":5,"path":"/src/smallsql/database/SQLTokenizer.java","percentageOfClass":50.0,"percentageOfProject":0.0208194537,"endLine":368,"startLine":363,"file":"SQLTokenizer.java","clone":"static{\r\n        // for Error messages\r\n        keywords.put( new Integer(VALUE),       \"<expression>\" );\r\n        keywords.put( new Integer(IDENTIFIER),   \"<identifier>\" );\r\n        keywords.put( new Integer(NUMBERVALUE), \"<number>\" );\r\n    }"},"id":455}],"prefix_id":"T2-453","percentageOfProject":0.0416389074}],"fullSources":[{"path":"/src/smallsql/database/SQLTokenizer.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * SQLTokenizer.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\nimport java.util.*;\r\nimport java.sql.SQLException;\r\nimport java.sql.Types;\r\n\r\nimport smallsql.database.language.Language;\r\n\r\npublic class SQLTokenizer {\r\n\tprivate static final int NOT_COMMENT = 0;\r\n\tprivate static final int LINE_COMMENT = 1;\r\n\tprivate static final int MULTI_COMMENT = 2;\r\n\r\n    public static List parseSQL( char[] sql ) throws SQLException{\r\n        SearchNode node = searchTree;\r\n        ArrayList tokens = new ArrayList();\r\n        int value = 0;\r\n        int tokenStart = 0;\r\n        boolean wasWhiteSpace = true;\r\n        int comment = NOT_COMMENT;\r\n        char quote = 0;\r\n        StringBuffer quoteBuffer = new StringBuffer();\r\n\r\n        for(int i=0; i<sql.length; i++){\r\n            char c = sql[i];\r\n            switch(c){\r\n                case '\\\"':\r\n                case '\\'':\r\n                \t\t\tif (comment != NOT_COMMENT) {\r\n                \t\t\t\tbreak;\r\n                \t\t\t}else if(quote == 0){\r\n                                quote = c;\r\n                            }else if(quote == c){\r\n                                // check on escaped quote\r\n                                if(i+1<sql.length && sql[i+1] == quote){\r\n                                    quoteBuffer.append(quote);\r\n                                    i++;\r\n                                }else{\r\n                                    tokens.add( new SQLToken( quoteBuffer.toString(), (quote == '\\'') ? STRING : IDENTIFIER,       tokenStart, i+1) );\r\n                                    quoteBuffer.setLength(0);\r\n                                    quote = 0;\r\n                                    tokenStart = i+1;\r\n                                    wasWhiteSpace = true;\r\n                                }\r\n                            }else quoteBuffer.append(c);\r\n                            break;\r\n                case '.':\r\n\t\t        \t\t\tif (comment != NOT_COMMENT) {\r\n\t\t        \t\t\t\tbreak;\r\n\t\t        \t\t\t}else if(quote == 0){\r\n                            \t// there are follow cases with a point\r\n                            \t// \"abc\".\"abc\"\t--> identifier --> multiple tokens\r\n                            \t// \"5\".\"3\"\t\t--> identifier --> multiple tokens\r\n                            \t// 5.3\t\t\t--> number --> one token\r\n                            \t// 5.e3\t\t\t--> number --> one token\r\n                            \t// .3\t\t\t--> number --> one token\r\n                            \t// .e3\t\t\t--> identifier --> multiple tokens\r\n                                int k=tokenStart;\r\n                                if(k == i){ // point is first character\r\n                                \tif(sql.length> k+1){\r\n\t\t\t\t\t\t\t\t\t\tchar cc = sql[k+1];\r\n\t\t\t\t\t\t\t\t\t\tif((cc >= '0') && cc <= '9') break; // is a number --> break\r\n                                \t}\r\n                                }else{\r\n\t                                for(; k<i; k++){\r\n\t                                    char cc = sql[k];\r\n\t                                    if((cc != '-' && cc != '$' && cc < '0') || cc > '9') break; // is identifier --> break\r\n\t                                }\r\n\t\t\t\t\t\t\t\t\tif(k>=i) break; // preceding tokens are only digits that it is not an identifier else a floating number\r\n                                }\r\n                            }\r\n                            // character before is not a digit that it is an identifier\r\n                            // no break;\r\n\t\t\t\tcase '-':\r\n\t\t\t\t\t\t\tif (comment != NOT_COMMENT) {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t/* start of single line comment */\r\n\t\t\t\t\t\t\telse if (c == '-' && (i+1 < sql.length) && (sql[i+1] == '-')) {\r\n\t                            if(!wasWhiteSpace){\r\n\t                                tokens.add( new SQLToken( value, tokenStart, i) );\r\n\t                                value = 0;\r\n\t                            }\r\n\t\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t\t\ttokenStart = i+1;\r\n\t\t\t\t\t\t\t\tcomment = LINE_COMMENT;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(quote == 0 && !wasWhiteSpace){\r\n\t\t\t\t\t\t\t\tchar c1 = sql[tokenStart];\r\n\t\t\t\t\t\t\t\tchar cx = sql[i-1];\r\n\t\t\t\t\t\t\t\tif(((c1 >= '0' && c1 <= '9') || c1 == '.') && (cx == 'e' || cx == 'E'))\r\n\t\t\t\t\t\t\t\t\t//negative exponential number\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tif(c1 == '$' && tokenStart+1 == i)\r\n\t\t\t\t\t\t\t\t\t// money number\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n                case ' ':\r\n\t\t\t\tcase '\\t':\r\n\t\t\t\tcase '\\n':\r\n\t\t\t\tcase '\\r':\r\n                case ',':\r\n                case '(':\r\n                case ')':\r\n                case '{':\r\n                case '}':\r\n                case '*':\r\n                case '+':\r\n                case '/':\r\n                case '%':\r\n                case '&':\r\n                case '|':\r\n                case '=':\r\n                case '<':\r\n                case '>':\r\n                case '?':\r\n                case '^':\r\n                case '~':\r\n                \t\t\t/* end of line comment */\r\n                \t\t\tif (comment == LINE_COMMENT) {\r\n                \t\t\t\t// '\\r'/'\\n' check needed because of fall-through\r\n                \t\t\t\tif (c == '\\r' || c == '\\n') {\r\n                \t\t\t\t\tcomment = NOT_COMMENT;\r\n                                    wasWhiteSpace = true;\r\n                \t\t\t\t}\r\n                                tokenStart = i+1;\r\n                \t\t\t\tbreak;\r\n                \t\t\t}\r\n                \t\t\t/* end of multi-line comment */\r\n                \t\t\telse if (comment == MULTI_COMMENT) {\r\n                \t\t\t\t// '*' check needed because of fall-through\r\n                \t\t\t\tif (c == '*' && (i+1 < sql.length) && (sql[i+1] == '/')) {\r\n                \t\t\t\t\tcomment = NOT_COMMENT;\r\n                                    wasWhiteSpace = true;\r\n                                    i++;\r\n                \t\t\t\t}\r\n                                tokenStart = i + 1;\r\n                \t\t\t\tbreak;\r\n                \t\t\t}\r\n                \t\t\telse if(quote == 0){\r\n                                if(!wasWhiteSpace){\r\n                                   tokens.add( new SQLToken( value, tokenStart, i) );\r\n                                   value = 0;\r\n                                }\r\n                                switch(c){\r\n\t\t\t\t\t\t\t\t\tcase ' ':\r\n                                \tcase '\\t':\r\n                                \tcase '\\n':\r\n                                \tcase '\\r':\r\n                                    \t// skip this characters, this are not tokens, this are only source formatter   \r\n                                    \tbreak;\r\n                                    case '<':\r\n                                        if((i+1 < sql.length) && (sql[i+1] == '>')){\r\n                                            tokens.add( new SQLToken( UNEQUALS, i, i+2) );\r\n                                            i++;\r\n                                            break;\r\n                                        }\r\n                                    case '>':\r\n                                        if((i+1 < sql.length) && (sql[i+1] == '=')){\r\n                                            tokens.add( new SQLToken( 100 + c, i, i+2) );\r\n                                            i++;\r\n                                            break;\r\n                                        }\r\n                                    /* start of multi-line comment */\r\n                                    case '/':\r\n                                        if((i+1 < sql.length) && (sql[i+1] == '*')){\r\n            \t\t\t\t\t\t\t\ti++;\r\n            \t\t\t\t\t\t\t\ttokenStart = i+1;\r\n            \t\t\t\t\t\t\t\tcomment = MULTI_COMMENT;\r\n                                            break;\r\n                                        }\r\n                                    default:\r\n                                        tokens.add( new SQLToken( c, i, i+1) );\r\n                                }\r\n                                wasWhiteSpace = true;\r\n                                tokenStart = i+1;\r\n                            }else{\r\n                                quoteBuffer.append(c);\r\n                            }\r\n                            break;\r\n                default:\r\n                \t\t\tif (comment != NOT_COMMENT) {\r\n                \t\t\t\tbreak;\r\n                \t\t\t}else if(quote == 0){\r\n                                if(wasWhiteSpace){\r\n                                     node = searchTree;\r\n                                }else{\r\n                                    if(node == null){\r\n                                        value = 0;\r\n                                        wasWhiteSpace = false;\r\n                                        break;\r\n                                    }\r\n                                }\r\n\t\t\t\t\t\t\t\tc |= 0x20; // case insensitive\r\n                                while(node != null && node.letter != c) node = node.nextEntry;\r\n                                if(node != null){\r\n                                    value = node.value;\r\n                                    node = node.nextLetter;\r\n                                }else{\r\n                                    value = 0;\r\n                                    node = null;\r\n                                }\r\n                            }else{\r\n                                quoteBuffer.append(c);\r\n                            }\r\n                            wasWhiteSpace = false;\r\n                            break;\r\n            }\r\n        }\r\n        if (comment == MULTI_COMMENT) {\r\n        \tthrow SmallSQLException.create(Language.STXADD_COMMENT_OPEN);\r\n        }        \r\n        if(!wasWhiteSpace) {\r\n           tokens.add( new SQLToken( value, tokenStart, sql.length) );\r\n        }\r\n        \r\n        return tokens;\r\n    }\r\n\r\n    static private void addKeyWord( String keyword, int value){\r\n        keywords.put( Utils.getInteger( value), keyword );\r\n\r\n        char[] letters = keyword.toCharArray();\r\n        if(searchTree == null){\r\n            searchTree = new SearchNode();\r\n            searchTree.letter = (char)(letters[0] | 0x20);\r\n        }\r\n        SearchNode prev = null;\r\n        SearchNode node = searchTree;\r\n        boolean wasNextEntry = true;\r\n        for(int i=0; i<letters.length; i++){\r\n            char c = (char)(letters[i] | 0x20);\r\n            while(node != null && node.letter != c) {\r\n                prev = node;\r\n                node = node.nextEntry;\r\n                wasNextEntry = true;\r\n            }\r\n            if(node == null){\r\n                node = new SearchNode();\r\n                node.letter = c;\r\n                if(wasNextEntry)\r\n                     prev.nextEntry = node;\r\n                else prev.nextLetter = node;\r\n                wasNextEntry = false;\r\n                prev = node;\r\n                node = null;\r\n            }else{\r\n                prev = node;\r\n                node = node.nextLetter;\r\n                wasNextEntry = false;\r\n            }\r\n        }\r\n        prev.value = value;\r\n    }\r\n\r\n\tstatic final String getKeyWord(int key){\r\n\t\treturn (String)keywords.get( Utils.getInteger(key) );\r\n\t}\r\n\t\r\n\tstatic final int getSQLDataType(int type){\r\n\t\t// on change of this map the order from getTypeInfo need to be change\r\n\t\tswitch(type){\r\n\t\t\tcase SQLTokenizer.BIT:\r\n\t\t\t\t\t\treturn Types.BIT;\r\n\t\t\tcase SQLTokenizer.BOOLEAN:\r\n\t\t\t\t\t\treturn Types.BOOLEAN;\r\n\t\t\tcase SQLTokenizer.BINARY:\r\n\t\t\t\t\t\treturn Types.BINARY;\r\n\t\t\tcase SQLTokenizer.VARBINARY:\r\n\t\t\t\t\t\treturn Types.VARBINARY;\r\n\t\t\tcase SQLTokenizer.LONGVARBINARY:\r\n\t\t\t\t\t\treturn Types.LONGVARBINARY;\r\n\t\t\tcase SQLTokenizer.BLOB:\r\n\t\t\t\t\t\treturn Types.BLOB;\r\n\t\t\tcase SQLTokenizer.TINYINT:\r\n\t\t\t\t\t\treturn Types.TINYINT;\r\n\t\t\tcase SQLTokenizer.SMALLINT:\r\n\t\t\t\t\t\treturn Types.SMALLINT;\r\n\t\t\tcase SQLTokenizer.INT:\r\n\t\t\t\t\t\treturn Types.INTEGER;\r\n\t\t\tcase SQLTokenizer.BIGINT:\r\n\t\t\t\t\t\treturn Types.BIGINT;\r\n\t\t\tcase SQLTokenizer.SMALLMONEY:\r\n\t\t\tcase SQLTokenizer.MONEY:\r\n\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\t\t\t\treturn Types.DECIMAL;\r\n\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\t\t\treturn Types.NUMERIC;\r\n\t\t\tcase SQLTokenizer.REAL:\r\n\t\t\t\t\t\treturn Types.REAL;\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\t\t\t\treturn Types.FLOAT;\r\n\t\t\tcase SQLTokenizer.DOUBLE:\r\n\t\t\t\t\t\treturn Types.DOUBLE;\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\t\treturn Types.DATE;\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\t\treturn Types.TIME;\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\t\treturn Types.TIMESTAMP;\r\n\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\tcase SQLTokenizer.NCHAR:\r\n\t\t\t\t\t\treturn Types.CHAR;\r\n\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\tcase SQLTokenizer.NVARCHAR:\r\n\t\t\t\t\t\treturn Types.VARCHAR;\r\n\t\t\tcase SQLTokenizer.LONGNVARCHAR:\r\n\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\t\t\treturn Types.LONGVARCHAR;\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n\t\t\t\t\t\treturn Types.CLOB;\r\n\t\t\tcase SQLTokenizer.JAVA_OBJECT:\r\n\t\t\t\t\t\treturn Types.JAVA_OBJECT;\r\n\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\t\t\treturn -11;\r\n\t\t\tcase SQLTokenizer.NULL:\r\n\t\t\t\t\t\treturn Types.NULL;\r\n\t\t\tdefault: throw new Error(\"DataType:\"+type);\r\n\t\t}\r\n\t}\r\n\t\r\n    static SearchNode searchTree;\r\n\r\n    static Hashtable keywords = new Hashtable(337);\r\n    static final int VALUE      = 0;\r\n    static final int STRING     = 3;\r\n    static final int IDENTIFIER  = 4;\r\n    static final int NUMBERVALUE= 5;\r\n    static{\r\n        // for Error messages\r\n        keywords.put( new Integer(VALUE),       \"<expression>\" );\r\n        keywords.put( new Integer(IDENTIFIER),   \"<identifier>\" );\r\n        keywords.put( new Integer(NUMBERVALUE), \"<number>\" );\r\n    }\r\n\r\n    static final int PERCENT        = '%'; // 37\r\n    static final int BIT_AND        = '&'; // 38\r\n    static final int PARENTHESIS_L  = '('; // 40\r\n    static final int PARENTHESIS_R  = ')'; // 41\r\n    static final int ASTERISK       = '*'; // 42\r\n    static final int PLUS           = '+'; // 43\r\n    static final int COMMA          = ','; // 44\r\n    static final int MINUS          = '-'; // 45\r\n    static final int POINT          = '.'; // 46\r\n    static final int SLACH          = '/'; // 47\r\n    static final int LESSER         = '<'; // 60\r\n    static final int EQUALS         = '='; // 61\r\n    static final int GREATER        = '>'; // 62\r\n    static final int QUESTION       = '?'; // 63\r\n    static final int BIT_XOR        = '^'; // 94\r\n    static final int ESCAPE_L       = '{'; // 123\r\n    static final int BIT_OR         = '|'; // 124\r\n    static final int ESCAPE_R       = '}'; // 125\r\n    static final int TILDE          = '~'; // 126\r\n\r\n    static final int LESSER_EQU     = 100 + LESSER; // <=\r\n    static final int UNEQUALS       = 100 + EQUALS;  // <>\r\n    static final int GREATER_EQU    = 100 + GREATER; // >=\r\n\r\n\tstatic{\r\n\t\t// for error messages\r\n\t\tkeywords.put( new Integer(LESSER_EQU),\t\"<=\" );\r\n\t\tkeywords.put( new Integer(UNEQUALS),   \t\"<>\" );\r\n\t\tkeywords.put( new Integer(GREATER_EQU), \">=\" );\r\n\t}\r\n    static final int SELECT     = 200;\r\n    static final int DELETE     = 201;\r\n    //static final int INSERT     = 202;\r\n    static final int INTO       = 203;\r\n    static final int UPDATE     = 204;\r\n    static final int CREATE     = 205;\r\n    static final int DROP       = 206;\r\n    static final int ALTER      = 207;\r\n    static final int SET        = 208;\r\n    static final int EXECUTE    = 209;\r\n    static final int FROM       = 210;\r\n    static final int WHERE      = 211;\r\n    static final int GROUP      = 212;\r\n    static final int BY         = 213;\r\n    static final int HAVING     = 214;\r\n    static final int ORDER      = 215;\r\n\tstatic final int ASC        = 216;\r\n\tstatic final int DESC       = 217;\r\n    static final int VALUES     = 218;\r\n    static final int AS         = 219;\r\n    static final int DEFAULT    = 220;\r\n    static final int IDENTITY   = 221;\r\n    static final int INNER      = 222;\r\n    static final int JOIN       = 223;\r\n    static final int ON         = 224;\r\n    static final int OUTER      = 225;\r\n    static final int FULL       = 226;\r\n    static final int CROSS      = 227;\r\n    static final int USE\t\t= 228;\r\n\tstatic final int TOP\t\t= 229;\r\n\tstatic final int ADD\t\t= 230;\r\n\tstatic final int LIMIT      = 231;\r\n\r\n    static final int DATABASE   = 235;\r\n    static final int TABLE      = 236;\r\n    static final int VIEW       = 237;\r\n    static final int INDEX      = 238;\r\n    static final int PROCEDURE  = 239;\r\n\r\n    static final int TRANSACTION= 240;\r\n    static final int ISOLATION  = 241;\r\n    static final int LEVEL      = 242;\r\n    static final int READ       = 243;\r\n    static final int COMMITTED  = 244;\r\n    static final int UNCOMMITTED= 245;\r\n    static final int REPEATABLE = 246;\r\n    static final int SERIALIZABLE= 247;\r\n    \r\n    static final int CONSTRAINT = 250;\r\n\tstatic final int PRIMARY \t= 251;\r\n\tstatic final int FOREIGN \t= 252;\r\n\tstatic final int KEY \t\t= 253;\r\n\tstatic final int UNIQUE \t= 254;\r\n\tstatic final int CLUSTERED  = 255;\r\n\tstatic final int NONCLUSTERED=256;\r\n\tstatic final int REFERENCES = 257;\r\n\r\n\tstatic final int UNION \t\t= 260;\r\n\tstatic final int ALL \t\t= 261;\r\n\tstatic final int DISTINCT   = 262;\r\n\tstatic final int CASE \t\t= 263;\r\n\tstatic final int WHEN \t\t= 264;\r\n\tstatic final int THEN \t\t= 265;\r\n\tstatic final int ELSE \t\t= 266;\r\n\tstatic final int END \t\t= 267;\r\n\tstatic final int SWITCH \t= 268;\r\n\t\r\n\tstatic final String DESC_STR   = \"DESC\";\r\n    static{\r\n        addKeyWord( \"SELECT\",   SELECT);\r\n        addKeyWord( \"DELETE\",   DELETE);\r\n//        addKeyWord( \"INSERT\",   INSERT);\r\n        addKeyWord( \"INTO\",     INTO);\r\n        addKeyWord( \"UPDATE\",   UPDATE);\r\n        addKeyWord( \"CREATE\",   CREATE);\r\n        addKeyWord( \"DROP\",     DROP);\r\n        addKeyWord( \"ALTER\",    ALTER);\r\n        addKeyWord( \"SET\",      SET);\r\n        addKeyWord( \"EXEC\",     EXECUTE); // alias for EXECUTE; alias must set first so that key is in the hashtable and not the alias\r\n        addKeyWord( \"EXECUTE\",  EXECUTE);\r\n        addKeyWord( \"FROM\",     FROM);\r\n        addKeyWord( \"WHERE\",    WHERE);\r\n        addKeyWord( \"GROUP\",    GROUP);\r\n        addKeyWord( \"BY\",       BY);\r\n        addKeyWord( \"HAVING\",   HAVING);\r\n        addKeyWord( \"ORDER\",    ORDER);\r\n\t\taddKeyWord( \"ASC\",      ASC);\r\n\t\taddKeyWord( DESC_STR,   DESC);\r\n        addKeyWord( \"VALUES\",   VALUES);\r\n        addKeyWord( \"AS\",       AS);\r\n        addKeyWord( \"DEFAULT\",  DEFAULT);\r\n        addKeyWord( \"AUTO_INCREMENT\", IDENTITY); // alias for IDENTITY; alias must set first so that key is in the hashtable and not the alias\r\n        addKeyWord( \"IDENTITY\", IDENTITY);\r\n        addKeyWord( \"INNER\",    INNER);\r\n        addKeyWord( \"JOIN\",     JOIN);\r\n        addKeyWord( \"ON\",       ON);\r\n        addKeyWord( \"OUTER\",    OUTER);\r\n        addKeyWord( \"FULL\",     FULL);\r\n        addKeyWord( \"CROSS\",    CROSS);\r\n\t\taddKeyWord( \"USE\",      USE);\r\n\t\taddKeyWord( \"TOP\",      TOP);\r\n\t\taddKeyWord( \"ADD\",      ADD);\r\n        addKeyWord( \"LIMIT\",    LIMIT);\r\n\r\n        addKeyWord( \"DATABASE\", DATABASE);\r\n        addKeyWord( \"TABLE\",    TABLE);\r\n        addKeyWord( \"VIEW\",     VIEW);\r\n        addKeyWord( \"INDEX\",    INDEX);\r\n        addKeyWord( \"PROCEDURE\",PROCEDURE);\r\n\r\n        addKeyWord( \"TRANSACTION\",  TRANSACTION);\r\n        addKeyWord( \"ISOLATION\",    ISOLATION);\r\n        addKeyWord( \"LEVEL\",        LEVEL);\r\n        addKeyWord( \"READ\",         READ);\r\n        addKeyWord( \"COMMITTED\",    COMMITTED);\r\n        addKeyWord( \"UNCOMMITTED\",  UNCOMMITTED);\r\n        addKeyWord( \"REPEATABLE\",   REPEATABLE);\r\n        addKeyWord( \"SERIALIZABLE\", SERIALIZABLE);\r\n        \r\n\t\taddKeyWord( \"CONSTRAINT\", \tCONSTRAINT);\r\n\t\taddKeyWord( \"PRIMARY\",    \tPRIMARY);\r\n\t\taddKeyWord( \"FOREIGN\",     \tFOREIGN);\r\n\t\taddKeyWord( \"KEY\",    \t\tKEY);\r\n\t\taddKeyWord( \"UNIQUE\",\t\tUNIQUE);\r\n\t\taddKeyWord( \"CLUSTERED\",  \tCLUSTERED);\r\n\t\taddKeyWord( \"NONCLUSTERED\", NONCLUSTERED);\r\n\t\taddKeyWord( \"REFERENCES\",   REFERENCES);\r\n\r\n\t\taddKeyWord( \"UNION\", \t\tUNION);\r\n\t\taddKeyWord( \"ALL\",   \t\tALL);\r\n\t\taddKeyWord( \"DISTINCT\",   \tDISTINCT);\r\n\t\taddKeyWord( \"CASE\",   \t\tCASE);\r\n\t\taddKeyWord( \"WHEN\",   \t\tWHEN);\r\n\t\taddKeyWord( \"THEN\",   \t\tTHEN);\r\n\t\taddKeyWord( \"ELSE\",   \t\tELSE);\r\n\t\taddKeyWord( \"END\",   \t\tEND);\r\n\t\taddKeyWord( \"SWITCH\", \t\tSWITCH);\r\n    }\r\n\r\n\r\n    //data types\r\n    static final int BIT            = 300;\r\n    static final int BOOLEAN        = 301;\r\n    static final int BINARY         = 310;\r\n    static final int VARBINARY      = 311;\r\n\tstatic final int RAW      \t\t= 312;\r\n    static final int LONGVARBINARY  = 313;\r\n    static final int BLOB           = 316;\r\n    static final int TINYINT        = 321;\r\n    static final int SMALLINT       = 322;\r\n    static final int INT            = 323;\r\n    static final int COUNTER        = 324; //alias for INT IDENTITY, is used from MS ACCESS\r\n    static final int BIGINT         = 325;\r\n    static final int SMALLMONEY     = 330;\r\n    static final int MONEY          = 331;\r\n    static final int DECIMAL        = 332;\r\n    static final int NUMERIC        = 333;\r\n    static final int REAL           = 336;\r\n    static final int FLOAT          = 337;\r\n    static final int DOUBLE         = 338;\r\n    static final int DATE           = 340;\r\n    static final int TIME           = 341;\r\n    static final int TIMESTAMP      = 342;\r\n    static final int SMALLDATETIME  = 343;\r\n    static final int CHAR           = 350;\r\n    static final int NCHAR          = 352;\r\n    static final int VARCHAR        = 353;\r\n    static final int NVARCHAR       = 355;\r\n\tstatic final int SYSNAME        = 357;\r\n    static final int LONGVARCHAR    = 359;\r\n    static final int LONGNVARCHAR   = 360;\r\n    static final int LONG           = 361;\r\n    static final int CLOB           = 362;\r\n    static final int NCLOB          = 363;\r\n    static final int UNIQUEIDENTIFIER= 370;\r\n    static final int JAVA_OBJECT    = 371;\r\n\r\n    static{\r\n        addKeyWord( \"BIT\",          BIT);\r\n        addKeyWord( \"BOOLEAN\",      BOOLEAN);\r\n        addKeyWord( \"BINARY\",       BINARY);\r\n        addKeyWord( \"VARBINARY\",    VARBINARY);\r\n\t\taddKeyWord( \"RAW\",          RAW); // alias for Oracle RAW and LONG RAW\r\n\t\taddKeyWord( \"IMAGE\",        LONGVARBINARY); // alias for MS SQL Server data type IMAGE\r\n        addKeyWord( \"LONGVARBINARY\",LONGVARBINARY);\r\n        addKeyWord( \"BLOB\",         BLOB);\r\n        addKeyWord( \"BYTE\",         TINYINT);\r\n        addKeyWord( \"TINYINT\",      TINYINT);\r\n        addKeyWord( \"SMALLINT\",     SMALLINT);\r\n\t\taddKeyWord( \"INTEGER\",      INT);\r\n        addKeyWord( \"INT\",          INT);\r\n        addKeyWord( \"SERIAL\",       COUNTER); //alias for MySQL and PostgreSQL\r\n        addKeyWord( \"COUNTER\",      COUNTER);\r\n        addKeyWord( \"BIGINT\",       BIGINT);\r\n        addKeyWord( \"SMALLMONEY\",   SMALLMONEY);\r\n        addKeyWord( \"MONEY\",        MONEY);\r\n\t\taddKeyWord( \"NUMBER\",       DECIMAL);\r\n\t\taddKeyWord( \"VARNUM\",       DECIMAL);\r\n\t\taddKeyWord( \"DECIMAL\",      DECIMAL);\r\n        addKeyWord( \"NUMERIC\",      NUMERIC);\r\n        addKeyWord( \"REAL\",         REAL);\r\n        addKeyWord( \"FLOAT\",        FLOAT);\r\n        addKeyWord( \"DOUBLE\",       DOUBLE);\r\n        addKeyWord( \"DATE\",         DATE);\r\n        addKeyWord( \"TIME\",         TIME);\r\n        addKeyWord( \"DATETIME\",     TIMESTAMP); // alias for MS SQL Server data type DATETIME\r\n        addKeyWord( \"TIMESTAMP\",    TIMESTAMP);\r\n        addKeyWord( \"SMALLDATETIME\",SMALLDATETIME);\r\n        addKeyWord( \"CHARACTER\",    CHAR); // alias for CHAR\r\n        addKeyWord( \"CHAR\",         CHAR);\r\n        addKeyWord( \"NCHAR\",        NCHAR);\r\n        addKeyWord( \"VARCHAR2\",     VARCHAR); // alias for Oracle VARCHAR2\r\n        addKeyWord( \"VARCHAR\",      VARCHAR);\r\n        addKeyWord( \"NVARCHAR2\",    NVARCHAR); // alias for Oracle VARCHAR2\r\n        addKeyWord( \"NVARCHAR\",     NVARCHAR);\r\n\t\taddKeyWord( \"SYSNAME\",      SYSNAME);\r\n        addKeyWord( \"TEXT\",         LONGVARCHAR);\r\n        addKeyWord( \"LONGVARCHAR\",  LONGVARCHAR);\r\n        addKeyWord( \"NTEXT\",        LONGNVARCHAR);\r\n        addKeyWord( \"LONGNVARCHAR\", LONGNVARCHAR);\r\n        addKeyWord( \"LONG\",         LONG); // alias for Oracle LONG and LONG RAW\r\n        addKeyWord( \"CLOB\",         CLOB);\r\n        addKeyWord( \"NCLOB\",        NCLOB);\r\n        addKeyWord( \"UNIQUEIDENTIFIER\",UNIQUEIDENTIFIER);\r\n        addKeyWord( \"SQL_VARIANT\",  JAVA_OBJECT); // alias for MS SQL Server data type SQL_VARIANT\r\n        addKeyWord( \"JAVA_OBJECT\",  JAVA_OBJECT);\r\n    }\r\n\r\n    //escape commands\r\n    static final int D      = 400;\r\n    static final int T      = 401;\r\n    static final int TS     = 402;\r\n    static final int FN     = 403;\r\n    static final int CALL   = 404;\r\n    static final int OJ     = 405;\r\n    static{\r\n        addKeyWord( \"D\",    D);\r\n        addKeyWord( \"T\",    T);\r\n        addKeyWord( \"TS\",   TS);\r\n        addKeyWord( \"FN\",   FN);\r\n        addKeyWord( \"CALL\", CALL);\r\n        addKeyWord( \"OJ\", OJ);\r\n    }\r\n\r\n\r\n    static final int OR     = 500;\r\n    static final int AND    = 501;\r\n\tstatic final int IS     = 502;\r\n    static final int NOT    = 503;\r\n    static final int NULL   = 504;\r\n    static final int TRUE   = 505;\r\n    static final int FALSE  = 506;\r\n    static final int BETWEEN= 507;\r\n    static final int LIKE   = 508;\r\n    static final int IN     = 509;\r\n    static{\r\n        addKeyWord( \"OR\",       OR);\r\n        addKeyWord( \"AND\",      AND);\r\n\t\taddKeyWord( \"IS\",       IS);\r\n        addKeyWord( \"NOT\",      NOT);\r\n        addKeyWord( \"NULL\",     NULL);\r\n\t\taddKeyWord( \"YES\",      TRUE); //alias for TRUE\r\n        addKeyWord( \"TRUE\",     TRUE);\r\n\t\taddKeyWord( \"NO\",    \tFALSE); //alias for FALSE\r\n        addKeyWord( \"FALSE\",    FALSE);\r\n        addKeyWord( \"BETWEEN\",  BETWEEN);\r\n        addKeyWord( \"LIKE\",     LIKE);\r\n        addKeyWord( \"IN\",       IN);\r\n    }\r\n\r\n\r\n    //NUMERIC FUNCTIONS\r\n    static final int ABS        = 1000; //first numeric function --> see SSDatabaseMetaData.getNumericFunctions\r\n    static final int ACOS       = 1001;\r\n    static final int ASIN       = 1002;\r\n    static final int ATAN       = 1003;\r\n    static final int ATAN2      = 1004;\r\n    static final int CEILING    = 1005;\r\n    static final int COS        = 1006;\r\n    static final int COT        = 1007;\r\n    static final int DEGREES    = 1008;\r\n    static final int EXP        = 1009;\r\n    static final int FLOOR      = 1010;\r\n    static final int LOG        = 1011;\r\n    static final int LOG10      = 1012;\r\n    static final int MOD        = 1013;\r\n    static final int PI         = 1014;\r\n    static final int POWER      = 1015;\r\n    static final int RADIANS    = 1016;\r\n    static final int RAND       = 1017;\r\n    static final int ROUND      = 1018;\r\n    static final int SIGN       = 1019;\r\n    static final int SIN        = 1020;\r\n    static final int SQRT       = 1021;\r\n    static final int TAN        = 1022;\r\n    static final int TRUNCATE   = 1023; //last numeric function --> see SSDatabaseMetaData.getNumericFunctions\r\n    static{\r\n        addKeyWord( \"ABS\",      ABS);\r\n        addKeyWord( \"ACOS\",     ACOS);\r\n        addKeyWord( \"ASIN\",     ASIN);\r\n        addKeyWord( \"ATAN\",     ATAN);\r\n        addKeyWord( \"ATN2\",    \tATAN2); //alias for MS SQL Server\r\n        addKeyWord( \"ATAN2\",    ATAN2);\r\n        addKeyWord( \"CEILING\",  CEILING);\r\n        addKeyWord( \"COS\",      COS);\r\n        addKeyWord( \"COT\",      COT);\r\n        addKeyWord( \"DEGREES\",  DEGREES);\r\n        addKeyWord( \"EXP\",      EXP);\r\n        addKeyWord( \"FLOOR\",    FLOOR);\r\n        addKeyWord( \"LOG\",      LOG);\r\n        addKeyWord( \"LOG10\",    LOG10);\r\n        addKeyWord( \"MOD\",      MOD);\r\n        addKeyWord( \"PI\",       PI);\r\n        addKeyWord( \"POWER\",    POWER);\r\n        addKeyWord( \"RADIANS\",  RADIANS);\r\n        addKeyWord( \"RAND\",     RAND);\r\n        addKeyWord( \"ROUND\",    ROUND);\r\n        addKeyWord( \"SIGN\",     SIGN);\r\n        addKeyWord( \"SIN\",      SIN);\r\n        addKeyWord( \"SQRT\",     SQRT);\r\n        addKeyWord( \"TAN\",      TAN);\r\n        addKeyWord( \"TRUNCATE\", TRUNCATE);\r\n    }\r\n\r\n    //String Functions\r\n    static final int ASCII      = 1100; //first string function --> see SSDatabaseMetaData.getStringFunctions\r\n    static final int BITLEN     = 1101;\r\n    static final int CHARLEN    = 1102;\r\n    static final int CHARACTLEN = 1103;\r\n    static final int _CHAR      = 1104;\r\n    static final int CONCAT     = 1105;\r\n    static final int DIFFERENCE = 1106;\r\n    static final int INSERT     = 1107;\r\n    static final int LCASE      = 1108;\r\n    static final int LEFT       = 1109;\r\n    static final int LENGTH     = 1110;\r\n    static final int LOCATE     = 1111;\r\n    static final int LTRIM      = 1112;\r\n    static final int OCTETLEN   = 1113;\r\n    static final int REPEAT     = 1114;\r\n    static final int REPLACE    = 1115;\r\n    static final int RIGHT      = 1116;\r\n    static final int RTRIM      = 1117;\r\n    static final int SOUNDEX    = 1118;\r\n    static final int SPACE      = 1119;\r\n    static final int SUBSTRING  = 1120;\r\n    static final int TRIM       = 1121;\r\n    static final int UCASE      = 1122; //last string function --> see SSDatabaseMetaData.getStringFunctions\r\n    static{\r\n        addKeyWord( \"ASCII\",    ASCII);\r\n        addKeyWord( \"BIT_LENGTH\", BITLEN);\r\n        addKeyWord( \"CHAR_LENGTH\", CHARLEN);\r\n        addKeyWord( \"CHARACTER_LENGTH\", CHARACTLEN);\r\n\t\tkeywords.put( new Integer(_CHAR), \"CHAR\" ); // needed for meta data functions\r\n        addKeyWord( \"CONCAT\",   CONCAT);\r\n        addKeyWord( \"DIFFERENCE\",DIFFERENCE);\r\n\t\taddKeyWord( \"STUFF\",    INSERT); //alias for MS SQL Server\r\n\t\taddKeyWord( \"INSERT\",   INSERT);\r\n        addKeyWord( \"LCASE\",    LCASE);\r\n\t\taddKeyWord( \"LEFT\",     LEFT);\r\n\t\taddKeyWord( \"DATALENGTH\",LENGTH); //alias for MS SQL Server\r\n\t\taddKeyWord( \"LEN\",\t\tLENGTH); //alias for MS SQL Server\r\n        addKeyWord( \"LENGTH\",   LENGTH);\r\n\t\taddKeyWord( \"CHARINDEX\",LOCATE); //alias for MS SQL Server\r\n        addKeyWord( \"LOCATE\",   LOCATE);\r\n        addKeyWord( \"LTRIM\",    LTRIM);\r\n        addKeyWord( \"OCTET_LENGTH\", OCTETLEN);\r\n        addKeyWord( \"REPEAT\",   REPEAT);\r\n        addKeyWord( \"REPLACE\",  REPLACE);\r\n\t\taddKeyWord( \"RIGHT\",    RIGHT);\r\n        addKeyWord( \"RTRIM\",    RTRIM);\r\n        addKeyWord( \"SOUNDEX\",  SOUNDEX);\r\n        addKeyWord( \"SPACE\",    SPACE);\r\n        addKeyWord( \"SUBSTRING\",SUBSTRING);\r\n        addKeyWord( \"TRIM\",     TRIM);\r\n        addKeyWord( \"UCASE\",    UCASE);\r\n    }\r\n\r\n    //TIME and DATE FUNCTIONS\r\n    static final int CURDATE    = 1200; //first time date function --> see SSDatabaseMetaData.getTimeDateFunctions\r\n    static final int CURRENTDATE = 1201;\r\n    static final int CURTIME    = 1202;\r\n    static final int DAYNAME    = 1203;\r\n    static final int DAYOFMONTH = 1204;\r\n    static final int DAYOFWEEK  = 1205;\r\n    static final int DAYOFYEAR  = 1206;\r\n\tstatic final int DAY\t\t= 1207;\r\n    static final int HOUR       = 1208;\r\n\tstatic final int MILLISECOND= 1209;\r\n    static final int MINUTE     = 1210;\r\n    static final int MONTH      = 1211;\r\n    static final int MONTHNAME  = 1212;\r\n    static final int NOW        = 1213;\r\n    static final int QUARTER    = 1214;\r\n    static final int SECOND     = 1215;\r\n    static final int TIMESTAMPADD=1216;\r\n    static final int TIMESTAMPDIFF=1217;\r\n    static final int WEEK       = 1218;\r\n    static final int YEAR       = 1219; //last time date function --> see SSDatabaseMetaData.getTimeDateFunctions\r\n    static{\r\n        addKeyWord( \"CURDATE\",      CURDATE);\r\n        addKeyWord( \"CURTIME\",      CURTIME);\r\n        addKeyWord( \"CURRENT_DATE\", CURRENTDATE);\r\n        addKeyWord( \"DAYNAME\",      DAYNAME);\r\n        addKeyWord( \"DAYOFMONTH\",   DAYOFMONTH);\r\n        addKeyWord( \"DAYOFWEEK\",    DAYOFWEEK);\r\n        addKeyWord( \"DAYOFYEAR\",    DAYOFYEAR);\r\n\t\taddKeyWord( \"DAY\",    \t\tDAY);\r\n        addKeyWord( \"HOUR\",         HOUR);\r\n\t\taddKeyWord( \"MILLISECOND\",  MILLISECOND);\r\n        addKeyWord( \"MINUTE\",       MINUTE);\r\n        addKeyWord( \"MONTH\",        MONTH);\r\n        addKeyWord( \"MONTHNAME\",    MONTHNAME);\r\n\t\taddKeyWord( \"GETDATE\",      NOW); //alias for MS SQL Server\r\n        addKeyWord( \"NOW\",          NOW);\r\n        addKeyWord( \"QUARTER\",      QUARTER);\r\n        addKeyWord( \"SECOND\",       SECOND);\r\n\t\taddKeyWord( \"DATEADD\", \t\tTIMESTAMPADD); //alias for MS SQL Server\r\n        addKeyWord( \"TIMESTAMPADD\", TIMESTAMPADD);\r\n\t\taddKeyWord( \"DATEDIFF\",\t\tTIMESTAMPDIFF); //alias for MS SQL Server\r\n        addKeyWord( \"TIMESTAMPDIFF\",TIMESTAMPDIFF);\r\n        addKeyWord( \"WEEK\",         WEEK);\r\n        addKeyWord( \"YEAR\",         YEAR);\r\n    }\r\n    \r\n    // Time intervals\r\n\tstatic final int SQL_TSI_FRAC_SECOND= 1250;\r\n\tstatic final int SQL_TSI_SECOND\t\t= 1251;\r\n\tstatic final int SQL_TSI_MINUTE\t\t= 1252;\r\n\tstatic final int SQL_TSI_HOUR\t\t= 1253;\r\n\tstatic final int SQL_TSI_DAY\t\t= 1254;\r\n\tstatic final int SQL_TSI_WEEK\t\t= 1255;\r\n\tstatic final int SQL_TSI_MONTH\t\t= 1256;\r\n\tstatic final int SQL_TSI_QUARTER\t= 1257;\r\n\tstatic final int SQL_TSI_YEAR\t\t= 1258;\r\n\tstatic{\r\n\t\taddKeyWord( \"MS\",\t\t\t\t\tSQL_TSI_FRAC_SECOND);\r\n\t\taddKeyWord( \"SQL_TSI_FRAC_SECOND\",\tSQL_TSI_FRAC_SECOND);\r\n\t\taddKeyWord( \"S\",\t\t\t\t\tSQL_TSI_SECOND);\r\n\t\taddKeyWord( \"SS\",\t\t\t\t\tSQL_TSI_SECOND);\r\n\t\taddKeyWord( \"SQL_TSI_SECOND\",\t\tSQL_TSI_SECOND);\r\n\t\taddKeyWord( \"MI\",\t\t\t\t\tSQL_TSI_MINUTE);\r\n\t\taddKeyWord( \"N\",\t\t\t\t\tSQL_TSI_MINUTE);\r\n\t\taddKeyWord( \"SQL_TSI_MINUTE\",\t\tSQL_TSI_MINUTE);\r\n\t\taddKeyWord( \"HH\",\t\t\t\t\tSQL_TSI_HOUR);\r\n\t\taddKeyWord( \"SQL_TSI_HOUR\",\t\t\tSQL_TSI_HOUR);\r\n\t\t//addKeyWord( \"D\",\t\t\t\t\tSQL_TSI_DAY);\r\n\t\taddKeyWord( \"DD\",\t\t\t\t\tSQL_TSI_DAY);\r\n\t\taddKeyWord( \"SQL_TSI_DAY\",\t\t\tSQL_TSI_DAY);\r\n\t\taddKeyWord( \"WK\",\t\t\t\t\tSQL_TSI_WEEK);\r\n\t\taddKeyWord( \"WW\",\t\t\t\t\tSQL_TSI_WEEK);\r\n\t\taddKeyWord( \"SQL_TSI_WEEK\",\t\t\tSQL_TSI_WEEK);\r\n\t\taddKeyWord( \"M\",\t\t\t\t\tSQL_TSI_MONTH);\r\n\t\taddKeyWord( \"MM\",\t\t\t\t\tSQL_TSI_MONTH);\r\n\t\taddKeyWord( \"SQL_TSI_MONTH\",\t\tSQL_TSI_MONTH);\r\n\t\taddKeyWord( \"Q\",\t\t\t\t\tSQL_TSI_QUARTER);\r\n\t\taddKeyWord( \"QQ\",\t\t\t\t\tSQL_TSI_QUARTER);\r\n\t\taddKeyWord( \"SQL_TSI_QUARTER\",\t\tSQL_TSI_QUARTER);\r\n\t\taddKeyWord( \"YY\",\t\t\t\t\tSQL_TSI_YEAR);\r\n\t\taddKeyWord( \"YYYY\",\t\t\t\t\tSQL_TSI_YEAR);\r\n\t\taddKeyWord( \"SQL_TSI_YEAR\",\t\t\tSQL_TSI_YEAR);\r\n\t}\r\n\t\r\n    //SYSTEM FUNCTIONS\r\n    //static final int DATABASE   = 1300;\r\n    static final int IFNULL     = 1301; //first system function --> see SSDatabaseMetaData.getSystemFunctions\r\n    static final int USER       = 1302;\r\n    static final int CONVERT    = 1303;\r\n    static final int CAST    \t= 1304;\r\n\tstatic final int IIF    \t= 1305; //last system function --> see SSDatabaseMetaData.getSystemFunctions\r\n    static{\r\n\t\taddKeyWord( \"ISNULL\",      \tIFNULL); //alias for IFNULL, used from MS SQL Server with 2 parameter, from MS Access with 1 parameter\r\n        addKeyWord( \"IFNULL\",       IFNULL);\r\n        addKeyWord( \"USER\",         USER);\r\n        addKeyWord( \"CONVERT\",      CONVERT);\r\n        addKeyWord( \"CAST\",      \tCAST);\r\n\t\taddKeyWord( \"IIF\",      \tIIF);\r\n    }\r\n    \r\n    // data types for escape function CONVERT\r\n\tstatic final int SQL_BIGINT    \t\t= 1350;\r\n\tstatic final int SQL_BINARY    \t\t= 1351;\r\n\tstatic final int SQL_BIT    \t\t= 1352;\r\n\tstatic final int SQL_CHAR    \t\t= 1353;\r\n\tstatic final int SQL_DATE    \t\t= 1354;\r\n\tstatic final int SQL_DECIMAL    \t= 1355;\r\n\tstatic final int SQL_DOUBLE    \t\t= 1356;\r\n\tstatic final int SQL_FLOAT    \t\t= 1357;\r\n\tstatic final int SQL_INTEGER    \t= 1358;\r\n\tstatic final int SQL_LONGVARBINARY \t= 1359;\r\n\tstatic final int SQL_LONGVARCHAR \t= 1360;\r\n\tstatic final int SQL_REAL    \t\t= 1361;\r\n\tstatic final int SQL_SMALLINT    \t= 1362;\r\n\tstatic final int SQL_TIME    \t\t= 1363;\r\n\tstatic final int SQL_TIMESTAMP    \t= 1364;\r\n\tstatic final int SQL_TINYINT    \t= 1365;\r\n\tstatic final int SQL_VARBINARY    \t= 1366;\r\n\tstatic final int SQL_VARCHAR    \t= 1367;\r\n\tstatic{\r\n\t\taddKeyWord( \"SQL_BIGINT\",\t\tSQL_BIGINT);\r\n\t\taddKeyWord( \"SQL_BINARY\",\t\tSQL_BINARY);\r\n\t\taddKeyWord( \"SQL_BIT\",\t\t\tSQL_BIT);\r\n\t\taddKeyWord( \"SQL_CHAR\",\t\t\tSQL_CHAR);\r\n\t\taddKeyWord( \"SQL_DATE\",\t\t\tSQL_DATE);\r\n\t\taddKeyWord( \"SQL_DECIMAL\",\t\tSQL_DECIMAL);\r\n\t\taddKeyWord( \"SQL_DOUBLE\",\t\tSQL_DOUBLE);\r\n\t\taddKeyWord( \"SQL_FLOAT\",\t\tSQL_FLOAT);\r\n\t\taddKeyWord( \"SQL_INTEGER\",\t\tSQL_INTEGER);\r\n\t\taddKeyWord( \"SQL_LONGVARBINARY\",SQL_LONGVARBINARY);\r\n\t\taddKeyWord( \"SQL_LONGVARCHAR\",\tSQL_LONGVARCHAR);\r\n\t\taddKeyWord( \"SQL_REAL\",\t\t\tSQL_REAL);\r\n\t\taddKeyWord( \"SQL_SMALLINT\",\t\tSQL_SMALLINT);\r\n\t\taddKeyWord( \"SQL_TIME\",\t\t\tSQL_TIME);\r\n\t\taddKeyWord( \"SQL_TIMESTAMP\",\tSQL_TIMESTAMP);\r\n\t\taddKeyWord( \"SQL_TINYINT\",\t\tSQL_TINYINT);\r\n\t\taddKeyWord( \"SQL_VARBINARY\",\tSQL_VARBINARY);\r\n\t\taddKeyWord( \"SQL_VARCHAR\",\t\tSQL_VARCHAR);\r\n\t}\r\n\t\r\n    \r\n    //Aggregate Function\r\n    static final int COUNT\t\t= 1400;\r\n\tstatic final int MIN\t\t= 1401;\r\n\tstatic final int MAX\t\t= 1402;\r\n    static final int SUM\t\t= 1403;\r\n\tstatic final int FIRST\t\t= 1404;\r\n\tstatic final int LAST\t\t= 1405;\r\n\tstatic final int AVG\t\t= 1406;\r\n\tstatic{\r\n\t\taddKeyWord( \"COUNT\",       \tCOUNT);\r\n\t\taddKeyWord( \"MIN\",      \tMIN);\r\n\t\taddKeyWord( \"MAX\",      \tMAX);\r\n\t\taddKeyWord( \"SUM\",         \tSUM);\r\n\t\taddKeyWord( \"FIRST\",        FIRST);\r\n\t\taddKeyWord( \"LAST\",         LAST);\r\n\t\taddKeyWord( \"AVG\",          AVG);\r\n\t}\r\n\r\n}\r\n\r\nclass SearchNode{\r\n    int value;\r\n    char letter;\r\n    SearchNode nextLetter; // next character of a keyword\r\n    SearchNode nextEntry;  // next Entry of a character that has the same start sequence\r\n}\r\n\r\n\r\n"},{"path":"/src/smallsql/database/ExpressionFunctionCase.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionCase.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 29.06.2004\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionCase extends Expression/*Function*/ {\r\n\r\n\t/**\r\n\t * @param type\r\n\t */\r\n\tExpressionFunctionCase() {\r\n\t\tsuper(FUNCTION);\r\n\t}\r\n\r\n\r\n\tprivate final Expressions cases   = new Expressions();\r\n\tprivate final Expressions results = new Expressions();\r\n\tprivate Expression elseResult = Expression.NULL;\r\n\tprivate int dataType = -1;\r\n\t\r\n\t\r\n\tfinal void addCase(Expression condition, Expression result){\r\n\t\tcases.add(condition);\r\n\t\tresults.add(result);\r\n\t}\r\n\t\r\n\t\r\n\tfinal void setElseResult(Expression expr){\r\n\t\telseResult = expr;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * The structure is finish\r\n\t */\r\n\tfinal void setEnd(){\r\n\t\tExpression[] params = new Expression[cases.size()*2 + (elseResult!=null ? 1 : 0)];\r\n\t\tint i=0;\r\n\t\tfor(int p=0; p<cases.size(); p++){\r\n\t\t\tparams[i++] = cases  .get( p );\r\n\t\t\tparams[i++] = results.get( p );\r\n\t\t}\r\n\t\tif(i<params.length)\r\n\t\t\tparams[i] = elseResult;\r\n\t\tsuper.setParams(params);\r\n\t}\r\n\t\r\n\tfinal void setParams( Expression[] params ){\r\n\t\tsuper.setParams(params);\r\n\t\tint i = 0;\r\n\t\tfor(int p=0; p<cases.size(); p++){\r\n\t\t\tcases  .set( p, params[i++]);\r\n\t\t\tresults.set( p, params[i++]);\r\n\t\t}\r\n\t\tif(i<params.length)\r\n\t\t\telseResult = params[i];\r\n\t}\r\n\r\n\t\r\n    void setParamAt( Expression param, int idx){\r\n    \tsuper.setParamAt( param, idx );\r\n    \tint p = idx / 2;\r\n    \tif(p>=cases.size()){\r\n    \t\telseResult = param;\r\n    \t\treturn;\r\n    \t}\r\n    \tif(idx % 2 > 0){    \t\t\r\n    \t\tresults.set( p, param );\r\n    \t}else{\r\n    \t\tcases.set( p, param );\r\n    \t}\r\n    }\r\n\r\n\t\r\n\t//================================\r\n\t// Methods of the interface\r\n\t//================================\r\n\t\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.CASE;\r\n\t}\r\n\r\n\r\n\tfinal boolean isNull() throws Exception {\r\n\t\treturn getResult().isNull();\r\n\t}\r\n\r\n\r\n\tfinal boolean getBoolean() throws Exception {\r\n\t\treturn getResult().getBoolean();\r\n\t}\r\n\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\treturn getResult().getInt();\r\n\t}\r\n\r\n\r\n\tfinal long getLong() throws Exception {\r\n\t\treturn getResult().getLong();\r\n\t}\r\n\r\n\r\n\tfinal float getFloat() throws Exception {\r\n\t\treturn getResult().getFloat();\r\n\t}\r\n\r\n\r\n\tfinal double getDouble() throws Exception {\r\n\t\treturn getResult().getDouble();\r\n\t}\r\n\r\n\r\n\tfinal long getMoney() throws Exception {\r\n\t\treturn getResult().getMoney();\r\n\t}\r\n\r\n\r\n\tfinal MutableNumeric getNumeric() throws Exception {\r\n\t\treturn getResult().getNumeric();\r\n\t}\r\n\r\n\r\n\tfinal Object getObject() throws Exception {\r\n\t\treturn getResult().getObject();\r\n\t}\r\n\r\n\r\n\tfinal String getString() throws Exception {\r\n\t\treturn getResult().getString();\r\n\t}\r\n\t\r\n\t\r\n\tfinal byte[] getBytes() throws Exception{\r\n\t\treturn getResult().getBytes();\r\n\t}\r\n\t\r\n\r\n\tfinal int getDataType() {\r\n\t\tif(dataType < 0){\r\n\t\t\tdataType = elseResult.getDataType();\r\n\t\t\tfor(int i=0; i<results.size(); i++){\r\n\t\t\t\tdataType = ExpressionArithmetic.getDataType(dataType, results.get(i).getDataType());\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dataType;\r\n\t}\r\n\t\r\n\r\n\tfinal int getPrecision(){\r\n\t\tint precision = 0;\r\n\t\tfor(int i=results.size()-1; i>=0; i--){\r\n\t\t\tprecision = Math.max(precision, results.get(i).getPrecision());\r\n\t\t}\r\n\t\treturn precision;\r\n\t}\r\n\t\r\n\r\n\tfinal int getScale(){\r\n\t\tint precision = 0;\r\n\t\tfor(int i=results.size()-1; i>=0; i--){\r\n\t\t\tprecision = Math.max(precision, results.get(i).getScale());\r\n\t\t}\r\n\t\treturn precision;\r\n\t}\r\n\t\r\n\r\n\t//================================\r\n\t// private helper functions\r\n\t//================================\r\n\t\r\n\t\r\n\tfinal private Expression getResult() throws Exception{\r\n\t\tfor(int i=0; i<cases.size(); i++){\r\n\t\t\tif(cases.get(i).getBoolean()) return results.get(i);\r\n\t\t}\r\n\t\treturn elseResult;\r\n\t}\r\n\r\n}\r\n"},{"path":"/src/smallsql/junit/TestExceptions.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * TestExceptions.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.junit;\r\n\r\nimport junit.framework.*;\r\nimport java.sql.*;\r\n\r\npublic class TestExceptions extends BasicTestCase {\r\n\r\n    private TestValue testValue;\r\n\tprivate static boolean init;\r\n    \r\n    private static final int SYNTAX = 1;\r\n    private static final int RUNTIME= 2;\r\n\r\n    private static final TestValue[] TESTS = new TestValue[]{\r\n        a( \"01000\",    0, SYNTAX,  \"SELECT 23 FROM\"), // missing table\r\n\t    a( \"01000\",    0, SYNTAX,  \"SELECT c FROM exceptions Group By i\"), //c is not in group by\r\n\t    a( \"01000\",    0, SYNTAX,  \"SELECT first(c) FROM exceptions Group By i ORDER  by c\"), //c is not in group by\r\n\t    a( \"01000\",    0, SYNTAX,  \"SELECT 1 ORDER BY substring('qwert', 2, -3)\"), //invalid length\r\n        a( \"01000\",    0, RUNTIME, \"SELECT abs('abc')\"), //Unsupported datatype conversion\r\n        a( \"01000\",    0, SYNTAX,  \"Create Table anyTable (c char(10)\"), // missing last parenthesis\r\n        a( \"01000\",    0, SYNTAX,  \"SELECT {ts 'abc'}\"), //invalid timestamp\r\n        a( \"01000\",    0, RUNTIME, \"SELECT cast('abc' as timestamp)\"), //invalid timestamp\r\n        a( \"01000\",    0, SYNTAX, \"SELECT 0xas\"), //invalid binary\r\n        a( \"01000\",    0, RUNTIME, \"SELECT cast('1234-56as' as uniqueidentifier)\"), //invalid timestamp\r\n        a( \"01000\",    0, SYNTAX, \"SELECT {ts '2020-04-31 00:00:00.000'}\"), //wrong date\r\n        a( \"01000\",    0, SYNTAX, \"SELECT {ts '2020-02-30 12:30:15.000'}\"), //wrong date\r\n        a( \"01000\",    0, SYNTAX, \"SELECT {d '2021-02-29'}\"), //wrong date\r\n        a( \"01000\",    0, SYNTAX, \"SELECT {d '2021-22-09'}\"), //wrong date\r\n        a( \"01000\",    0, SYNTAX, \"SELECT {t '24:30:15.000'}\"), //wrong time\r\n        a( \"01000\",    0, SYNTAX, \"SELECT {t '12:60:15.000'}\"), //wrong time\r\n        a( \"01000\",    0, SYNTAX, \"SELECT {t '12:30:65.000'}\"), //wrong time\r\n        a( \"01000\",    0, SYNTAX,  \"SELECT * FROM exceptions JOIN\"), // JOIN is a SQL-92 keywords\r\n        a( \"01000\",    0, SYNTAX,  \"select 10/2,\"),\r\n        //FIXME getXXX auf Spalte die nicht existiert\r\n    };\r\n    \r\n\r\n    TestExceptions(TestValue testValue){\r\n        super(testValue.sql);\r\n        this.testValue = testValue;\r\n    }\r\n    \r\n\r\n    private void init() throws Exception{\r\n    \tif(init) return;\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tdropTable( con, \"exceptions\");\r\n\t\tst.execute(\"Create Table exceptions (c varchar(30), i int)\");\r\n\t\tinit = true;\r\n    }\r\n    \r\n    \r\n    public void runTest() throws Exception{\r\n    \tinit();\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n\t\tResultSet rs = null;\r\n        try{\r\n            rs = st.executeQuery( testValue.sql );\r\n        }catch(SQLException sqle){\r\n            assertTrue( \"There should no syntax error:\"+sqle, SYNTAX == testValue.errorType);\r\n            assertSQLException( testValue.sqlstate, testValue.errorCode, sqle );\r\n        }\r\n        if(testValue.errorType == SYNTAX){\r\n            assertNull(\"There should be a syntax error\", rs);\r\n            return;\r\n        }\r\n        try{\r\n            while(rs.next()){\r\n                for(int i=1; i<=rs.getMetaData().getColumnCount(); i++){\r\n                    rs.getObject(i);\r\n                }\r\n            }\r\n            fail(\"There should be a runtime error\");\r\n        }catch(SQLException sqle){\r\n            assertSQLException( testValue.sqlstate, testValue.errorCode, sqle );\r\n        }\r\n    }\r\n    \r\n\r\n    public static Test suite() throws Exception{\r\n        TestSuite theSuite = new TestSuite(\"Exceptions\");\r\n        for(int i=0; i<TESTS.length; i++){\r\n            theSuite.addTest(new TestExceptions( TESTS[i] ) );\r\n        }\r\n        return theSuite;\r\n    }\r\n    \r\n\r\n    private static TestValue a(String sqlstate, int errorCode, int errorType, String sql ){\r\n        TestValue value = new TestValue();\r\n        value.sql       = sql;\r\n        value.sqlstate  = sqlstate;\r\n        value.errorCode = errorCode;\r\n        value.errorType = errorType;\r\n        return value;\r\n    }\r\n    \r\n\r\n    private static class TestValue{\r\n        String sql;\r\n        String sqlstate;\r\n        int errorCode;\r\n        int errorType;\r\n    }\r\n\r\n}"},{"path":"/src/smallsql/database/ExpressionFunctionDayOfMonth.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionDayOfMonth.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 16.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionDayOfMonth extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.DAYOFMONTH;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.day;\r\n\t}\r\n\r\n}\r\n"},{"path":"/src/smallsql/database/SSResultSet.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2009, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * SSResultSet.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\nimport java.sql.*;\r\nimport java.math.*;\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.InputStream;\r\nimport java.io.Reader;\r\nimport java.util.Map;\r\nimport java.util.Calendar;\r\nimport java.net.URL;\r\nimport smallsql.database.language.Language;\r\n\r\npublic class SSResultSet implements ResultSet {\r\n\r\n    SSResultSetMetaData metaData = new SSResultSetMetaData();\r\n    private CommandSelect cmd;\r\n    private boolean wasNull;\r\n    SSStatement st;\r\n    private boolean isUpdatable;\r\n    private boolean isInsertRow;\r\n    private ExpressionValue[] values;\r\n    private int fetchDirection;\r\n    private int fetchSize;\r\n\r\n    SSResultSet( SSStatement st, CommandSelect cmd ){\r\n        this.st = st;\r\n        metaData.columns = cmd.columnExpressions;\r\n        this.cmd = cmd;\r\n\t\tisUpdatable = st != null && st.rsConcurrency == CONCUR_UPDATABLE && !cmd.isGroupResult();\r\n    }\r\n\r\n/*==============================================================================\r\n\r\n    Public Interface\r\n\r\n==============================================================================*/\r\n\r\n    public void close(){\r\n    \tst.con.log.println(\"ResultSet.close\");\r\n        cmd = null;\r\n    }\r\n    \r\n    \r\n    public boolean wasNull(){\r\n        return wasNull;\r\n    }\r\n    \r\n    \r\n    public String getString(int columnIndex) throws SQLException {\r\n        try{\r\n            Object obj = getObject(columnIndex);\r\n            \r\n            if(obj instanceof String || obj == null){\r\n                return (String)obj;\r\n            }\r\n            if(obj instanceof byte[]){\r\n                // The Display Value of a binary Value is different as the default in SQL \r\n                return \"0x\" + Utils.bytes2hex( (byte[])obj );\r\n            }\r\n            // all other values\r\n            return getValue(columnIndex).getString();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public boolean getBoolean(int columnIndex) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getBoolean();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public byte getByte(int columnIndex) throws SQLException {\r\n        return (byte)getInt( columnIndex );\r\n    }\r\n    public short getShort(int columnIndex) throws SQLException {\r\n        return (short)getInt( columnIndex );\r\n    }\r\n    public int getInt(int columnIndex) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getInt();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public long getLong(int columnIndex) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public float getFloat(int columnIndex) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getFloat();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public double getDouble(int columnIndex) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            return expr.getDouble();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {\r\n        try{\r\n            MutableNumeric obj = getValue(columnIndex).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal(scale);\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public byte[] getBytes(int columnIndex) throws SQLException {\r\n        try{\r\n            byte[] obj = getValue(columnIndex).getBytes();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public Date getDate(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    \r\n    \r\n    public Time getTime(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public Timestamp getTimestamp(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    \r\n    \r\n    public InputStream getAsciiStream(int columnIndex) throws SQLException {\r\n        /**@todo: Implement this java.sql.ResultSet.getAsciiStream method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"getAsciiStream\");\r\n    }\r\n    \r\n    \r\n    public InputStream getUnicodeStream(int columnIndex) throws SQLException {\r\n        /**@todo: Implement this java.sql.ResultSet.getUnicodeStream method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"getUnicodeStream\");\r\n    }\r\n    \r\n    \r\n    public InputStream getBinaryStream(int columnIndex) throws SQLException {\r\n        return new ByteArrayInputStream(getBytes(columnIndex));\r\n    }\r\n    \r\n    \r\n    public String getString(String columnName) throws SQLException {\r\n        return getString( findColumn( columnName ) );\r\n    }\r\n    public boolean getBoolean(String columnName) throws SQLException {\r\n        return getBoolean( findColumn( columnName ) );\r\n    }\r\n    public byte getByte(String columnName) throws SQLException {\r\n        return getByte( findColumn( columnName ) );\r\n    }\r\n    public short getShort(String columnName) throws SQLException {\r\n        return getShort( findColumn( columnName ) );\r\n    }\r\n    public int getInt(String columnName) throws SQLException {\r\n        return getInt( findColumn( columnName ) );\r\n    }\r\n    public long getLong(String columnName) throws SQLException {\r\n        return getLong( findColumn( columnName ) );\r\n    }\r\n    public float getFloat(String columnName) throws SQLException {\r\n        return getFloat( findColumn( columnName ) );\r\n    }\r\n    public double getDouble(String columnName) throws SQLException {\r\n        return getDouble( findColumn( columnName ) );\r\n    }\r\n    public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException {\r\n        return getBigDecimal( findColumn( columnName ), scale );\r\n    }\r\n    public byte[] getBytes(String columnName) throws SQLException {\r\n        return getBytes( findColumn( columnName ) );\r\n    }\r\n    public Date getDate(String columnName) throws SQLException {\r\n        return getDate( findColumn( columnName ) );\r\n    }\r\n    public Time getTime(String columnName) throws SQLException {\r\n        return getTime( findColumn( columnName ) );\r\n    }\r\n    public Timestamp getTimestamp(String columnName) throws SQLException {\r\n        return getTimestamp( findColumn( columnName ) );\r\n    }\r\n    public InputStream getAsciiStream(String columnName) throws SQLException {\r\n        return getAsciiStream( findColumn( columnName ) );\r\n    }\r\n    public InputStream getUnicodeStream(String columnName) throws SQLException {\r\n        return getUnicodeStream( findColumn( columnName ) );\r\n    }\r\n    public InputStream getBinaryStream(String columnName) throws SQLException {\r\n        return getBinaryStream( findColumn( columnName ) );\r\n    }\r\n    \r\n    \r\n    public SQLWarning getWarnings(){\r\n        return null;\r\n    }\r\n    \r\n    \r\n    public void clearWarnings(){\r\n        //TODO support for Warnings\r\n    }\r\n    \r\n    \r\n    public String getCursorName(){\r\n        return null;\r\n    }\r\n    \r\n    \r\n    public ResultSetMetaData getMetaData(){\r\n        return metaData;\r\n    }\r\n    \r\n    \r\n    public Object getObject(int columnIndex) throws SQLException {\r\n        try{\r\n            Object obj = getValue(columnIndex).getApiObject();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public Object getObject(String columnName) throws SQLException {\r\n        return getObject( findColumn( columnName ) );\r\n    }\r\n    \r\n    \r\n    public int findColumn(String columnName) throws SQLException {\r\n    \treturn getCmd().findColumn(columnName) + 1;\r\n    }\r\n    \r\n\r\n    public Reader getCharacterStream(int columnIndex) throws SQLException {\r\n        /**@todo: Implement this java.sql.ResultSet.getCharacterStream method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"getCharacterStream\");\r\n    }\r\n    \r\n    \r\n    public Reader getCharacterStream(String columnName) throws SQLException {\r\n        return getCharacterStream( findColumn( columnName ) );\r\n    }\r\n    \r\n    \r\n    public BigDecimal getBigDecimal(int columnIndex) throws SQLException {\r\n        try{\r\n            MutableNumeric obj = getValue(columnIndex).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public BigDecimal getBigDecimal(String columnName) throws SQLException {\r\n        return getBigDecimal( findColumn( columnName ) );\r\n    }\r\n    public boolean isBeforeFirst() throws SQLException {\r\n\t\treturn getCmd().isBeforeFirst();\r\n    }\r\n    \r\n    \r\n    public boolean isAfterLast() throws SQLException {\r\n        try{\r\n            return getCmd().isAfterLast();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException(e);\r\n        }\r\n    }\r\n    \r\n    \r\n    public boolean isFirst() throws SQLException {\r\n    \treturn getCmd().isFirst();\r\n    }\r\n    \r\n    \r\n    public boolean isLast() throws SQLException {\r\n    \ttry{\r\n    \t\treturn getCmd().isLast();\r\n\t\t}catch(Exception e){\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n    }\r\n    \r\n    \r\n    public void beforeFirst() throws SQLException {\r\n    \ttry{\r\n            moveToCurrentRow();\r\n    \t\tgetCmd().beforeFirst();\r\n    \t}catch(Exception e){\r\n    \t\tthrow SmallSQLException.createFromException(e);\r\n    \t}\r\n    }\r\n    \r\n    \r\n    public boolean first() throws SQLException {\r\n\t\ttry{\r\n\t\t\tif(st.rsType == ResultSet.TYPE_FORWARD_ONLY) throw SmallSQLException.create(Language.RSET_FWDONLY);\r\n            moveToCurrentRow();\r\n\t\t\treturn getCmd().first();\r\n\t\t}catch(Exception e){\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n    }\r\n    \r\n    \r\n\tpublic boolean previous() throws SQLException {\r\n\t\ttry{\r\n            moveToCurrentRow();\r\n\t\t\treturn getCmd().previous();\r\n\t\t}catch(Exception e){\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n\t}\r\n    \r\n    \r\n\tpublic boolean next() throws SQLException {\r\n\t\ttry{\r\n            moveToCurrentRow();\r\n            return getCmd().next();\r\n\t\t}catch(Exception e){\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n    public boolean last() throws SQLException {\r\n\t\ttry{\r\n            moveToCurrentRow();\r\n            return getCmd().last();\r\n\t\t}catch(Exception e){\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n    }\r\n    \r\n    \r\n\tpublic void afterLast() throws SQLException {\r\n\t\ttry{\r\n\t\t\tif(st.rsType == ResultSet.TYPE_FORWARD_ONLY) throw SmallSQLException.create(Language.RSET_FWDONLY);\r\n            moveToCurrentRow();\r\n            getCmd().afterLast();\r\n\t\t}catch(Exception e){\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n\t}\r\n    \r\n    \r\n    public boolean absolute(int row) throws SQLException {\r\n\t\ttry{\r\n            moveToCurrentRow();\r\n\t\t\treturn getCmd().absolute(row);\r\n\t\t}catch(Exception e){\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n    }\r\n    \r\n    \r\n    public boolean relative(int rows) throws SQLException {\r\n\t\ttry{\r\n            moveToCurrentRow();\r\n\t\t\treturn getCmd().relative(rows);\r\n\t\t}catch(Exception e){\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n    }\r\n    \r\n    \r\n\tpublic int getRow() throws SQLException {\r\n\t\ttry{\r\n\t\t\treturn getCmd().getRow();\r\n\t\t}catch(Exception e){\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n\t}\r\n    \r\n    \r\n    public void setFetchDirection(int direction){\r\n        fetchDirection = direction;\r\n    }\r\n    \r\n    \r\n    public int getFetchDirection(){\r\n        return fetchDirection;\r\n    }\r\n    \r\n    \r\n    public void setFetchSize(int rows){\r\n        fetchSize = rows;\r\n    }\r\n    \r\n    \r\n    public int getFetchSize(){\r\n        return fetchSize;\r\n    }\r\n    \r\n    \r\n    public int getType() throws SQLException {\r\n    \treturn getCmd().from.isScrollable() ? ResultSet.TYPE_SCROLL_SENSITIVE : ResultSet.TYPE_FORWARD_ONLY;\r\n    }\r\n    \r\n    \r\n    public int getConcurrency(){\r\n    \treturn isUpdatable ? ResultSet.CONCUR_UPDATABLE : ResultSet.CONCUR_READ_ONLY;\r\n    }\r\n    \r\n    \r\n    public boolean rowUpdated(){\r\n    \treturn false;\r\n    }\r\n    \r\n    \r\n    public boolean rowInserted() throws SQLException {\r\n    \treturn getCmd().from.rowInserted();\r\n    }\r\n    \r\n    \r\n    public boolean rowDeleted() throws SQLException {\r\n    \treturn getCmd().from.rowDeleted();\r\n    }\r\n    \r\n    \r\n    public void updateNull(int columnIndex) throws SQLException {\r\n\t\tupdateValue( columnIndex, null, SQLTokenizer.NULL);\r\n    }\r\n    public void updateBoolean(int columnIndex, boolean x) throws SQLException {\r\n\t\tupdateValue( columnIndex, x ? Boolean.TRUE : Boolean.FALSE, SQLTokenizer.BOOLEAN);\r\n    }\r\n    public void updateByte(int columnIndex, byte x) throws SQLException {\r\n\t\tupdateValue( columnIndex, Utils.getShort(x), SQLTokenizer.TINYINT);\r\n    }\r\n    public void updateShort(int columnIndex, short x) throws SQLException {\r\n\t\tupdateValue( columnIndex, Utils.getShort(x), SQLTokenizer.SMALLINT);\r\n    }\r\n    public void updateInt(int columnIndex, int x) throws SQLException {\r\n\t\tupdateValue( columnIndex, Utils.getInteger(x), SQLTokenizer.INT);\r\n    }\r\n    public void updateLong(int columnIndex, long x) throws SQLException {\r\n\t\tupdateValue( columnIndex, new Long(x), SQLTokenizer.BIGINT);\r\n    }\r\n    public void updateFloat(int columnIndex, float x) throws SQLException {\r\n\t\tupdateValue( columnIndex, new Float(x), SQLTokenizer.REAL);\r\n    }\r\n    public void updateDouble(int columnIndex, double x) throws SQLException {\r\n\t\tupdateValue( columnIndex, new Double(x), SQLTokenizer.DOUBLE);\r\n    }\r\n    public void updateBigDecimal(int columnIndex, BigDecimal x) throws SQLException {\r\n\t\tupdateValue( columnIndex, x, SQLTokenizer.DECIMAL);\r\n    }\r\n    public void updateString(int columnIndex, String x) throws SQLException {\r\n\t\tupdateValue( columnIndex, x, SQLTokenizer.VARCHAR);\r\n    }\r\n    public void updateBytes(int columnIndex, byte[] x) throws SQLException {\r\n\t\tupdateValue( columnIndex, x, SQLTokenizer.VARBINARY);\r\n    }\r\n    public void updateDate(int columnIndex, Date x) throws SQLException {\r\n\t\tupdateValue( columnIndex, DateTime.valueOf(x), SQLTokenizer.DATE);\r\n    }\r\n    public void updateTime(int columnIndex, Time x) throws SQLException {\r\n\t\tupdateValue( columnIndex, DateTime.valueOf(x), SQLTokenizer.TIME);\r\n    }\r\n    public void updateTimestamp(int columnIndex, Timestamp x) throws SQLException {\r\n\t\tupdateValue( columnIndex, DateTime.valueOf(x), SQLTokenizer.TIMESTAMP);\r\n    }\r\n    public void updateAsciiStream(int columnIndex, InputStream x, int length) throws SQLException {\r\n\t\tupdateValue( columnIndex, x, SQLTokenizer.LONGVARCHAR, length);\r\n    }\r\n    public void updateBinaryStream(int columnIndex, InputStream x, int length) throws SQLException {\r\n\t\tupdateValue( columnIndex, x, SQLTokenizer.LONGVARBINARY, length);\r\n    }\r\n    \r\n    \r\n    public void updateCharacterStream(int columnIndex, Reader x, int length) throws SQLException {\r\n        /**@todo: Implement this java.sql.ResultSet.updateCharacterStream method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Reader object\");\r\n    }\r\n    \r\n    \r\n    public void updateObject(int columnIndex, Object x, int scale) throws SQLException {\r\n    \t//TODO scale to consider\r\n\t\tupdateValue( columnIndex, x, -1);\r\n    }\r\n    \r\n    \r\n    public void updateObject(int columnIndex, Object x) throws SQLException {\r\n    \tupdateValue( columnIndex, x, -1);\r\n    }\r\n    public void updateNull(String columnName) throws SQLException {\r\n        updateNull( findColumn( columnName ) );\r\n    }\r\n    public void updateBoolean(String columnName, boolean x) throws SQLException {\r\n        updateBoolean( findColumn( columnName ), x );\r\n    }\r\n    public void updateByte(String columnName, byte x) throws SQLException {\r\n        updateByte( findColumn( columnName ), x );\r\n    }\r\n    public void updateShort(String columnName, short x) throws SQLException {\r\n        updateShort( findColumn( columnName ), x );\r\n    }\r\n    public void updateInt(String columnName, int x) throws SQLException {\r\n        updateInt( findColumn( columnName ), x );\r\n    }\r\n    public void updateLong(String columnName, long x) throws SQLException {\r\n        updateLong( findColumn( columnName ), x );\r\n    }\r\n    public void updateFloat(String columnName, float x) throws SQLException {\r\n        updateFloat( findColumn( columnName ), x );\r\n    }\r\n    public void updateDouble(String columnName, double x) throws SQLException {\r\n        updateDouble( findColumn( columnName ), x );\r\n    }\r\n    public void updateBigDecimal(String columnName, BigDecimal x) throws SQLException {\r\n        updateBigDecimal( findColumn( columnName ), x );\r\n    }\r\n    public void updateString(String columnName, String x) throws SQLException {\r\n        updateString( findColumn( columnName ), x );\r\n    }\r\n    public void updateBytes(String columnName, byte[] x) throws SQLException {\r\n        updateBytes( findColumn( columnName ), x );\r\n    }\r\n    public void updateDate(String columnName, Date x) throws SQLException {\r\n        updateDate( findColumn( columnName ), x );\r\n    }\r\n    public void updateTime(String columnName, Time x) throws SQLException {\r\n        updateTime( findColumn( columnName ), x );\r\n    }\r\n    public void updateTimestamp(String columnName, Timestamp x) throws SQLException {\r\n        updateTimestamp( findColumn( columnName ), x );\r\n    }\r\n    public void updateAsciiStream(String columnName, InputStream x, int length) throws SQLException {\r\n        updateAsciiStream( findColumn( columnName ), x, length );\r\n    }\r\n    public void updateBinaryStream(String columnName, InputStream x, int length) throws SQLException {\r\n        updateBinaryStream( findColumn( columnName ), x, length );\r\n    }\r\n    public void updateCharacterStream(String columnName, Reader x, int length) throws SQLException {\r\n        updateCharacterStream( findColumn( columnName ), x, length );\r\n    }\r\n    public void updateObject(String columnName, Object x, int scale) throws SQLException {\r\n        updateObject( findColumn( columnName ), x, scale );\r\n    }\r\n    public void updateObject(String columnName, Object x) throws SQLException {\r\n        updateObject( findColumn( columnName ), x );\r\n    }\r\n    \r\n    public void insertRow() throws SQLException {\r\n\t\tst.con.log.println(\"insertRow()\");\r\n        if(!isInsertRow){\r\n            throw SmallSQLException.create(Language.RSET_NOT_INSERT_ROW);\r\n        }\r\n\t\tgetCmd().insertRow( st.con, values);\r\n        clearRowBuffer();\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Test if it on the insert row.\r\n     * @throws SQLException if on the insert row\r\n     */\r\n    private void testNotInsertRow() throws SQLException{\r\n        if(isInsertRow){\r\n            throw SmallSQLException.create(Language.RSET_ON_INSERT_ROW);\r\n        }\r\n    }\r\n    \r\n    public void updateRow() throws SQLException {\r\n        try {\r\n        \tif(values == null){\r\n                // no changes then also no update needed\r\n                return;\r\n            }\r\n       \t\tst.con.log.println(\"updateRow()\");\r\n            testNotInsertRow();\r\n            final CommandSelect command = getCmd();\r\n            command.updateRow( st.con, values);\r\n            command.relative(0);  //refresh the row\r\n            clearRowBuffer();\r\n        } catch (Exception e) {\r\n            throw SmallSQLException.createFromException(e);\r\n        }\r\n    }\r\n    \r\n    \r\n    public void deleteRow() throws SQLException {\r\n\t\tst.con.log.println(\"deleteRow()\");\r\n        testNotInsertRow();\r\n    \tgetCmd().deleteRow(st.con);\r\n        clearRowBuffer();\r\n    }\r\n    public void refreshRow() throws SQLException {\r\n        testNotInsertRow();\r\n        relative(0);\r\n    }\r\n    \r\n\r\n    public void cancelRowUpdates() throws SQLException{\r\n        testNotInsertRow();\r\n        clearRowBuffer();\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Clear the update row or insert row buffer.\r\n     */\r\n    private void clearRowBuffer(){\r\n        if(values != null){\r\n            for(int i=values.length-1; i>=0; i--){\r\n                values[i].clear();\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    public void moveToInsertRow() throws SQLException {\r\n    \tif(isUpdatable){\r\n    \t\tisInsertRow = true;\r\n            clearRowBuffer();\r\n    \t}else{\r\n            throw SmallSQLException.create(Language.RSET_READONLY);\r\n    \t}\r\n    }\r\n    \r\n    \r\n    public void moveToCurrentRow() throws SQLException{\r\n\t\tisInsertRow = false;\r\n        clearRowBuffer();\r\n        if(values == null){\r\n            //init the values array as insert row buffer \r\n            getUpdateValue(1);\r\n        }\r\n    }\r\n    \r\n    \r\n    public Statement getStatement() {\r\n        return st;\r\n    }\r\n    \r\n    \r\n    public Object getObject(int i, Map map) throws SQLException {\r\n        return getObject( i );\r\n    }\r\n    \r\n    \r\n    public Ref getRef(int i) throws SQLException {\r\n        /**@todo: Implement this java.sql.ResultSet.getRef method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Ref object\");\r\n    }\r\n    \r\n    \r\n    public Blob getBlob(int i) throws SQLException {\r\n        /**@todo: Implement this java.sql.ResultSet.getBlob method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Blob object\");\r\n    }\r\n    \r\n    \r\n    public Clob getClob(int i) throws SQLException {\r\n        /**@todo: Implement this java.sql.ResultSet.getClob method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Clob object\");\r\n    }\r\n    \r\n    \r\n    public Array getArray(int i) throws SQLException {\r\n        /**@todo: Implement this java.sql.ResultSet.getArray method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Array\");\r\n    }\r\n    \r\n    \r\n    public Object getObject(String columnName, Map map) throws SQLException {\r\n        return getObject( columnName );\r\n    }\r\n    public Ref getRef(String columnName) throws SQLException {\r\n        return getRef( findColumn( columnName ) );\r\n    }\r\n    public Blob getBlob(String columnName) throws SQLException {\r\n        return getBlob( findColumn( columnName ) );\r\n    }\r\n    public Clob getClob(String columnName) throws SQLException {\r\n        return getClob( findColumn( columnName ) );\r\n    }\r\n    public Array getArray(String columnName) throws SQLException {\r\n        return getArray( findColumn( columnName ) );\r\n    }\r\n    \r\n    \r\n    public Date getDate(int columnIndex, Calendar cal) throws SQLException {\r\n        try{\r\n            if(cal == null){\r\n                return getDate(columnIndex);\r\n            }\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return new Date(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    \r\n    \r\n    public Date getDate(String columnName, Calendar cal) throws SQLException {\r\n        return getDate( findColumn( columnName ), cal );\r\n    }\r\n    \r\n    \r\n    public Time getTime(int columnIndex, Calendar cal) throws SQLException {\r\n        try{\r\n            if(cal == null){\r\n                return getTime(columnIndex);\r\n            }\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return new Time(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    \r\n    \r\n    public Time getTime(String columnName, Calendar cal) throws SQLException {\r\n        return getTime( findColumn( columnName ), cal );\r\n    }\r\n    \r\n    \r\n    public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException {\r\n        try{\r\n            if(cal == null){\r\n                return getTimestamp(columnIndex);\r\n            }\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return new Timestamp(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    \r\n    \r\n    public Timestamp getTimestamp(String columnName, Calendar cal) throws SQLException {\r\n        return getTimestamp( findColumn( columnName ), cal );\r\n    }\r\n    \r\n    \r\n    public URL getURL(int columnIndex) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return new URL( expr.getString() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    \r\n    \r\n    public URL getURL(String columnName) throws SQLException {\r\n        return getURL( findColumn( columnName ) );\r\n    }\r\n    \r\n    \r\n    public void updateRef(int columnIndex, Ref x) throws SQLException {\r\n        /**@todo: Implement this java.sql.ResultSet.updateRef method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Ref\");\r\n    }\r\n    \r\n    \r\n    public void updateRef(String columnName, Ref x) throws SQLException {\r\n        updateRef( findColumn( columnName ), x );\r\n    }\r\n    \r\n    \r\n    public void updateBlob(int columnIndex, Blob x) throws SQLException {\r\n        /**@todo: Implement this java.sql.ResultSet.updateBlob method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Blob\");\r\n    }\r\n    \r\n    \r\n    public void updateBlob(String columnName, Blob x) throws SQLException {\r\n        updateBlob( findColumn( columnName ), x );\r\n    }\r\n    \r\n    \r\n    public void updateClob(int columnIndex, Clob x) throws SQLException {\r\n        /**@todo: Implement this java.sql.ResultSet.updateClob method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Clob\");\r\n    }\r\n    \r\n    \r\n    public void updateClob(String columnName, Clob x) throws SQLException {\r\n        updateClob( findColumn( columnName ), x );\r\n    }\r\n    \r\n    \r\n    public void updateArray(int columnIndex, Array x) throws SQLException {\r\n        /**@todo: Implement this java.sql.ResultSet.updateArray method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Array\");\r\n    }\r\n    \r\n    \r\n    public void updateArray(String columnName, Array x) throws SQLException {\r\n        updateArray( findColumn( columnName ), x );\r\n    }\r\n    \r\n\t/*========================================================\r\n\r\n\tprivate methods\r\n\r\n\t=========================================================*/\r\n\r\n    /**\r\n     * Get the expression of a column. \r\n     * This expression can be used to request a value of the current row.\r\n     */\r\n    final private Expression getValue(int columnIndex) throws SQLException{\r\n        if(values != null){\r\n            ExpressionValue value = values[ metaData.getColumnIdx( columnIndex ) ];\r\n            if(!value.isEmpty() || isInsertRow){ \r\n                return value;\r\n            }\r\n        }\r\n        return metaData.getColumnExpression(columnIndex);\r\n    }\r\n    \r\n\r\n\tfinal private ExpressionValue getUpdateValue(int columnIndex) throws SQLException{\r\n\t\tif(values == null){\r\n\t\t\tint count = metaData.getColumnCount();\r\n\t\t\tvalues = new ExpressionValue[count];\r\n\t\t\twhile(count-- > 0){\r\n\t\t\t\tvalues[count] = new ExpressionValue();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn values[ metaData.getColumnIdx( columnIndex ) ];\r\n\t}\r\n\t\r\n    \r\n    final private void updateValue(int columnIndex, Object x, int dataType) throws SQLException{\r\n\t\tgetUpdateValue( columnIndex ).set( x, dataType );\r\n\t\tif(st.con.log.isLogging()){\r\n\t\t\t\r\n\t\t\tst.con.log.println(\"parameter '\"+metaData.getColumnName(columnIndex)+\"' = \"+x+\"; type=\"+dataType);\r\n\t\t}\r\n    }\r\n    \r\n    \r\n\tfinal private void updateValue(int columnIndex, Object x, int dataType, int length) throws SQLException{\r\n\t\tgetUpdateValue( columnIndex ).set( x, dataType, length );\r\n\t\tif(st.con.log.isLogging()){\r\n\t\t\tst.con.log.println(\"parameter '\"+metaData.getColumnName(columnIndex)+\"' = \"+x+\"; type=\"+dataType+\"; length=\"+length);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfinal private CommandSelect getCmd() throws SQLException {\r\n\t\tif(cmd == null){\r\n            throw SmallSQLException.create(Language.RSET_CLOSED);\r\n        }\r\n        st.con.testClosedConnection();\r\n\t\treturn cmd;\r\n\t}\r\n}"},{"path":"/src/smallsql/database/LongTreeList.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * LongTreeList.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\nimport java.sql.*;\r\nimport smallsql.database.language.Language;\r\n\r\n/**\r\n * This class is used to save the row positions (RowID) list for a not unique index.\r\n *\r\n * The values for RowID are long (8 byte). The value differ around the row size. The\r\n * minimum row size is 30 byte. We calculate a medium row size of 100 bytes.\r\n *   \r\n * We used a tree to compress and sort the list. We save the long value in 4 levels\r\n * a 2 bytes. The first tree levels has a pointer to the next level. The end point \r\n * of a level is the value 0. A value of 0 at first in a level means the value 0. \r\n * The end point can only occur at second or later position and not on first position. \r\n * \r\n * \r\n * @author Volker Berlin\r\n *\r\n */\r\nfinal class LongTreeList {\r\n\t\r\n\t\r\n\t/*void list(){\r\n\t\tSystem.out.println(\"=========== size:\"+size);\r\n\t\tLongTreeListEnum listEnum = new LongTreeListEnum();\r\n\t\tlistEnum.reset();\r\n\t\t\r\n\t\tlong value;\r\n\t\tdo{\r\n\t\t\tvalue = getNext(listEnum);\r\n\t\t\tSystem.out.println(value);\r\n\t\t}while(value >0);\r\n\t\tdo{\r\n\t\t\tvalue = getPrevious(listEnum);\r\n\t\t\tSystem.out.println(value);\r\n\t\t}while(value >0);\r\n\t}\r\n\tstatic public void main1(String[] argc) throws Exception{\r\n\t\tLongTreeList list = new LongTreeList();\r\n\t\tlist.add( Long.MAX_VALUE/2 );\r\n\t\tlist.list();\r\n\t\tlist.add( Long.MAX_VALUE );\r\n\t\tlist.list();\r\n\t\tlist.remove( Long.MAX_VALUE/2 );\r\n\t\tlist.list();\r\n\t\tlist.add( 12345L );\r\n\t\tlist.list();\r\n\t\tlist.add( 123L );\r\n\t\tlist.list();\r\n\t\tlist.add( 12345678L );\r\n\t\tlist.list();\r\n\t\tlist.add( 12L );\r\n\t\tlist.list();\r\n\t\tlist.add( 1234L );\r\n\t\tlist.list();\r\n\t\tlist.add( 123456L );\r\n\t\tlist.list();\r\n\t\tlist.add( 1234567L );\r\n\t\tlist.list();\r\n\t\tlist.add( 123456789L );\r\n\t\tlist.list();\r\n\t\tlist.add( 123456790L );\t\t\r\n\t\tlist.list();\r\n\t\tlist.add( 1L );\r\n\t\tlist.list();\r\n\t}\r\n\r\n\t\r\n\tstatic public void main(String[] argc) throws Exception{\r\n\t\tjava.util.Random random = new java.util.Random();\r\n\t\tLongTreeList treeList = new LongTreeList();\r\n\t\tjava.util.ArrayList plainList = new java.util.ArrayList(); \r\n\t\tLongTreeListEnum listEnum = new LongTreeListEnum();\r\n\t\t\r\n\t\t\r\n\t\tfor(int i=1; i<1000; i++){\r\n\t\t\tlong value;\r\n\t\t\t\r\n\t\t\tvalue = Math.abs(random.nextLong()) >> 6;\r\n\t\t\t//System.out.println(value+\"  \"+treeList.size);\r\n\t\t\ttreeList.add(value);\r\n\t\t\tplainList.add(new Long(value));\r\n\t\t\r\n\t\t\ttest(treeList, listEnum, plainList);\r\n\t\t\t\r\n\t\t\tif( i % 2 == 0){\r\n\t\t\t\tint idx = Math.abs(random.nextInt()) % plainList.size();\r\n\t\t\t\tvalue = ((Long)plainList.get( idx )).longValue();\r\n\t\t\t\ttreeList.remove(value);\r\n\t\t\t\tplainList.remove(idx);\r\n\t\t\t\t\r\n\t\t\t\ttest(treeList, listEnum, plainList);\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tstatic void test(LongTreeList treeList, LongTreeListEnum listEnum, java.util.ArrayList plainList){ \r\n\t\t\tlistEnum.reset();\r\n\t\t\tint size = plainList.size();\r\n\t\t\tint count = 0;\r\n\t\t\tlong value2, value = -1;\r\n\t\t\tdo{\r\n\t\t\t\tvalue2 = value;\r\n\t\t\t\tvalue = treeList.getNext(listEnum);\t\r\n\t\t\t\tif(value <0)break;\r\n\t\t\t\tif(value <= value2) throw new RuntimeException(\"wrong sort order:\"+value+\" and:\"+value2);\r\n\t\t\t\tif(!plainList.contains(new Long(value))) throw new RuntimeException(\"wrong value:\"+value);\r\n\t\t\t\tcount++;\r\n\t\t\t}while(true);\r\n\t\t\tif(count != size) throw new RuntimeException(\"soll count:\"+size+\"   ist count:\"+count);\r\n\t\t\t\r\n\t\t\tvalue = Long.MAX_VALUE;\r\n\t\t\tdo{\r\n\t\t\t\tvalue2 = value;\r\n\t\t\t\tvalue = treeList.getPrevious(listEnum);\r\n\t\t\t\tif(value <0)break;\r\n\t\t\t\tif(value >= value2) throw new RuntimeException(\"wrong sort order:\"+value+\" and:\"+value2);\r\n\t\t\t\tif(!plainList.contains(new Long(value))) throw new RuntimeException(\"wrong value:\"+value);\r\n\t\t\t\tcount--;\r\n\t\t\t}while(true);\r\n\t\t\tif(count != 0) throw new RuntimeException(\"Prevous count is wrong:\"+count);\r\n\t}*/\r\n\t\r\n\r\n\tprivate byte[] data;\r\n\tprivate int size;\r\n\tprivate int offset;\r\n\tstatic final private int pointerSize = 3; //if change then also in resize()\r\n\t\r\n\t/**\r\n\t * Create a empty LongTreeList.\r\n\t *\r\n\t */\r\n\tLongTreeList(){\r\n\t\tdata = new byte[25];\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create a LongTreeList with a first value.\r\n\t * @param value\r\n\t */\r\n\tLongTreeList(long value) throws SQLException{\r\n\t\tthis();\r\n\t\tadd(value);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Restore a LongTreeList from a MemoryStream.\r\n\t */\r\n\tLongTreeList(StoreImpl input){\r\n\t\tint readSize = input.readInt();\r\n\t\tdata     = input.readBytes(readSize);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Save this list to a serial stream. This can be used to save it on a hard disk.\r\n\t * @param output\r\n\t */\r\n\tfinal void save(StoreImpl output){\r\n\t\toutput.writeInt(size);\r\n\t\toutput.writeBytes(data, 0, size);\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * Add a value to this list.\r\n\t * @param value\r\n\t * @throws SQLException\r\n\t */\r\n\tfinal void add(long value) throws SQLException{\r\n\t\toffset = 0;\r\n\t\tif(size == 0){\r\n\t\t\twriteShort( (int)(value >> 48) );\r\n\t\t\twritePointer ( offset+pointerSize+2 );\r\n\t\t\twriteShort( 0 );\r\n\t\t\twriteShort( (int)(value >> 32) );\r\n\t\t\twritePointer ( offset+pointerSize+2 );\r\n\t\t\twriteShort( 0 );\r\n\t\t\twriteShort( (int)(value >> 16) );\r\n\t\t\twritePointer ( offset+pointerSize+2 );\r\n\t\t\twriteShort( 0 );\r\n\t\t\twriteShort( (int)(value) );\r\n\t\t\twriteShort( 0 );\r\n\t\t\tsize = offset;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint shift = 48;\r\n\t\tboolean firstNode = (size > 2); // if this the first node in this tree level (0 can be the first node and are the end of the level)\r\n\t\twhile(shift>=0){\r\n\t\t\tint octet = (int)(value >> shift) & 0xFFFF;\r\n\t\t\twhile(true){\r\n\t\t\t\tint nextEntry = getUnsignedShort();\r\n\t\t\t\tif(nextEntry == octet){\r\n\t\t\t\t\tif(shift == 0) return; //value exist already, this case should not occur\r\n\t\t\t\t\toffset = getPointer();\r\n\t\t\t\t\tfirstNode = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif((nextEntry == 0 && !firstNode) || nextEntry > octet){\r\n\t\t\t\t\toffset -= 2;\r\n\t\t\t\t\twhile(true){\r\n\t\t\t\t\t\tif(shift != 0){\r\n\t\t\t\t\t\t\toffset = insertNode(octet);\t\t\t\t\t\t\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tinsertNodeLastLevel(octet);\t\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tshift -= 16;\r\n\t\t\t\t\t\toctet = (int)(value >> shift) & 0xFFFF;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfirstNode = false;\r\n\t\t\t\tif(shift != 0) offset += pointerSize;\r\n\t\t\t}\r\n\t\t\tshift -= 16;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Remove a value from this list.\r\n\t * @param value\r\n\t * @throws SQLException\r\n\t */\r\n\tfinal void remove(long value) throws SQLException{\r\n\t\tif(size == 0) return;\r\n\t\tint offset1 = 0;\r\n\t\tint offset2 = 0;\r\n\t\tint offset3 = 0;\r\n\t\toffset = 0;\r\n\t\tint shift = 48;\r\n\t\tboolean firstNode = true; // if this the first node in this tree level (0 can be the first node and are the end of the level)\r\n\t\tboolean firstNode1 = true;\r\n\t\tboolean firstNode2 = true;\r\n\t\tboolean firstNode3 = true;\r\n\t\twhile(shift>=0){\r\n\t\t\tint octet = (int)(value >> shift) & 0xFFFF;\r\n\t\t\twhile(true){\r\n\t\t\t\tint nextEntry = getUnsignedShort();\r\n\t\t\t\tif(nextEntry == octet){\r\n\t\t\t\t\tif(shift == 0){\r\n\t\t\t\t\t\t//value find\r\n\t\t\t\t\t\toffset -= 2;\r\n\t\t\t\t\t\tremoveNodeLastLevel();\r\n\t\t\t\t\t\twhile(firstNode && getUnsignedShort() == 0){\r\n\t\t\t\t\t\t\toffset -= 2;\r\n\t\t\t\t\t\t\tremoveNodeLastLevel(); // the end 0 of a node\r\n\t\t\t\t\t\t\tif(shift >= 3) \r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\toffset = offset1;\r\n\t\t\t\t\t\t\toffset1 = offset2;\r\n\t\t\t\t\t\t\toffset2 = offset3;\r\n\t\t\t\t\t\t\tfirstNode = firstNode1;\r\n\t\t\t\t\t\t\tfirstNode1 = firstNode2;\r\n\t\t\t\t\t\t\tfirstNode2 = firstNode3;\r\n\t\t\t\t\t\t\tremoveNode();\r\n\t\t\t\t\t\t\tshift++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\toffset3 = offset2;\r\n\t\t\t\t\toffset2 = offset1;\r\n\t\t\t\t\toffset1 = offset -2;\r\n\t\t\t\t\toffset = getPointer();\r\n\t\t\t\t\tfirstNode3 = firstNode2;\r\n\t\t\t\t\tfirstNode2 = firstNode1;\r\n\t\t\t\t\tfirstNode1 = firstNode;\r\n\t\t\t\t\tfirstNode = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif((nextEntry == 0 && !firstNode) || nextEntry > octet){\r\n\t\t\t\t\t//value is not in the list, this should not occur\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tfirstNode = false;\r\n\t\t\t\tif(shift != 0) offset += pointerSize;\r\n\t\t\t}\r\n\t\t\tshift -= 16;\r\n\t\t}\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * Get the next long value from this list. \r\n     * If there are no more values then it return -1.\r\n\t * @return\r\n\t */\r\n\tfinal long getNext(LongTreeListEnum listEnum){\r\n\t\tint shift = (3-listEnum.stack) << 4;\r\n\t\tif(shift >= 64) return -1; //a previous call has return -1\r\n\t\toffset \t\t= listEnum.offsetStack[listEnum.stack];\r\n\t\tlong result = listEnum.resultStack[listEnum.stack];\r\n\t\tboolean firstNode = (offset == 0); // true if it the first entry in a level\r\n\t\twhile(true){\r\n\t\t\tint nextEntry = getUnsignedShort();\r\n\t\t\tif(nextEntry != 0 || firstNode){\r\n\t\t\t\t//there are more entries in this node\r\n\t\t\t\tresult |= (((long)nextEntry) << shift);\r\n\t\t\t\tif(listEnum.stack>=3){\r\n\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset+pointerSize;\r\n\t\t\t\toffset = getPointer();\r\n\t\t\t\tshift -= 16;\r\n\t\t\t\tlistEnum.stack++;\r\n\t\t\t\tlistEnum.resultStack[listEnum.stack] = result;\r\n\t\t\t\tfirstNode = true;\r\n\t\t\t}else{\r\n\t\t\t\t//no more entries in this node\r\n\t\t\t\tshift += 16;\r\n\t\t\t\tlistEnum.stack--;\r\n\t\t\t\tif(listEnum.stack<0) return -1; // no more entries\r\n\t\t\t\tresult = listEnum.resultStack[listEnum.stack];\r\n\t\t\t\toffset = listEnum.offsetStack[listEnum.stack];\r\n\t\t\t\tfirstNode = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * Get the next long value from this list.\r\n     * If there are no more values then it return -1.\r\n\t * @return\r\n\t */\r\n\tfinal long getPrevious(LongTreeListEnum listEnum){\r\n\t\tint shift = (3-listEnum.stack) << 4;\r\n\t\tif(shift >= 64){ //a previous call of getNext() has return -1\r\n\t\t\tshift = 48;\r\n\t\t\toffset = 0;\r\n\t\t\tlistEnum.stack = 0;\r\n\t\t\tlistEnum.offsetStack[0] = 2 + pointerSize;\r\n\t\t\tloopToEndOfNode(listEnum);\r\n\t\t}else{\r\n\t\t\tsetPreviousOffset(listEnum);\r\n\t\t}\r\n\t\tlong result = listEnum.resultStack[listEnum.stack];\r\n\t\twhile(true){\r\n\t\t\tint nextEntry = (offset < 0) ? -1 : getUnsignedShort();\r\n\t\t\tif(nextEntry >= 0){\r\n\t\t\t\t// there are more entries in this node\r\n\t\t\t\tresult |= (((long)nextEntry) << shift);\r\n\t\t\t\tif(listEnum.stack>=3){\r\n\t\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tlistEnum.offsetStack[listEnum.stack] = offset+pointerSize;\r\n\t\t\t\toffset = getPointer();\r\n\t\t\t\tshift -= 16;\r\n\t\t\t\tlistEnum.stack++;\r\n\t\t\t\tlistEnum.resultStack[listEnum.stack] = result;\r\n\t\t\t\tloopToEndOfNode(listEnum);\r\n\t\t\t}else{\r\n\t\t\t\t//no more entries in this node\r\n\t\t\t\tshift += 16;\r\n\t\t\t\tlistEnum.stack--;\r\n\t\t\t\tif(listEnum.stack<0) return -1; // no more entries\r\n\t\t\t\tresult = listEnum.resultStack[listEnum.stack];\r\n\t\t\t\tsetPreviousOffset(listEnum);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Is used from getPrevious(). It set the offset of the previous entry.\r\n\t * If there is no previous entry in this node then set it to -1.\r\n\t * The problem is that \"enum\" point to the next position to optimize getNext().\r\n\t * We need 2 steps forward to find the previous entry. It can occur that\r\n\t * we are in another node. We need to verify it with the start point of the current node.\r\n\t */\r\n\tfinal private void setPreviousOffset(LongTreeListEnum listEnum){\r\n\t\tint previousOffset = listEnum.offsetStack[listEnum.stack] - 2*(2 + (listEnum.stack>=3 ? 0 : pointerSize));\r\n\t\tif(listEnum.stack == 0){\r\n\t\t\toffset = previousOffset;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\toffset = listEnum.offsetStack[listEnum.stack-1] - pointerSize;\r\n\t\tint pointer = getPointer();\r\n\t\tif(pointer <= previousOffset){\r\n\t\t\toffset = previousOffset;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\toffset = -1;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Loop to the last entry in this node. Is used from getPrevious().\r\n\t */\r\n\tfinal private void loopToEndOfNode(LongTreeListEnum listEnum){\r\n\t\tint nextEntry;\r\n\t\tint nextOffset1, nextOffset2;\r\n\t\tnextOffset1 = offset;\r\n\t\toffset += 2;\r\n\t\tif(listEnum.stack<3)\r\n\t\t\toffset += pointerSize;\r\n\t\tdo{\r\n\t\t\tnextOffset2 = nextOffset1;\r\n\t\t\tnextOffset1 = offset;\r\n\t\t\tnextEntry = getUnsignedShort();\r\n\t\t\tif(listEnum.stack<3)\r\n\t\t\t\toffset += pointerSize;\r\n\t\t}while(nextEntry != 0);\r\n\t\toffset = nextOffset2;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\r\n\t/**\r\n\t * Insert a octet entry on the current offset for one of the first 3 levels. \r\n\t * After it create a new node at the end (simple two 0). \r\n\t * Then set it the pointer in the new entry to the new node \r\n\t * @param octet a short value\r\n\t * @return the offset of the new node.\r\n\t */\r\n\tfinal private int insertNode(int octet) throws SQLException{\r\n\t\tint oldOffset = offset;\r\n\t\t\r\n\t\tif(data.length < size + 4 + pointerSize) resize();\r\n\t\tSystem.arraycopy(data, oldOffset, data, oldOffset + 2+pointerSize, size-oldOffset);\r\n\t\tsize += 2+pointerSize;\r\n\r\n\t\twriteShort( octet );\r\n\t\twritePointer( size );\r\n\r\n\t\t//correct all offset that point behind the new node\r\n\t\tcorrectPointers( 0, oldOffset, 2+pointerSize, 0 );\r\n\t\t\r\n\t\tdata[size++] = (byte)0;\r\n\t\tdata[size++] = (byte)0;\r\n\t\treturn size-2;\r\n\t}\r\n\t\r\n\t\t\r\n\t/**\r\n\t * Insert the octet of the last level (4 level) on the current offset. \r\n\t * This level does not include a pointer to a next level.\r\n\t * @param octet a short value\r\n\t */\r\n\tfinal private void insertNodeLastLevel(int octet) throws SQLException{\r\n\t\tint oldOffset = offset;\r\n\t\t\t\t\r\n\t\tif(data.length < size + 2) resize();\r\n\t\tSystem.arraycopy(data, offset, data, offset + 2, size-offset);\r\n\t\tsize += 2;\r\n\t\twriteShort( octet );\r\n\t\t\r\n\t\t//correct all offset before this new node that point behind the new node\r\n\t\tcorrectPointers( 0, oldOffset, 2, 0 );\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Remove a octet entry on the current offset for one of the first 3 levels. \r\n\t * Then set it the pointer in the new entry to the new node \r\n\t * @param octet a short value\r\n\t */\r\n\tfinal private void removeNode() throws SQLException{\r\n\t\tint oldOffset = offset;\r\n\t\t\r\n\t\t//correct all offset that point behind the old node\r\n\t\tcorrectPointers( 0, oldOffset, -(2+pointerSize), 0 );\r\n\r\n\t\tsize -= 2+pointerSize;\r\n\t\tSystem.arraycopy(data, oldOffset + 2+pointerSize, data, oldOffset, size-oldOffset);\r\n\r\n\t\toffset = oldOffset;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Remove a octet entry on the current offset for one of the first 3 levels. \r\n\t * Then set it the pointer in the new entry to the new node \r\n\t * @param octet a short value\r\n\t */\r\n\tfinal private void removeNodeLastLevel() throws SQLException{\r\n\t\tint oldOffset = offset;\r\n\t\t\r\n\t\t//correct all offset that point behind the old node\r\n\t\tcorrectPointers( 0, oldOffset, -2, 0 );\r\n\r\n\t\tsize -= 2;\r\n\t\tSystem.arraycopy(data, oldOffset + 2, data, oldOffset, size-oldOffset);\r\n\r\n\t\toffset = oldOffset;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Correct all pointers that point behind a new entry.\r\n\t * @param startOffset the startoffset of the current node\r\n\t * @param oldOffset the offset of the new entry, only pointer that point behind it need to correct.\r\n\t * @param diff the differenz that need added to the pointers\r\n\t * @param level the stack level. There are only 3 levels with pointers.\r\n\t */\r\n\tfinal private void correctPointers(int startOffset, int oldOffset, int diff, int level){\r\n\t\toffset = startOffset;\r\n\t\tboolean firstNode = true;\r\n\t\twhile(offset < size){\r\n\t\t\tif(offset == oldOffset){\r\n\t\t\t\tint absDiff = Math.abs(diff);\r\n\t\t\t\tif(absDiff == 2) return;\r\n\t\t\t\toffset += absDiff;\r\n\t\t\t\tfirstNode = false;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tint value = getUnsignedShort();\r\n\t\t\tif(value != 0 || firstNode){\r\n\t\t\t\tint pointer = getPointer();\r\n\t\t\t\tif(pointer > oldOffset){\r\n\t\t\t\t\toffset  -= pointerSize;\r\n\t\t\t\t\twritePointer( pointer + diff );\r\n\t\t\t\t\tif(diff > 0) pointer += diff;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tif(level < 2){\r\n\t\t\t\t\tstartOffset = offset;\r\n\t\t\t\t\tcorrectPointers( pointer, oldOffset, diff, level+1);\r\n\t\t\t\t\toffset = startOffset;\r\n\t\t\t\t}\r\n\t\t\t\tfirstNode = false;\r\n\t\t\t}else{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\t\r\n\t/**\r\n\t * Read a pointer to another node in de index.\r\n\t */\r\n\tfinal private int getPointer(){\r\n\t\tint value = 0;\r\n\t\tfor(int i=0; i<pointerSize; i++){\r\n\t\t\tvalue <<= 8;\r\n\t\t\tvalue += (data[offset++] & 0xFF);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Write a pointer to another node in the tree list. The size depends from the constant pointerSize.\r\n\t */\r\n\tfinal private void writePointer(int value){\r\n\t\tfor(int i=pointerSize-1; i>=0; i--){\r\n\t\t\tdata[offset++] = (byte)(value >> (i*8));\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * Read a short value from the index.\r\n\t */\r\n\tfinal private int getUnsignedShort(){\r\n\t\treturn ((data[ offset++ ] & 0xFF) << 8) | (data[ offset++ ] & 0xFF);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Save a short value in the index. The long values are saved in 4 short values-\r\n\t * @param value\r\n\t */\r\n\tfinal private void writeShort(int value){\r\n\t\tdata[offset++] = (byte)(value >> 8);\r\n\t\tdata[offset++] = (byte)(value);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Increment the buffer size for the list.\r\n\t */\r\n\tprivate final void resize() throws SQLException{\r\n\t\tint newsize = data.length << 1;\r\n\t\tif(newsize > 0xFFFFFF){ //see pointerSize\r\n\t\t\tnewsize = 0xFFFFFF;\r\n\t\t\tif(newsize == data.length) throw SmallSQLException.create(Language.INDEX_TOOMANY_EQUALS);\r\n\t\t}\r\n\t\tbyte[] temp = new byte[newsize];\r\n\t\tSystem.arraycopy(data, 0, temp, 0, data.length);\r\n\t\tdata = temp;\r\n\t}\r\n\r\n\tfinal int getSize() {\r\n\t\treturn size;\r\n\t}\r\n}\r\n"},{"path":"/src/smallsql/database/ExpressionFunctionTruncate.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctiontruncate.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\n\r\nfinal class ExpressionFunctionTruncate extends ExpressionFunctionReturnP1Number {\r\n\r\n    final int getFunction(){ return SQLTokenizer.TRUNCATE; }\r\n\r\n    boolean isNull() throws Exception{\r\n        return param1.isNull() || param2.isNull();\r\n    }\r\n\t\r\n\r\n    final double getDouble() throws Exception{\r\n\t\tif(isNull()) return 0;\r\n\t\tfinal int places = param2.getInt();\r\n\t\tdouble value = param1.getDouble();\r\n\t\tlong factor = 1;\r\n\t\tif(places > 0){\r\n\t\t\tfor(int i=0; i<places; i++){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue *= factor;\r\n\t\t}else{\r\n\t\t\tfor(int i=0; i>places; i--){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue /= factor;\r\n\t\t}\r\n        value -= value % 1; //modulo also work with values larger long\r\n\t\tif(places > 0){\r\n\t\t\tvalue /= factor;\r\n\t\t}else{\r\n\t\t\tvalue *= factor;\r\n\t\t}\r\n\t\treturn value;\r\n    }\r\n\t\r\n\r\n}"},{"path":"/src/smallsql/database/StoreImpl.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2011, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * StoreImpl.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\nimport java.io.*;\r\nimport java.nio.ByteBuffer;\r\nimport java.nio.channels.FileChannel;\r\nimport java.sql.SQLException;\r\nimport smallsql.database.language.Language;\r\n\r\npublic class StoreImpl extends Store {\r\n\r\n    private static final int DEFAULT_PAGE_SIZE = 8192; // 8 Kb\r\n\tprivate static final int PAGE_MAGIC = 0x12DD13DE; // are used for repairing a table\r\n    /**\r\n     * The structure of the Page Control Block is:\r\n     * 4 byte - page magic\r\n     * 4 Byte - Status 0:normal; 1:deleted; 2:Pointer to an update; 3: updated page\r\n     * 4 Byte - used size of the page\r\n     * 4 byte - physical size of the page\r\n     * 4 byte - offset to the next page\r\n     * 8 byte - position of an updated page\r\n     */\r\n\tprivate static final int PAGE_CONTROL_SIZE = 28;\r\n\tprivate static final byte[] page_control = new byte[PAGE_CONTROL_SIZE]; \r\n\tprivate static final ByteBuffer pageControlBuffer = ByteBuffer.wrap(page_control); \r\n\tprivate int status; // valid value are follow:\r\n\tprivate static final int NORMAL = 0;\r\n    private static final int DELETED = 1;\r\n    /**\r\n     * Using of UPDATE_POINTER and UPDATED_PAGE\r\n     * \tIf a page are updated and the new data are larger as the old data then\r\n     *  the old page are changed to a UPDATE_POINTER. The new page is \r\n     *  a UPDATED_PAGE. On reading the pages only the UPDATE_POINTER is read.\r\n     *  The UPDATED_PAGE are skipped. Thats a row change not it position.\r\n     */\r\n\tprivate static final int UPDATE_POINTER = 2;\r\n\tprivate static final int UPDATED_PAGE = 3;\r\n    \r\n    final private Table table;\r\n    /** Data of one page */\r\n    private byte[] page; \r\n    /** if the current array \"page\" is shared. This make sence for read only access but not if it will be write. */\r\n    private boolean sharedPageData;\r\n    private StorePage storePage;\r\n    private long filePos; // Position in the file\r\n    private int sizeUsed;\r\n    private int sizePhysical;\r\n    private int nextPageOffset;\r\n    private long filePosUpdated;\r\n    private int type;\r\n    \r\n    private StoreImpl updatePointer;\r\n\r\n    private StoreImpl( Table table, StorePage storePage, int type, long filePos ){\r\n\t\tthis.table     = table;\r\n\t\tthis.storePage    = storePage;\r\n\t\tthis.filePos   = filePos;\r\n\t\tthis.type      = type;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Follow types of StoreImpl are possible:\r\n     * INSERT: A page that will be include new data. filePos is not define yet.\r\n     * CREATE: A special type of INSERT\r\n     * SELECT: Only read operations are possible.\r\n     * UPDATE: Has a filePos, if the new size is to small then the old page must be deleted and a new added.\r\n     * DELETE: Has no cache else only the filePos to write the flag.\r\n    */\r\n    static StoreImpl createStore( Table table, StorePage storePage, int type, long filePos ) throws SQLException{\r\n        try {\r\n            StoreImpl store = new StoreImpl(table, storePage, type, filePos);\r\n            switch(type){\r\n                case SQLTokenizer.LONGVARBINARY:\r\n                    // is used for storing of LONGVARBINARY and LONGVARCHAR\r\n                    store.page = new byte[(int)filePos + PAGE_CONTROL_SIZE];\r\n                    store.filePos = -1;\r\n                    break;\r\n                case SQLTokenizer.INSERT:\r\n                case SQLTokenizer.CREATE:\r\n                    store.page = new byte[DEFAULT_PAGE_SIZE];\r\n                    break;\r\n                case SQLTokenizer.SELECT:\r\n                case SQLTokenizer.UPDATE:\r\n            \tcase SQLTokenizer.DELETE:\r\n                    if(storePage.page == null){\r\n                        FileChannel raFile = storePage.raFile;\r\n                        synchronized(raFile){\r\n                            if(filePos >= raFile.size() - PAGE_CONTROL_SIZE){\r\n                                return null;\r\n                            }\r\n                            raFile.position(filePos);\r\n                            synchronized(page_control){\r\n                                pageControlBuffer.position(0);\r\n                                raFile.read(pageControlBuffer);\r\n                                store.page = page_control;\r\n                                store.readPageHeader();\r\n                            }\r\n                            store.page = new byte[store.sizeUsed];\r\n                            raFile.position(filePos);\r\n                            ByteBuffer buffer = ByteBuffer.wrap(store.page);\r\n                            raFile.read(buffer);\r\n                        }\r\n                    }else{\r\n                        store.page = storePage.page;\r\n                        store.sharedPageData = true;\r\n                        store.readPageHeader();\r\n                    }\r\n                    store = store.loadUpdatedStore();\r\n                    break;\r\n                default: throw new Error();\r\n            }\r\n            store.offset = PAGE_CONTROL_SIZE;\r\n            return store;\r\n        } catch (Throwable th) {\r\n            throw SmallSQLException.createFromException(th);\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Recreate a StoreImpl from an uncommitted StorePage.\r\n     */\r\n\tstatic StoreImpl recreateStore( Table table, StorePage storePage, int type) throws Exception{\r\n\t\tStoreImpl store = new StoreImpl(table, storePage, type, -1);\r\n\t\tstore.page = storePage.page;\r\n\t\tstore.sharedPageData = true;\r\n\t\tstore.readPageHeader();\r\n\t\tstore = store.loadUpdatedStore();\r\n\t\tstore.offset = PAGE_CONTROL_SIZE;\r\n\t\treturn store;\r\n\t}\r\n\t\r\n    \r\n    private final void readPageHeader() throws SQLException{\r\n\t\tif(readInt() != PAGE_MAGIC){\r\n\t\t\tthrow SmallSQLException.create(Language.TABLE_CORRUPT_PAGE, new Object[] { new Long(filePos) });\r\n\t\t}\r\n\t\tstatus = readInt();\r\n\t\tsizeUsed  = readInt();\r\n\t\tsizePhysical = readInt();\r\n\t\tnextPageOffset = readInt();\r\n\t\tfilePosUpdated = readLong();\r\n    }\r\n    \r\n    \r\n    /**\r\n     * If the current page is only an pointer to a larger page then the larger page is loaded else it return this.\r\n     * @return this or the page with the valid data.\r\n     * @throws Exception\r\n     */\r\n\tfinal private StoreImpl loadUpdatedStore() throws Exception{\r\n\t\tif(status != UPDATE_POINTER) return this;\r\n\t\tStoreImpl storeTemp = table.getStore( ((TableStorePage)storePage).con, filePosUpdated, type);\r\n\t\tstoreTemp.updatePointer = this;\r\n\t\treturn storeTemp;\r\n    }\r\n    \r\n\r\n    private void resizePage(int minNewSize){\r\n    \tint newSize = Math.max(minNewSize, page.length*2);\r\n    \tbyte[] newPage = new byte[newSize];\r\n    \tSystem.arraycopy( page, 0, newPage, 0, page.length);\r\n    \tpage = newPage;\r\n    }\r\n    \r\n\r\n\t@Override\r\n    boolean isValidPage(){\r\n\t\treturn status == NORMAL || (status == UPDATED_PAGE && updatePointer != null); \r\n\t}\r\n\t\r\n    @Override\r\n    int getUsedSize(){\r\n        return sizeUsed;\r\n    }\r\n    \r\n    @Override\r\n    long getNextPagePos(){\r\n    \tif(updatePointer != null) return updatePointer.getNextPagePos();\r\n    \tif(nextPageOffset <= 0){\r\n\t\t\tnextPageOffset = sizePhysical; \r\n    \t}\r\n\t\treturn filePos + nextPageOffset;\r\n    }\r\n\r\n    \r\n    /**\r\n     * \r\n     * @param con Is needed to add this page to the commitPages. If it null then it save directly without rollback option.\r\n     * @return The file position if con == null.\r\n     * @throws SQLException\r\n     */\r\n    long writeFinsh(SSConnection con) throws SQLException{\r\n        switch(type){\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.INSERT:\r\n            case SQLTokenizer.CREATE:\r\n                sizeUsed = sizePhysical = offset;\r\n                break;\r\n\t\t\tcase SQLTokenizer.UPDATE:\r\n\t\t\t\tif(status != UPDATE_POINTER) {\r\n\t\t\t\t\tsizeUsed = offset;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n            case SQLTokenizer.DELETE:\r\n\t\t\t\tsizeUsed = PAGE_CONTROL_SIZE;\r\n                break;\r\n            //SQLTokenizer.SELECT should not occur here\r\n            default: throw new Error(\"\"+type);\r\n        }\r\n\t\toffset = 0;\r\n\t\twriteInt( PAGE_MAGIC ); // for repair \r\n\t\twriteInt( status);\r\n\t\twriteInt( sizeUsed );\r\n\t\twriteInt( sizePhysical );\r\n\t\twriteInt( 0 ); //nextPageOffset\r\n\t\twriteLong( filePosUpdated ); // Pointer of an updated page\r\n\t\tstorePage.setPageData( page, sizeUsed ); //TODO page sollte eigentlich beim einlesen gesetzt sein\r\n        if(con == null){\r\n        \t// the pointer is needed to safe in another page\r\n        \t// this produce not referenced pages on rollback\r\n\t\t\treturn storePage.commit();\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Request a write lock for the current read page. It add the resulting StorePage to the list of commits.\r\n     * \r\n     * @throws SQLException\r\n     *             if for the current row (page) cannot create a write lock or th connection was closed.\r\n     */\r\n    final void createWriteLock() throws SQLException{\r\n\t\tTableStorePage storePageWrite = table.requestWriteLock( ((TableStorePage)storePage).con, (TableStorePage)storePage );\r\n\t\tif(storePageWrite == null)\r\n\t\t\tthrow SmallSQLException.create(Language.ROW_LOCKED);\r\n\t\tstorePage = storePageWrite;\r\n    }\r\n    \r\n    /**\r\n     * Is call from updateRow().\r\n     * The offset of newData must be at the end of the data. It used as new page size. \r\n     */\r\n\tvoid updateFinsh(SSConnection con, StoreImpl newData) throws SQLException{\r\n\t\ttype = SQLTokenizer.UPDATE;\r\n\t\t//createWriteLock();\r\n\t\tif(newData.offset <= sizePhysical || filePos == -1){\r\n\t\t\t// the old page can be overwrite because it it large enough\r\n\t\t\tpage = newData.page; //newData is only a temp StoreImpl\r\n\t\t\toffset = newData.offset;\r\n\t\t\tif(sizePhysical < offset) sizePhysical = offset; // occur only on updates of not committed inserts (filePos == -1\r\n\t\t\twriteFinsh(con);\r\n\t\t}else{\r\n\t\t\t// we need to create a new page because the old page is to small\r\n\t\t\tnewData.status = UPDATED_PAGE;\r\n\t\t\tif(updatePointer == null){\r\n\t\t\t\t// we need to create a new page and change the old page to a UPDATE_POINTER\r\n\t\t\t\t((TableStorePage)newData.storePage).lockType = TableView.LOCK_INSERT;\r\n\t\t\t\tfilePosUpdated = newData.writeFinsh(null);\r\n\t\t\t\tstatus = UPDATE_POINTER;\r\n\t\t\t}else{\r\n\t\t\t\t// we need to create a new page and delete the old page\r\n\t\t\t\t((TableStorePage)newData.storePage).lockType = TableView.LOCK_INSERT;\r\n\t\t\t\tupdatePointer.filePosUpdated = newData.writeFinsh(null);\r\n\t\t\t\tupdatePointer.status = UPDATE_POINTER;\r\n\t\t\t\tupdatePointer.type = SQLTokenizer.UPDATE;\r\n\t\t\t\tupdatePointer.createWriteLock();\r\n\t\t\t\tif(updatePointer.sharedPageData){\r\n\t\t\t\t    updatePointer.page = new byte[PAGE_CONTROL_SIZE];\r\n\t\t\t\t}\r\n\t\t\t\tupdatePointer.writeFinsh(con);\r\n\t\t\t\tstatus = DELETED;\r\n                if(sharedPageData){\r\n                    page = new byte[PAGE_CONTROL_SIZE];\r\n                }\r\n\t\t\t}\r\n\t\t\twriteFinsh(con);\r\n\t\t}\r\n\t}\r\n    \r\n/*==============================================================================\r\n\r\nWrite und Read Methoden\r\n\r\n==============================================================================*/\r\n    private int offset; // aktuelle read/write Position in der Page\r\n\t\r\n\t\r\n\tint getCurrentOffsetInPage(){\r\n\t\treturn offset;\r\n\t}\r\n\t\r\n\t\r\n\tvoid setCurrentOffsetInPage(int newOffset){\r\n\t\tthis.offset = newOffset;\r\n\t}\r\n\t\r\n\r\n    void writeByte( int value ){\r\n    \tint newSize = offset + 1;\r\n        if(newSize > page.length) resizePage(newSize);\r\n\r\n        page[ offset++ ] = (byte)(value);\r\n    }\r\n\r\n    int readByte(){\r\n        return page[ offset++ ];\r\n    }\r\n\r\n    int readUnsignedByte(){\r\n        return page[ offset++ ] & 0xFF;\r\n    }\r\n\r\n    void writeBoolean( boolean value ){\r\n    \tint newSize = offset + 1;\r\n        if(newSize > page.length) resizePage(newSize);\r\n\r\n        page[ offset++ ] = (byte)(value ? 1 : 0);\r\n    }\r\n\r\n    boolean readBoolean(){\r\n        return page[ offset++ ] != 0;\r\n    }\r\n\r\n    void writeShort( int value ){\r\n    \tint newSize = offset + 2;\r\n        if(newSize > page.length) resizePage(newSize);\r\n\r\n        page[ offset++ ] = (byte)(value >> 8);\r\n        page[ offset++ ] = (byte)(value);\r\n    }\r\n\r\n    int readShort(){\r\n        return (page[ offset++ ] << 8) | (page[ offset++ ] & 0xFF);\r\n    }\r\n\r\n    void writeInt( int value ){\r\n    \tint newSize = offset + 4;\r\n        if(newSize > page.length) resizePage(newSize);\r\n\r\n        page[ offset++ ] = (byte)(value >> 24);\r\n        page[ offset++ ] = (byte)(value >> 16);\r\n        page[ offset++ ] = (byte)(value >> 8);\r\n        page[ offset++ ] = (byte)(value);\r\n    }\r\n\r\n    int readInt(){\r\n        return  ((page[ offset++ ]) << 24) |\r\n                ((page[ offset++ ] & 0xFF) << 16) |\r\n                ((page[ offset++ ] & 0xFF) << 8) |\r\n                ((page[ offset++ ] & 0xFF));\r\n    }\r\n\r\n    void writeLong( long value ){\r\n    \tint newSize = offset + 8;\r\n        if(newSize > page.length) resizePage(newSize);\r\n\r\n        page[ offset++ ] = (byte)(value >> 56);\r\n        page[ offset++ ] = (byte)(value >> 48);\r\n        page[ offset++ ] = (byte)(value >> 40);\r\n        page[ offset++ ] = (byte)(value >> 32);\r\n        page[ offset++ ] = (byte)(value >> 24);\r\n        page[ offset++ ] = (byte)(value >> 16);\r\n        page[ offset++ ] = (byte)(value >> 8);\r\n        page[ offset++ ] = (byte)(value);\r\n    }\r\n\r\n    long readLong(){\r\n        //return (((long)readInt()) << 32) | (readInt() & 0xFFFFFFFFL);\r\n        return  ((long)(page[ offset++ ]) << 56) |\r\n                ((long)(page[ offset++ ] & 0xFF) << 48) |\r\n                ((long)(page[ offset++ ] & 0xFF) << 40) |\r\n                ((long)(page[ offset++ ] & 0xFF) << 32) |\r\n                ((long)(page[ offset++ ] & 0xFF) << 24) |\r\n                ((page[ offset++ ] & 0xFF) << 16) |\r\n                ((page[ offset++ ] & 0xFF) << 8) |\r\n                ((page[ offset++ ] & 0xFF));\r\n    }\r\n\r\n    void writeDouble(double value){\r\n        writeLong( Double.doubleToLongBits(value) );\r\n    }\r\n\r\n    double readDouble(){\r\n        return Double.longBitsToDouble( readLong() );\r\n    }\r\n\r\n    void writeFloat(float value){\r\n        writeInt( Float.floatToIntBits(value) );\r\n    }\r\n\r\n    float readFloat(){\r\n        return Float.intBitsToFloat( readInt() );\r\n    }\r\n\r\n    void writeNumeric( MutableNumeric num){\r\n        writeByte( num.getInternalValue().length );\r\n        writeByte( num.getScale() );\r\n        writeByte( num.getSignum() );\r\n        for(int i=0; i<num.getInternalValue().length; i++){\r\n            writeInt( num.getInternalValue()[i] );\r\n        }\r\n    }\r\n\r\n    MutableNumeric readNumeric(){\r\n        int[] value = new int[ readByte() ];\r\n        int scale   = readByte();\r\n        int signum  = readByte();\r\n        for(int i=0; i<value.length; i++){\r\n            value[i] = readInt();\r\n        }\r\n        return new MutableNumeric( signum, value, scale );\r\n    }\r\n\r\n    void writeTimestamp( long ts){\r\n        writeLong( ts );\r\n    }\r\n\r\n    long readTimestamp(){\r\n        return readLong();\r\n    }\r\n\r\n    void writeTime( long time){\r\n        writeInt( (int)((time / 1000) % 86400) );\r\n    }\r\n\r\n    long readTime(){\r\n        return readInt() * 1000L;\r\n    }\r\n\r\n    void writeDate( long date){\r\n        writeInt( (int)(date / 86400000));\r\n    }\r\n\r\n    long readDate(){\r\n        return readInt() * 86400000L;\r\n    }\r\n\r\n    void writeSmallDateTime( long datetime){\r\n        writeInt( (int)(datetime / 60000));\r\n    }\r\n\r\n    long readSmallDateTime(){\r\n        return readInt() * 60000L;\r\n    }\r\n\r\n    void writeString( String strDaten ) throws SQLException{\r\n        writeString( strDaten, Short.MAX_VALUE, true );\r\n    }\r\n\r\n    void writeString( String strDaten, int lengthColumn, boolean varchar ) throws SQLException{\r\n        char[] daten = strDaten.toCharArray();\r\n        int length = daten.length;\r\n\r\n        if(lengthColumn < length){\r\n            throw SmallSQLException.create(Language.VALUE_STR_TOOLARGE);\r\n        }\r\n\t\tif(varchar) lengthColumn = length;\r\n    \tint newSize = offset + 2 + 2*lengthColumn;\r\n        if(newSize > page.length) resizePage(newSize);\r\n\r\n        writeShort( lengthColumn );\r\n        writeChars( daten );\r\n        for(int i=length; i<lengthColumn; i++){\r\n            page[ offset++ ] = ' ';\r\n            page[ offset++ ] = 0;\r\n        }\r\n    }\r\n\r\n    String readString(){\r\n        int length = readShort() & 0xFFFF;\r\n        return new String( readChars(length) );\r\n    }\r\n\r\n    void writeBytes(byte[] daten){\r\n        int newSize = offset + daten.length;\r\n        if(newSize > page.length) resizePage(newSize );\r\n        System.arraycopy( daten, 0, page, offset, daten.length);\r\n        offset += daten.length;\r\n    }\r\n\r\n    void writeBytes(byte[] daten, int off, int length){\r\n        int newSize = offset + length;\r\n        if(newSize > page.length) resizePage(newSize );\r\n        System.arraycopy( daten, off, page, offset, length);\r\n        offset += length;\r\n    }\r\n\r\n    byte[] readBytes(int length){\r\n        byte[] daten = new byte[length];\r\n        System.arraycopy( page, offset, daten, 0, length);\r\n        offset += length;\r\n        return daten;\r\n    }\r\n\r\n    void writeBinary( byte[] daten, int lengthColumn, boolean varBinary ) throws SQLException{\r\n        int length = daten.length;\r\n\r\n        if(lengthColumn < length){\r\n        \tObject params = new Object[] { new Integer(length), new Integer(lengthColumn) };\r\n            throw SmallSQLException.create(Language.VALUE_BIN_TOOLARGE, params);\r\n        }\r\n        if(varBinary) lengthColumn = length;\r\n    \tint newSize = offset + 2 + lengthColumn;\r\n        if(newSize > page.length) resizePage(newSize);\r\n\r\n        page[ offset++ ] = (byte)(lengthColumn >> 8);\r\n        page[ offset++ ] = (byte)(lengthColumn);\r\n        writeBytes( daten );\r\n        if(!varBinary){\r\n            for(int i=length; i<lengthColumn; i++){\r\n                page[ offset++ ] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    byte[] readBinary(){\r\n        int length = readShort() & 0xFFFF;\r\n        return readBytes(length);\r\n    }\r\n\r\n    void writeLongBinary( byte[] daten ) throws Exception{\r\n        StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, daten.length + 4, SQLTokenizer.LONGVARBINARY);\r\n        store.writeInt( daten.length );\r\n        store.writeBytes( daten );\r\n        writeLong( store.writeFinsh(null) );\r\n    }\r\n\r\n    byte[] readLongBinary() throws Exception{\r\n        long lobFilePos = readLong();\r\n        StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, lobFilePos, SQLTokenizer.SELECT );\r\n        return store.readBytes( store.readInt() );\r\n    }\r\n\r\n    void writeChars(char[] daten){\r\n        int length = daten.length;\r\n        int newSize = offset + 2*length;\r\n        if(newSize > page.length) resizePage(newSize );\r\n        for(int i=0; i<length; i++){\r\n            char c = daten[i];\r\n            page[ offset++ ] = (byte)(c);\r\n            page[ offset++ ] = (byte)(c >> 8);\r\n        }\r\n    }\r\n\r\n    char[] readChars(int length){\r\n        char[] daten = new char[length];\r\n        for(int i=0; i<length; i++){\r\n            daten[i] = (char)((page[ offset++ ] & 0xFF) | (page[ offset++ ] << 8));\r\n        }\r\n        return daten;\r\n    }\r\n\r\n    void writeLongString(String daten) throws Exception{\r\n        char[] chars = daten.toCharArray();\r\n        StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, chars.length * 2L + 4, SQLTokenizer.LONGVARBINARY);\r\n        store.writeInt( chars.length );\r\n        store.writeChars( chars );\r\n        writeLong( store.writeFinsh(null) );\r\n    }\r\n\r\n    String readLongString() throws Exception{\r\n        long lobFilePos = readLong();\r\n        StoreImpl store = table.getLobStore( ((TableStorePage)storePage).con, lobFilePos, SQLTokenizer.SELECT );\r\n        if(store == null) throw SmallSQLException.create(Language.LOB_DELETED);\r\n        return new String(store.readChars( store.readInt() ) );\r\n    }\r\n\t\r\n\r\n    void writeColumn(Column column ) throws Exception{\r\n    \tint newSize = offset + 25;\r\n        if(newSize > page.length) resizePage(newSize);\r\n\r\n        writeByte   ( column.getFlag() );\r\n        writeString ( column.getName() );\r\n        writeShort  ( column.getDataType() );\r\n\t\twriteInt    ( column.getPrecision() );\r\n\t\twriteByte   ( column.getScale() );\r\n\t\toffset += column.initAutoIncrement(storePage.raFile, filePos+offset);\r\n\t\tString def = column.getDefaultDefinition();\r\n\t\twriteBoolean( def == null );\r\n\t\tif(def != null)\r\n\t\t\twriteString ( column.getDefaultDefinition() );\r\n    }\r\n\r\n\t\r\n\t/**\r\n\t * Read a single Column description on the current file offset.\r\n\t * @param table The parent table of the column.\r\n\t * @param tableFormatVersion the file version of the table.\r\n\t * @return\r\n\t * @throws Exception\r\n\t */\r\n    Column readColumn(int tableFormatVersion) throws Exception{\r\n        Column column = new Column();\r\n        column.setFlag( readByte() );\r\n        column.setName( readString() );\r\n        column.setDataType( readShort() );\r\n\t\tint precision;\r\n\t\tif(tableFormatVersion == TableView.TABLE_VIEW_OLD_VERSION)\r\n\t\t\tprecision = readByte();\r\n\t\telse\r\n\t\t\tprecision = readInt();\r\n\t\tcolumn.setPrecision( precision );\r\n\t\tcolumn.setScale( readByte() );\r\n\t\toffset += column.initAutoIncrement(storePage.raFile, filePos+offset);\r\n\t\tif(!readBoolean()){\r\n\t\t\tString def = readString();\r\n\t\t\tcolumn.setDefaultValue( new SQLParser().parseExpression(def), def);\r\n\t\t}\r\n        return column;\r\n    }\r\n \r\n    \r\n    void copyValueFrom( StoreImpl store, int valueOffset, int length){\r\n\t\tSystem.arraycopy( store.page, valueOffset, this.page, this.offset, length);\r\n\t\tthis.offset += length;\r\n    }\r\n\r\n    \r\n    /**\r\n     * Here are pass only Expression instead of Objects to optimize \r\n     * it for native data (no object).\r\n     * The value of offset must be correctly. \r\n     * @param expr the value that should be written\r\n     * @param column a description of the target column\r\n     * @throws Exception if any error occur like conversions or io exceptions\r\n     */\r\n    void writeExpression( Expression expr, Column column) throws Exception{\r\n        boolean isNull = expr.isNull();\r\n        if(isNull && !column.isNullable()){\r\n            throw SmallSQLException.create(Language.VALUE_NULL_INVALID, column.getName());\r\n        }\r\n        int dataType = column.getDataType();\r\n        if(isNull){\r\n            writeBoolean(true); //true - is null\r\n            switch(dataType){\r\n                case SQLTokenizer.BIT:\r\n                case SQLTokenizer.BOOLEAN:\r\n                case SQLTokenizer.TINYINT:\r\n                    offset++;\r\n                    break;\r\n                case SQLTokenizer.SMALLINT:\r\n                case SQLTokenizer.BINARY:\r\n                case SQLTokenizer.VARBINARY:\r\n                case SQLTokenizer.CHAR:\r\n                case SQLTokenizer.NCHAR:\r\n                case SQLTokenizer.VARCHAR:\r\n                case SQLTokenizer.NVARCHAR:\r\n                    offset += 2;\r\n                    break;\r\n                case SQLTokenizer.INT:\r\n                case SQLTokenizer.REAL:\r\n                case SQLTokenizer.SMALLMONEY:\r\n                case SQLTokenizer.TIME:\r\n                case SQLTokenizer.DATE:\r\n                case SQLTokenizer.SMALLDATETIME:\r\n                    offset += 4;\r\n                    break;\r\n                case SQLTokenizer.BIGINT:\r\n                case SQLTokenizer.FLOAT:\r\n                case SQLTokenizer.DOUBLE:\r\n                case SQLTokenizer.MONEY:\r\n                case SQLTokenizer.JAVA_OBJECT:\r\n                case SQLTokenizer.LONGVARBINARY:\r\n                case SQLTokenizer.BLOB:\r\n\t\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\t\tcase SQLTokenizer.NCLOB:\r\n                case SQLTokenizer.LONGNVARCHAR:\r\n                case SQLTokenizer.LONGVARCHAR:\r\n                case SQLTokenizer.TIMESTAMP:\r\n                    offset += 8;\r\n                    break;\r\n                case SQLTokenizer.UNIQUEIDENTIFIER:\r\n                    offset += 16;\r\n                    break;\r\n                case SQLTokenizer.NUMERIC:\r\n                case SQLTokenizer.DECIMAL:\r\n                    offset += 3;\r\n                    break;\r\n                default: throw new Error();\r\n            }\r\n            return;\r\n        }\r\n        writeBoolean(false); // false - is not null\r\n       \tcolumn.setNewAutoIncrementValue(expr);\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    writeBoolean( expr.getBoolean() );\r\n                    break;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    writeBinary( expr.getBytes(), column.getPrecision(), dataType != SQLTokenizer.BINARY );\r\n                    break;\r\n            case SQLTokenizer.TINYINT:\r\n                    writeByte( expr.getInt() );\r\n                    break;\r\n            case SQLTokenizer.SMALLINT:\r\n                    writeShort( expr.getInt() );\r\n                    break;\r\n            case SQLTokenizer.INT:\r\n                    writeInt( expr.getInt() );\r\n                    break;\r\n            case SQLTokenizer.BIGINT:\r\n                    writeLong( expr.getLong() );\r\n                    break;\r\n            case SQLTokenizer.REAL:\r\n                    writeFloat( expr.getFloat() );\r\n                    break;\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    writeDouble( expr.getDouble() );\r\n                    break;\r\n            case SQLTokenizer.MONEY:\r\n                    writeLong( expr.getMoney() );\r\n                    break;\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    writeInt( (int)expr.getMoney() );\r\n                    break;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n            \t\tMutableNumeric numeric = expr.getNumeric();\r\n            \t\tnumeric.setScale( column.getScale() );\r\n                    writeNumeric( numeric );\r\n                    break;\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n                    writeString( expr.getString(), column.getDisplaySize(), false );\r\n                    break;\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    writeString( expr.getString(), column.getDisplaySize(), true );\r\n                    break;\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    writeLongString( expr.getString() );\r\n                    break;\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    // FIXME a MemoryStream can be faster because there are no additional array copy\r\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n                    ObjectOutputStream oos = new ObjectOutputStream(baos);\r\n                    oos.writeObject( expr.getObject() );\r\n                    writeLongBinary( baos.toByteArray() );\r\n                    break;\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    writeLongBinary( expr.getBytes() );\r\n                    break;\r\n            case SQLTokenizer.TIMESTAMP:\r\n                    writeTimestamp( expr.getLong() );\r\n                    break;\r\n            case SQLTokenizer.TIME:\r\n                    writeTime( expr.getLong() );\r\n                    break;\r\n            case SQLTokenizer.DATE:\r\n                    writeDate( expr.getLong() );\r\n                    break;\r\n            case SQLTokenizer.SMALLDATETIME:\r\n                    writeSmallDateTime( expr.getLong() );\r\n                    break;\r\n            case SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\t\tswitch(expr.getDataType()){\r\n\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\t\tcase SQLTokenizer.BINARY:\r\n\t\t\t\t\tcase SQLTokenizer.VARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.BLOB:\r\n\t\t\t\t\t\tbyte[] bytes = expr.getBytes();\r\n                        if(bytes.length != 16) throw SmallSQLException.create(Language.BYTEARR_INVALID_SIZE, String.valueOf(bytes.length));\r\n                        writeBytes( bytes );\r\n\t\t\t\t\tdefault:\r\n                        writeBytes( Utils.unique2bytes(expr.getString()) );\r\n\t\t\t\t\t}\r\n                    break;\r\n            default: throw new Error(String.valueOf(column.getDataType()));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    boolean isNull(int valueOffset){\r\n        return page[ valueOffset ] != 0;\r\n    }\r\n\r\n    \r\n    /**\r\n     * It used for ResultSet.getBoolean()\r\n     */\r\n    @Override\r\n    boolean getBoolean(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return false;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean();\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return Utils.bytes2int( readBinary() ) != 0;\r\n            case SQLTokenizer.TINYINT:\r\n                    return readUnsignedByte() != 0;\r\n            case SQLTokenizer.SMALLINT:\r\n                    return readShort() != 0;\r\n            case SQLTokenizer.INT:\r\n                    return readInt() != 0;\r\n            case SQLTokenizer.BIGINT:\r\n                    return readLong() != 0;\r\n            case SQLTokenizer.REAL:\r\n                    return readFloat() != 0;\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return readDouble() != 0;\r\n            case SQLTokenizer.MONEY:\r\n                    return readLong() != 0;\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return readInt() != 0;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().getSignum() != 0;\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return Utils.string2boolean( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return Utils.string2boolean( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return Utils.string2boolean( ois.readObject().toString() );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return Utils.bytes2int( readLongBinary() ) != 0;\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\treturn readTimestamp() != 0;\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\treturn readTime() != 0;\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\treturn readDate() != 0;\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\treturn readSmallDateTime() != 0;\r\n            case SQLTokenizer.UNIQUEIDENTIFIER:\r\n                return false;\r\n\t\t\tdefault: \r\n\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"BOOLEAN\" });\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * It used for ResultSet.getInt()\r\n     */\r\n    @Override\r\n    int getInt(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? 1 : 0;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return Utils.bytes2int( readBinary() );\r\n            case SQLTokenizer.TINYINT:\r\n                    return readUnsignedByte();\r\n            case SQLTokenizer.SMALLINT:\r\n                    return readShort();\r\n            case SQLTokenizer.INT:\r\n                    return readInt();\r\n            case SQLTokenizer.BIGINT:\r\n                    return (int)readLong();\r\n            case SQLTokenizer.REAL:\r\n                    return (int)readFloat();\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return (int)readDouble();\r\n            case SQLTokenizer.MONEY:\r\n            \t\tlong longValue = readLong() / 10000;\r\n            \t\treturn Utils.money2int(longValue);\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return readInt() / 10000;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().intValue();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return Integer.parseInt( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return Integer.parseInt( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return ExpressionValue.getInt(ois.readObject().toString(), SQLTokenizer.VARCHAR);\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return Utils.bytes2int( readLongBinary() );\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\treturn (int)readTimestamp();\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\treturn (int)readTime();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\treturn (int)readDate();\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\treturn (int)readSmallDateTime();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"INT\" });\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * It used for ResultSet.getLong()\r\n     */\r\n    @Override\r\n    long getLong(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? 1 : 0;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return Utils.bytes2long( readBinary() );\r\n            case SQLTokenizer.TINYINT:\r\n                    return readUnsignedByte();\r\n            case SQLTokenizer.SMALLINT:\r\n                    return readShort();\r\n            case SQLTokenizer.INT:\r\n                    return readInt();\r\n            case SQLTokenizer.BIGINT:\r\n                    return readLong();\r\n            case SQLTokenizer.REAL:\r\n                    return (long)readFloat();\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return (long)readDouble();\r\n            case SQLTokenizer.MONEY:\r\n                    return readLong() / 10000;\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return readInt() / 10000;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().longValue();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return Long.parseLong( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return Long.parseLong( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return ExpressionValue.getLong( ois.readObject().toString(), SQLTokenizer.VARCHAR );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return Utils.bytes2long( readLongBinary() );\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\treturn readTimestamp();\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\treturn readTime();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\treturn readDate();\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\treturn readSmallDateTime();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"BIGINT\" });\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * It used for ResultSet.getFloat()\r\n     */\r\n    @Override\r\n    float getFloat(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? 1 : 0;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return Utils.bytes2float( readBinary() );\r\n            case SQLTokenizer.TINYINT:\r\n                    return readUnsignedByte();\r\n            case SQLTokenizer.SMALLINT:\r\n                    return readShort();\r\n            case SQLTokenizer.INT:\r\n                    return readInt();\r\n            case SQLTokenizer.BIGINT:\r\n                    return readLong();\r\n            case SQLTokenizer.REAL:\r\n                    return readFloat();\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return (float)readDouble();\r\n            case SQLTokenizer.MONEY:\r\n                    return readLong() / (float)10000.0;\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return readInt() / (float)10000.0;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().floatValue();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return Float.parseFloat( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return Float.parseFloat( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return Float.parseFloat( ois.readObject().toString() );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return Utils.bytes2float( readLongBinary() );\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\treturn readTimestamp();\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\treturn readTime();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\treturn readDate();\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\treturn readSmallDateTime();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"REAL\" });\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * It used for ResultSet.getDouble()\r\n     */\r\n    @Override\r\n    double getDouble(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? 1 : 0;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return Utils.bytes2double( readBinary() );\r\n            case SQLTokenizer.TINYINT:\r\n                    return readUnsignedByte();\r\n            case SQLTokenizer.SMALLINT:\r\n                    return readShort();\r\n            case SQLTokenizer.INT:\r\n                    return readInt();\r\n            case SQLTokenizer.BIGINT:\r\n                    return readLong();\r\n            case SQLTokenizer.REAL:\r\n                    return readFloat();\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return readDouble();\r\n            case SQLTokenizer.MONEY:\r\n                    return readLong() / 10000.0;\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return readInt() / 10000.0;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().doubleValue();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return Double.parseDouble( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return Double.parseDouble( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return Double.parseDouble( ois.readObject().toString() );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return Utils.bytes2double( readLongBinary() );\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\treturn readTimestamp();\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\treturn readTime();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\treturn readDate();\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\treturn readSmallDateTime();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" });\r\n        }\r\n    }\r\n\r\n    // is used for faster calculation\r\n    @Override\r\n    long getMoney( int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return 0;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? 10000 : 0;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return (long)(Utils.bytes2double( readBinary() ) * 10000L);\r\n            case SQLTokenizer.TINYINT:\r\n                    return readUnsignedByte() * 10000L;\r\n            case SQLTokenizer.SMALLINT:\r\n                    return readShort() * 10000L;\r\n            case SQLTokenizer.INT:\r\n                    return readInt() * 10000L;\r\n            case SQLTokenizer.BIGINT:\r\n                    return readLong() * 10000L;\r\n            case SQLTokenizer.REAL:\r\n                    return (long)(readFloat() * 10000L);\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return (long)(readDouble() * 10000L);\r\n            case SQLTokenizer.MONEY:\r\n                    return readLong();\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return readInt();\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return (long)(readNumeric().doubleValue() * 10000L);\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return Money.parseMoney( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return Money.parseMoney( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return Money.parseMoney( ois.readObject().toString() );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return (long)(Utils.bytes2double( readLongBinary() ) * 10000L);\r\n            case SQLTokenizer.TIMESTAMP:\r\n            case SQLTokenizer.TIME:\r\n            case SQLTokenizer.DATE:\r\n            case SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\tthrow SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"MONEY\" });\r\n            default: throw new Error();\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * It used for ResultSet.getBigDecimal()\r\n     */\r\n    @Override\r\n    MutableNumeric getNumeric(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return null;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? new MutableNumeric(1) : new MutableNumeric(0);\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return new MutableNumeric(Utils.bytes2double( readBinary() ));\r\n            case SQLTokenizer.TINYINT:\r\n                    return new MutableNumeric(readUnsignedByte());\r\n            case SQLTokenizer.SMALLINT:\r\n                    return new MutableNumeric(readShort());\r\n            case SQLTokenizer.INT:\r\n                    return new MutableNumeric(readInt());\r\n            case SQLTokenizer.BIGINT:\r\n                    return new MutableNumeric(readLong());\r\n            case SQLTokenizer.REAL:\r\n                    return new MutableNumeric(readFloat());\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return new MutableNumeric(readDouble());\r\n            case SQLTokenizer.MONEY:\r\n                    return new MutableNumeric( readLong(), 4);\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return new MutableNumeric( readInt(), 4);\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return new MutableNumeric( readString() );\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return new MutableNumeric( readLongString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return new MutableNumeric( ois.readObject().toString() );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return new MutableNumeric( Utils.bytes2double( readLongBinary() ) );\r\n            case SQLTokenizer.TIMESTAMP:\r\n            case SQLTokenizer.TIME:\r\n            case SQLTokenizer.DATE:\r\n            case SQLTokenizer.SMALLDATETIME:\r\n                    throw SmallSQLException.create(Language.VALUE_CANT_CONVERT, new Object[] { SQLTokenizer.getKeyWord(dataType), \"NUMERIC\" });\r\n            // SAVER: check if this should be a kind of \"type not recognized\" exception.\r\n            default: throw new Error();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * It used for ResultSet.getObject()\r\n     */\r\n    @Override\r\n    Object getObject(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return null;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return readBoolean() ? Boolean.TRUE : Boolean.FALSE;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return readBinary();\r\n            case SQLTokenizer.TINYINT:\r\n                    return Utils.getInteger( readUnsignedByte() );\r\n            case SQLTokenizer.SMALLINT:\r\n                    return Utils.getInteger( readShort() );\r\n            case SQLTokenizer.INT:\r\n                    return Utils.getInteger(readInt());\r\n            case SQLTokenizer.BIGINT:\r\n                    return new Long(readLong());\r\n            case SQLTokenizer.REAL:\r\n                    return new Float( readFloat() );\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return new Double( readDouble() );\r\n            case SQLTokenizer.MONEY:\r\n                    return Money.createFromUnscaledValue(readLong());\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return Money.createFromUnscaledValue(readInt());\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return readString();\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return readLongString();\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return ois.readObject();\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return readLongBinary();\r\n            case SQLTokenizer.TIMESTAMP:\r\n                    return new DateTime( readTimestamp(), SQLTokenizer.TIMESTAMP );\r\n            case SQLTokenizer.TIME:\r\n                    return new DateTime( readTime(), SQLTokenizer.TIME );\r\n            case SQLTokenizer.DATE:\r\n                    return new DateTime( readDate(), SQLTokenizer.DATE );\r\n            case SQLTokenizer.SMALLDATETIME:\r\n                    return new DateTime( readSmallDateTime(), SQLTokenizer.TIMESTAMP );\r\n            case SQLTokenizer.UNIQUEIDENTIFIER:\r\n                    return Utils.bytes2unique( page, this.offset);\r\n            default: throw new Error();\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * It used for ResultSet.getString()\r\n     */\r\n    @Override\r\n    String getString( int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return null;\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n                    return readBoolean() ? \"1\" : \"0\";\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return String.valueOf( readBoolean() );\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return Utils.bytes2hex( readBinary() );\r\n            case SQLTokenizer.TINYINT:\r\n                    return String.valueOf( readUnsignedByte() );\r\n            case SQLTokenizer.SMALLINT:\r\n                    return String.valueOf( readShort() );\r\n            case SQLTokenizer.INT:\r\n                    return String.valueOf( readInt() );\r\n            case SQLTokenizer.BIGINT:\r\n                    return String.valueOf( readLong() );\r\n            case SQLTokenizer.REAL:\r\n                    return String.valueOf( readFloat() );\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return String.valueOf( readDouble() );\r\n            case SQLTokenizer.MONEY:\r\n                    return Money.createFromUnscaledValue( readLong() ).toString();\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return Money.createFromUnscaledValue( readInt() ).toString();\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().toString();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return readString();\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return readLongString();\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    ByteArrayInputStream bais = new ByteArrayInputStream(readLongBinary());\r\n                    ObjectInputStream ois = new ObjectInputStream(bais);\r\n                    return ois.readObject().toString();\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return Utils.bytes2hex( readLongBinary() );\r\n            case SQLTokenizer.TIMESTAMP:\r\n                    return new DateTime( readTimestamp(), SQLTokenizer.TIMESTAMP ).toString();\r\n            case SQLTokenizer.TIME:\r\n                    return new DateTime( readTime(), SQLTokenizer.TIME ).toString();\r\n            case SQLTokenizer.DATE:\r\n                    return new DateTime( readDate(), SQLTokenizer.DATE ).toString();\r\n            case SQLTokenizer.SMALLDATETIME:\r\n                    return new DateTime( readSmallDateTime(), SQLTokenizer.TIMESTAMP ).toString();\r\n            case SQLTokenizer.UNIQUEIDENTIFIER:\r\n                    return Utils.bytes2unique( page, this.offset);\r\n            default: throw new Error();\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * It used for ResultSet.getBytes()\r\n     */\r\n    @Override\r\n    byte[] getBytes(int valueOffset, int dataType) throws Exception{\r\n        this.offset = valueOffset;\r\n        if(readBoolean()) return null;\r\n        switch(dataType){\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return readBinary();\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    byte[] bytes = new byte[1];\r\n                    System.arraycopy( page, valueOffset, bytes, 0, bytes.length);\r\n                    return bytes;\r\n            case SQLTokenizer.SMALLINT:\r\n                    bytes = new byte[2];\r\n                    System.arraycopy( page, valueOffset, bytes, 0, bytes.length);\r\n                    return bytes;\r\n            case SQLTokenizer.INT:\r\n            case SQLTokenizer.REAL:\r\n            case SQLTokenizer.SMALLMONEY:\r\n            case SQLTokenizer.TIME:\r\n            case SQLTokenizer.DATE:\r\n            case SQLTokenizer.SMALLDATETIME:\r\n                    bytes = new byte[4];\r\n                    System.arraycopy( page, valueOffset, bytes, 0, bytes.length);\r\n                    return bytes;\r\n            case SQLTokenizer.BIGINT:\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.TIMESTAMP:\r\n                    bytes = new byte[8];\r\n                    System.arraycopy( page, valueOffset, bytes, 0, bytes.length);\r\n                    return bytes;\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return readNumeric().toByteArray();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n                    return readString().getBytes();\r\n\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\tcase SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n                    return readLongString().getBytes();\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n                    return readLongBinary();\r\n            case SQLTokenizer.UNIQUEIDENTIFIER:\r\n                    bytes = new byte[16];\r\n                    System.arraycopy( page, valueOffset, bytes, 0, bytes.length);\r\n                    return bytes;\r\n            default: throw new Error();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    void scanObjectOffsets( int[] offsets, int dataTypes[] ){\r\n        offset = PAGE_CONTROL_SIZE;\r\n        for(int i=0; i<offsets.length; i++){\r\n            offsets[i] = offset;\r\n            boolean isNull = readBoolean(); // for isNull\r\n            switch(dataTypes[i]){\r\n                case SQLTokenizer.BIT:\r\n                case SQLTokenizer.BOOLEAN:\r\n                case SQLTokenizer.TINYINT:\r\n                    offset++;\r\n                    break;\r\n                case SQLTokenizer.SMALLINT:\r\n                    offset += 2;\r\n                    break;\r\n                case SQLTokenizer.INT:\r\n                case SQLTokenizer.REAL:\r\n                case SQLTokenizer.SMALLMONEY:\r\n                case SQLTokenizer.TIME:\r\n                case SQLTokenizer.DATE:\r\n                case SQLTokenizer.SMALLDATETIME:\r\n                    offset += 4;\r\n                    break;\r\n                case SQLTokenizer.BIGINT:\r\n                case SQLTokenizer.FLOAT:\r\n                case SQLTokenizer.DOUBLE:\r\n                case SQLTokenizer.MONEY:\r\n                case SQLTokenizer.JAVA_OBJECT:\r\n                case SQLTokenizer.LONGVARBINARY:\r\n                case SQLTokenizer.BLOB:\r\n\t\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\t\tcase SQLTokenizer.NCLOB:\r\n                case SQLTokenizer.LONGNVARCHAR:\r\n                case SQLTokenizer.LONGVARCHAR:\r\n                case SQLTokenizer.TIMESTAMP:\r\n                    offset += 8;\r\n                    break;\r\n                case SQLTokenizer.BINARY:\r\n                case SQLTokenizer.VARBINARY:\r\n                    int count = readShort() & 0xFFFF;\r\n                    if(!isNull) offset += count;  // not use += directly because readShort change the offset\r\n                    break;\r\n                case SQLTokenizer.NUMERIC:\r\n                case SQLTokenizer.DECIMAL:\r\n                    count = readByte();\r\n\t\t\t\t\toffset += 2;\r\n\t\t\t\t\tif(!isNull) offset += count*4;\r\n                    break;\r\n                case SQLTokenizer.CHAR:\r\n                case SQLTokenizer.NCHAR:\r\n                case SQLTokenizer.VARCHAR:\r\n                case SQLTokenizer.NVARCHAR:\r\n                    count = readShort() & 0xFFFF;\r\n                    if(!isNull) offset += count << 1; // not use += directly because readShort change the offset\r\n                    break;\r\n                case SQLTokenizer.UNIQUEIDENTIFIER:\r\n                    offset += 16;\r\n                    break;\r\n                default: throw new Error(String.valueOf( dataTypes[i] ) );\r\n            }\r\n        }\r\n    }\r\n\r\n\t@Override\r\n    void deleteRow(SSConnection con) throws SQLException{\r\n\t\tstatus = DELETED;\r\n\t\ttype   = SQLTokenizer.DELETE;\r\n\t\tcreateWriteLock();\r\n\t\twriteFinsh(con);\r\n\t}\r\n\t\r\n\t\r\n\tStorePageLink getLink(){\r\n\t\treturn ((TableStorePageInsert)storePage).getLink();\r\n\t}\r\n    \r\n    /**\r\n     * If this store is a ghost because it was rollback.\r\n     */\r\n    boolean isRollback(){\r\n        return storePage.raFile == null;\r\n    }\r\n}"},{"path":"/src/smallsql/database/ExpressionFunctionRound.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionRound.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\n\r\nfinal class ExpressionFunctionRound extends ExpressionFunctionReturnP1Number {\r\n\r\n    final int getFunction(){ return SQLTokenizer.ROUND; }\r\n\r\n    boolean isNull() throws Exception{\r\n        return param1.isNull() || param2.isNull();\r\n    }\r\n\t\r\n\r\n    final double getDouble() throws Exception{\r\n\t\tif(isNull()) return 0;\r\n\t\tfinal int places = param2.getInt();\r\n\t\tdouble value = param1.getDouble();\r\n\t\tlong factor = 1;\r\n\t\tif(places > 0){\r\n\t\t\tfor(int i=0; i<places; i++){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue *= factor;\r\n\t\t}else{\r\n\t\t\tfor(int i=0; i>places; i--){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue /= factor;\r\n\t\t}\r\n\t\tvalue = Math.rint( value );\r\n\t\tif(places > 0){\r\n\t\t\tvalue /= factor;\r\n\t\t}else{\r\n\t\t\tvalue *= factor;\r\n\t\t}\r\n\t\treturn value;\r\n    }\r\n\t\r\n\r\n}"},{"path":"/src/smallsql/database/language/Language_de.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * Language_it.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database.language;\r\n\r\n/**\r\n * Extended localization class for German language.\r\n */\r\npublic class Language_de extends Language {\r\n\tprotected Language_de() {\r\n\t\taddMessages(ENTRIES);\r\n\t}\r\n\t\r\n\tpublic String[][] getEntries() {\r\n\t\treturn ENTRIES;\r\n\t}\r\n\t\r\n\t//////////////////////////////////////////////////////////////////////\r\n\t// MESSAGES\r\n\t//////////////////////////////////////////////////////////////////////\r\n\t\r\n    private final String[][] ENTRIES = {\r\n            { UNSUPPORTED_OPERATION           , \"Nicht unterstützte Funktion: {0}\" },\r\n            { CANT_LOCK_FILE                  , \"Die Datei ''{0}'' kann nicht gelockt werden. Eine einzelne SmallSQL Datenbank kann nur für einen einzigen Prozess geöffnet werden.\" },\r\n\r\n            { DB_EXISTENT                     , \"Die Datenbank ''{0}'' existiert bereits.\" },\r\n            { DB_NONEXISTENT                  , \"Die Datenbank ''{0}'' existiert nicht.\" },\r\n            { DB_NOT_DIRECTORY                , \"Das Verzeichnis ''{0}'' ist keine SmallSQL Datenbank.\" },\r\n            { DB_NOTCONNECTED                 , \"Sie sind nicht mit einer Datenbank verbunden.\" },\r\n\r\n            { CONNECTION_CLOSED               , \"Die Verbindung ist bereits geschlossen.\" },\r\n\r\n            { VIEW_INSERT                     , \"INSERT wird nicht unterstützt für eine View.\" },\r\n            { VIEWDROP_NOT_VIEW               , \"DROP VIEW kann nicht mit ''{0}'' verwendet werden, weil es keine View ist.\" },\r\n            { VIEW_CANTDROP                   , \"View ''{0}'' kann nicht gelöscht werden.\" },\r\n\r\n            { RSET_NOT_PRODUCED               , \"Es wurde kein ResultSet erzeugt.\" },\r\n            { RSET_READONLY                   , \"Das ResultSet ist schreibgeschützt.\" },\r\n            { RSET_FWDONLY                    , \"Das ResultSet ist forward only.\" },\r\n            { RSET_CLOSED                     , \"Das ResultSet ist geschlossen.\" },\r\n            { RSET_NOT_INSERT_ROW             , \"Der Cursor zeigt aktuell nicht auf die Einfügeposition (insert row).\" },\r\n            { RSET_ON_INSERT_ROW              , \"Der Cursor zeigt aktuell auf die Einfügeposition (insert row).\" },\r\n            { ROWSOURCE_READONLY              , \"Die Rowsource ist schreibgeschützt.\" },\r\n            { STMT_IS_CLOSED                  , \"Das Statement ist bereits geschlossen.\" },\r\n\r\n            { SUBQUERY_COL_COUNT              , \"Die Anzahl der Spalten in der Subquery muss 1 sein und nicht {0}.\" },\r\n            { JOIN_DELETE                     , \"Die Methode deleteRow wird nicht unterstützt für Joins.\" },\r\n            { JOIN_INSERT                     , \"Die Methode insertRow wird nicht unterstützt für Joins.\" },\r\n            { DELETE_WO_FROM                  , \"Die Methode deleteRow benötigt einen FROM Ausdruck.\" },\r\n            { INSERT_WO_FROM                  , \"Die Methode insertRow benötigt einen FROM Ausdruck.\" },\r\n\r\n            { TABLE_CANT_RENAME               , \"Die Tabelle ''{0}'' kann nicht umbenannt werden.\" },\r\n            { TABLE_CANT_DROP                 , \"Die Tabelle ''{0}'' kann nicht gelöscht werden.\" },\r\n            { TABLE_CANT_DROP_LOCKED          , \"Die Tabelle ''{0}'' kann nicht gelöscht werden, weil sie gelockt ist.\" },\r\n            { TABLE_CORRUPT_PAGE              , \"Beschädigte Tabellenseite bei Position: {0}.\" },\r\n            { TABLE_MODIFIED                  , \"Die Tabelle ''{0}'' wurde modifiziert.\" },\r\n            { TABLE_DEADLOCK                  , \"Deadlock, es kann kein Lock erzeugt werden für Tabelle ''{0}''.\" },\r\n            { TABLE_OR_VIEW_MISSING           , \"Tabelle oder View ''{0}'' existiert nicht.\" },\r\n            { TABLE_FILE_INVALID              , \"Die Datei ''{0}'' enthält keine gültige SmallSQL Tabelle.\" },\r\n            { TABLE_OR_VIEW_FILE_INVALID      , \"Die Datei ''{0}'' ist keine gültiger Tabellen oder View Speicher.\" },\r\n            { TABLE_EXISTENT                  , \"Die Tabelle oder View ''{0}'' existiert bereits.\" },\r\n\r\n            { FK_NOT_TABLE                    , \"''{0}'' ist keine Tabelle.\" },\r\n            { PK_ONLYONE                      , \"Eine Tabelle kann nur einen Primärschlüssel haben.\" },\r\n            { KEY_DUPLICATE                   , \"Doppelter Schlüssel.\" },\r\n\r\n            { MONTH_TOOLARGE                  , \"Der Monat ist zu groß im DATE oder TIMESTAMP Wert ''{0}''.\" },\r\n            { DAYS_TOOLARGE                   , \"Die Tage sind zu groß im DATE oder TIMESTAMP Wert ''{0}''.\" },\r\n            { HOURS_TOOLARGE                  , \"Die Stunden sind zu groß im TIME oder TIMESTAMP Wert ''{0}''.\" },\r\n            { MINUTES_TOOLARGE                , \"Die Minuten sind zu groß im TIME oder TIMESTAMP Wert ''{0}''.\" },\r\n            { SECS_TOOLARGE                   , \"Die Sekunden sind zu groß im TIME oder TIMESTAMP Wert ''{0}''.\" },\r\n            { MILLIS_TOOLARGE                 , \"Die Millisekunden sind zu groß im TIMESTAMP Wert ''{0}''.\" },\r\n            { DATETIME_INVALID                , \"''{0}'' ist ein ungültiges DATE, TIME or TIMESTAMP.\" },\r\n\r\n            { UNSUPPORTED_CONVERSION_OPER     , \"Nicht unterstützte Konvertierung zu Datentyp ''{0}'' von Datentyp ''{1}'' für die Operation ''{2}''.\" },\r\n            { UNSUPPORTED_DATATYPE_OPER       , \"Nicht unterstützter Datentyp ''{0}'' für Operation ''{1}''.\" },\r\n            { UNSUPPORTED_DATATYPE_FUNC       , \"Nicht unterstützter Datentyp ''{0}'' für Funktion ''{1}''.\" },\r\n            { UNSUPPORTED_CONVERSION_FUNC     , \"Nicht unterstützte Konvertierung zu Datentyp ''{0}'' für Funktion ''{1}''.\" },\r\n            { UNSUPPORTED_TYPE_CONV           , \"Nicht unterstützter Typ für CONVERT Funktion: {0}.\" },\r\n            { UNSUPPORTED_TYPE_SUM            , \"Nicht unterstützter Datentyp ''{0}'' für SUM Funktion.\" },\r\n            { UNSUPPORTED_TYPE_MAX            , \"Nicht unterstützter Datentyp ''{0}'' für MAX Funktion.\" },\r\n            { UNSUPPORTED_CONVERSION          , \"Kann nicht konvertieren ''{0}'' [{1}] zu ''{2}''.\" },\r\n            { INSERT_INVALID_LEN              , \"Ungültige Länge ''{0}'' in Funktion INSERT.\" },\r\n            { SUBSTR_INVALID_LEN              , \"Ungültige Länge ''{0}'' in Funktion SUBSTRING.\" },\r\n\r\n            { VALUE_STR_TOOLARGE              , \"Der String Wert ist zu groß für die Spalte.\" },\r\n            { VALUE_BIN_TOOLARGE              , \"Ein Binäre Wert mit Länge {0} ist zu groß für eine Spalte mit der Größe {1}.\" },\r\n            { VALUE_NULL_INVALID              , \"Null Werte sind ungültig für die Spalte ''{0}''.\" },\r\n            { VALUE_CANT_CONVERT              , \"Kann nicht konvertieren ein {0} Wert zu einem {1} Wert.\" },\r\n\r\n            { BYTEARR_INVALID_SIZE            , \"Ungültige Bytearray Große {0} für UNIQUEIDENFIER.\" },\r\n            { LOB_DELETED                     , \"Lob Objekt wurde gelöscht.\" },\r\n\r\n            { PARAM_CLASS_UNKNOWN             , \"Unbekante Parameter Klasse: ''{0}''.\" },\r\n            { PARAM_EMPTY                     , \"Parameter {0} ist leer.\" },\r\n            { PARAM_IDX_OUT_RANGE             , \"Parameter Index {0} liegt außerhalb des Gültigkeitsbereiches. Der Wert muss zwischen 1 und {1} liegen.\" },\r\n\r\n            { COL_DUPLICATE                   , \"Es gibt einen doppelten Spaltennamen: ''{0}''.\" },\r\n            { COL_MISSING                     , \"Spalte ''{0}'' wurde nicht gefunden.\" },\r\n            { COL_VAL_UNMATCH                 , \"Die Spaltenanzahl und Werteanzahl ist nicht identisch.\" },\r\n            { COL_INVALID_SIZE                , \"Ungültige Spaltengröße {0} für Spalte ''{1}''.\" },\r\n            { COL_WRONG_PREFIX                , \"Der Spaltenprefix ''{0}'' passt zu keinem Tabellennamen oder Aliasnamen in dieser Abfrage.\" },\r\n            { COL_READONLY                    , \"Die Spalte {0} ist schreibgeschützt.\" },\r\n            { COL_INVALID_NAME                , \"Ungültiger Spaltenname ''{0}''.\" },\r\n            { COL_IDX_OUT_RANGE               , \"Spaltenindex außerhalb des Gültigkeitsbereiches: {0}.\" },\r\n            { COL_AMBIGUOUS                   , \"Die Spalte ''{0}'' ist mehrdeutig.\" },\r\n\r\n            { GROUP_AGGR_INVALID              , \"Aggregatfunktion sind nicht erlaubt im GROUP BY Klausel: ({0}).\" },\r\n            { GROUP_AGGR_NOTPART              , \"Der Ausdruck ''{0}'' ist nicht Teil einer Aggregatfunktion oder GROUP BY Klausel.\" },\r\n            { ORDERBY_INTERNAL                , \"Interner Error mit ORDER BY.\" },\r\n            { UNION_DIFFERENT_COLS            , \"Die SELECT Teile des UNION haben eine unterschiedliche Spaltenanzahl: {0} und {1}.\" },\r\n\r\n            { INDEX_EXISTS                    , \"Index ''{0}'' existiert bereits.\" },\r\n            { INDEX_MISSING                   , \"Index ''{0}'' existiert nicht.\" },\r\n            { INDEX_FILE_INVALID              , \"Die Datei ''{0}'' ist kein gültiger Indexspeicher.\" },\r\n            { INDEX_CORRUPT                   , \"Error beim Laden des Index. Die Index Datei ist beschädigt. ({0}).\" },\r\n            { INDEX_TOOMANY_EQUALS            , \"Zu viele identische Einträge im Index.\" },\r\n\r\n            { FILE_TOONEW                     , \"Dateiversion ({0}) der Datei ''{1}'' ist zu neu für diese Laufzeitbibliothek.\" },\r\n            { FILE_TOOOLD                     , \"Dateiversion ({0}) der Datei ''{1}'' ist zu alt für diese Laufzeitbibliothek.\" },\r\n            { FILE_CANT_DELETE                , \"Datei ''{0}'' kann nicht gelöscht werden.\" },\r\n\r\n            { ROW_0_ABSOLUTE                  , \"Datensatz 0 ist ungültig für die Methode absolute().\" },\r\n            { ROW_NOCURRENT                   , \"Kein aktueller Datensatz.\" },\r\n            { ROWS_WRONG_MAX                  , \"Fehlerhafter Wert für Maximale Datensatzanzahl: {0}.\" },\r\n            { ROW_LOCKED                      , \"Der Datensatz ist gelocked von einer anderen Verbindung.\" },\r\n            { ROW_DELETED                     , \"Der Datensatz ist bereits gelöscht.\" },\r\n\r\n            { SAVEPT_INVALID_TRANS            , \"Der Savepoint ist nicht gültig für die aktuelle Transaction.\" },\r\n            { SAVEPT_INVALID_DRIVER           , \"Der Savepoint ist nicht gültig für diesen Treiber {0}.\" },\r\n\r\n            { ALIAS_UNSUPPORTED               , \"Ein Alias ist nicht erlaubt für diesen Typ von Rowsource.\" },\r\n            { ISOLATION_UNKNOWN               , \"Unbekantes Transaktion Isolation Level: {0}.\" },\r\n            { FLAGVALUE_INVALID               , \"Ungültiger Wert des Flags in Methode getMoreResults: {0}.\" },\r\n            { ARGUMENT_INVALID                , \"Ungültiges Argument in Methode setNeedGenratedKeys: {0}.\" },\r\n            { GENER_KEYS_UNREQUIRED           , \"GeneratedKeys wurden nicht angefordert.\" },\r\n            { SEQUENCE_HEX_INVALID            , \"Ungültige Hexadecimal Sequenze bei Position {0}.\" },\r\n            { SEQUENCE_HEX_INVALID_STR        , \"Ungültige Hexadecimal Sequenze bei Position {0} in ''{1}''.\" },\r\n\r\n            { SYNTAX_BASE_OFS                 , \"Syntax Error bei Position {0} in ''{1}''. \" },\r\n            { SYNTAX_BASE_END                 , \"Syntax Error, unerwartetes Ende des SQL Strings. \" },\r\n            { STXADD_ADDITIONAL_TOK           , \"Zusätzliche Zeichen nach dem Ende des SQL statement.\" },\r\n            { STXADD_IDENT_EXPECT             , \"Bezeichner erwartet.\" },\r\n            { STXADD_IDENT_EMPTY              , \"Leerer Bezeichner.\" },\r\n            { STXADD_IDENT_WRONG              , \"Ungültiger Bezeichner ''{0}''.\" },\r\n            { STXADD_OPER_MINUS               , \"Ungültiger Operator Minus für Datentyp VARBINARY.\" },\r\n            { STXADD_FUNC_UNKNOWN             , \"Unbekannte Funktion.\" },\r\n            { STXADD_PARAM_INVALID_COUNT      , \"Ungültige Paramter Anzahl.\" },\r\n            { STXADD_JOIN_INVALID             , \"Ungültige Join Syntax.\" },\r\n            { STXADD_FROM_PAR_CLOSE           , \"Unerwartet schließende Klammer in FROM Klausel.\" },\r\n            { STXADD_KEYS_REQUIRED            , \"Benötige Schlüsselwörter sind: \" },\r\n            { STXADD_NOT_NUMBER               , \"Eine Zahl ist erforderlich: ''{0}''.\" },\r\n            { STXADD_COMMENT_OPEN             , \"Fehlendes Kommentarende ''*/''.\" },\r\n    };\r\n}"},{"path":"/src/smallsql/junit/TestTransactions.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * TestTransactions.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 05.08.2004\r\n */\r\npackage smallsql.junit;\r\nimport java.sql.*;\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\npublic class TestTransactions extends BasicTestCase {\r\n\r\n\t\r\n\tpublic void testCreateTable() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n        Connection con2 = AllTests.createConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"create table transactions (ID  INTEGER NOT NULL, Name VARCHAR(100), FirstName VARCHAR(100), Points INTEGER, LicenseID INTEGER, PRIMARY KEY(ID))\");\r\n\t\t\tcon.commit();\r\n\r\n\t\t\tcon2.setAutoCommit(false);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tPreparedStatement pr = con2.prepareStatement(\"insert into transactions (id,Name,FirstName,Points,LicenseID) values (?,?,?,?,?)\");\r\n\t\t\tpr.setInt( \t\t1, 0 );\r\n\t\t\tpr.setString( \t2, \"Pilot_1\" );\r\n\t\t\tpr.setString( \t3, \"Herkules\" );\r\n\t\t\tpr.setInt( \t\t4, 1 );\r\n\t\t\tpr.setInt( \t\t5, 1 );\r\n\t\t\tpr.addBatch();\r\n\t\t\tpr.executeBatch();\r\n\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\t\t\tcon2.commit();\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n            con2.close();\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}\r\n\t\r\n\r\n\r\n\t\r\n\tpublic void testCommit() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions Select * From transactions\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.commit();\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * In the table there is already one row that is committed.\r\n\t */\r\n\tpublic void testCommitWithOneCommitRow() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions (Select * From transactions)\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.commit();\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}\r\n\t\r\n\r\n\tpublic void testRollback() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t    con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.rollback();\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * In the table there is already one row that is commited.\r\n\t */\r\n\tpublic void testRollbackWithOneCommitRow() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.rollback();\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprivate void testInsertRow_Last(Connection con, boolean callLastBefore) throws Exception{\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\r\n\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)\r\n\t\t\t\t\t\t\t\t.executeQuery(\"Select * from transactions Where 1=0\");\r\n\t\t\t\r\n\t\t\tif(callLastBefore) rs.last();\r\n\t\t\trs.moveToInsertRow();\r\n\t\t\trs.updateString(\"v\", \"qwert2\");\r\n\t\t\trs.insertRow();\r\n\t\t\t\r\n\t\t\trs.last();\r\n\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));\r\n\t\t\tassertFalse( rs.next() );\r\n\t\t\tassertTrue( rs.previous() );\r\n\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));\r\n\t\t\t\r\n\t\t\trs.beforeFirst();\r\n\t\t\tassertTrue( rs.next() );\r\n\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));\r\n\t\t\tassertFalse( rs.next() );\r\n\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\tpublic void testInsertRow_Last() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttestInsertRow_Last(con, false);\r\n\t\ttestInsertRow_Last(con, true);\r\n\t\tcon.setAutoCommit(false);\r\n\t\ttestInsertRow_Last(con, false);\r\n\t\tcon.setAutoCommit(true);\r\n\t\tcon.setAutoCommit(false);\r\n\t\ttestInsertRow_Last(con, true);\r\n\t\tcon.setAutoCommit(true);\r\n\t}\r\n\r\n\t\r\n\t/**\r\n     * Insert a row and update the inserted row in the same transaction. Then make a partial rollback. Test the correct\r\n     * status after of the table after every change of the database.\r\n     * \r\n     * @throws Exception\r\n     *             if an error occur\r\n     */\r\n\tpublic void testInsertAndUpdate() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions ( v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values('qwert')\") );\r\n\t\t\tassertEqualsRsValue(\"qwert\", \"Select * from transactions\");\r\n\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\t\t\t\r\n\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\") );\r\n\t\t\tassertEqualsRsValue(\"qwert1\", \"Select * from transactions\");\r\n\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\t\t\t\r\n            assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\") );\r\n            assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n            \r\n\t\t\tSavepoint savepoint = con.setSavepoint();\r\n\t\t\t\r\n\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\") );\r\n\t\t\tassertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");\r\n\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\r\n\t\t\tcon.rollback( savepoint );\r\n\t\t\t\r\n\t\t\tcon.commit();\r\n\t\t\tassertEqualsRsValue(\"qwert2\", \"Select * from transactions\");\r\n\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n     * The difference to testInsertAndUpdate() is that the row was not inserted in the same transaction\r\n     */\r\n    public void testUpdateAndSavepoint() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        try{\r\n            con.createStatement().execute(\"Create Table transactions ( v varchar(20))\");\r\n            assertRowCount(0, \"Select * from transactions\");\r\n\r\n            assertEquals(1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values('qwert')\"));\r\n            assertEqualsRsValue(\"qwert\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\r\n            // start the transaction after the row is already insert\r\n            con.setAutoCommit(false);\r\n            assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\"));\r\n            assertEqualsRsValue(\"qwert1\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\r\n            assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\"));\r\n            assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\r\n            Savepoint savepoint = con.setSavepoint();\r\n\r\n            assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\"));\r\n            assertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\r\n            assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 4'\"));\r\n            assertEqualsRsValue(\"qwert 4\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\r\n            assertEquals(1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 5'\"));\r\n            assertEqualsRsValue(\"qwert 5\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n\r\n            con.rollback(savepoint);\r\n\r\n            con.commit();\r\n            assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");\r\n            assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");\r\n        }finally{\r\n            dropTable(con, \"transactions\");\r\n            con.setAutoCommit(true);\r\n        }\r\n    }\r\n    \r\n    \r\n\t/**\r\n     * If there was insert a row within the ResultSet that not map WHERE than you scroll to this row. If there an Insert\r\n     * outsite the ResultSet that not map the WHERE then you can't scroll this row.\r\n     * \r\n     * @throws Exception\r\n     */\r\n\tpublic void testInsertRow_withWrongWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\r\n\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)\r\n\t\t\t\t\t\t\t\t.executeQuery(\"Select * from transactions Where 1=0\");\r\n\t\t\t\r\n\t\t\trs.moveToInsertRow();\r\n\t\t\trs.updateString(\"v\", \"qwert2\");\r\n\t\t\trs.insertRow();\r\n\t\t\t\r\n\t\t\trs.beforeFirst();\r\n\t\t\tassertTrue( rs.next() );\r\n\t\t\tassertEquals(\"qwert2\", rs.getString(\"v\"));\r\n\t\t\tassertFalse( rs.next() );\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\r\n\t/**\r\n\t * A row that was inserted and committed with a valid WHERE expression should not count 2 times.\r\n\t */\r\n\tpublic void testInsertRow_withRightWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");\r\n\r\n\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)\r\n\t\t\t\t\t\t\t\t.executeQuery(\"Select * from transactions Where v = 'qwert'\");\r\n\t\t\t\r\n\t\t\trs.moveToInsertRow();\r\n\t\t\trs.updateString(\"v\", \"qwert\");\r\n\t\t\trs.insertRow();\r\n\t\t\t\r\n\t\t\trs.beforeFirst();\r\n\t\t\tassertTrue( rs.next() );\r\n\t\t\tassertEquals(\"qwert\", rs.getString(\"v\"));\r\n\t\t\tassertFalse( rs.next() );\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\tpublic void testReadUncommited() throws Exception{\r\n\t\tConnection con1 = AllTests.getConnection();\r\n\t\tConnection con2 = AllTests.createConnection();\r\n\t\ttry{\t\t\r\n\t\t\tcon2.setTransactionIsolation( Connection.TRANSACTION_READ_UNCOMMITTED );\r\n\t\t\tcon1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon1.setAutoCommit(false);\r\n\t\t\tcon1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");\r\n\r\n\t\t\tResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");\r\n\t\t\tassertTrue( rs2.next() );\r\n\t\t\tassertEquals( 1, rs2.getInt(1) );\r\n\t\t}finally{\r\n\t\t    dropTable(con1, \"transactions\");\r\n\t\t\tcon1.setAutoCommit(true);\r\n\t\t\tcon2.close();\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\tpublic void testReadCommited() throws Exception{\r\n\t\tConnection con1 = AllTests.getConnection();\r\n\t\tConnection con2 = AllTests.createConnection();\r\n\t\ttry{\t\t\r\n\t\t\tcon2.setTransactionIsolation( Connection.TRANSACTION_READ_COMMITTED );\r\n\t\t\tcon1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon1.setAutoCommit(false);\r\n\t\t\tcon1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");\r\n\r\n\t\t\tResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");\r\n\t\t\tassertTrue( rs2.next() );\r\n\t\t\tassertEquals( 0, rs2.getInt(1) );\r\n\t\t}finally{\r\n            dropTable(con1, \"transactions\");\r\n\t\t\tcon1.setAutoCommit(true);\r\n\t\t\tcon2.close();\r\n\t\t}\r\n\t}\r\n\r\n\r\n    public void testReadSerialized() throws Exception{\r\n        Connection con1 = AllTests.getConnection();\r\n        Connection con2 = AllTests.createConnection();\r\n        try{        \r\n            con1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n            assertRowCount( 0, \"Select * from transactions\");\r\n            con1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");\r\n            assertRowCount( 1, \"Select * from transactions\");\r\n\r\n            con1.setTransactionIsolation( Connection.TRANSACTION_SERIALIZABLE );\r\n            con1.setAutoCommit(false);\r\n\r\n            //create a serialize lock on the table\r\n            ResultSet rs1 = con1.createStatement().executeQuery(\"Select count(*) from transactions\");\r\n            assertTrue( rs1.next() );\r\n            assertEquals( \"Count(*)\", 1, rs1.getInt(1) );\r\n            \r\n            //reading should be possible on a second connection\r\n            ResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");\r\n            assertTrue( rs2.next() );\r\n            assertEquals( \"Count(*)\", 1, rs2.getInt(1) );\r\n            try{\r\n                con2.createStatement().execute(\"Insert Into transactions(v) Values('qwert3')\");\r\n                fail(\"TRANSACTION_SERIALIZABLE does not lock the table\");\r\n            }catch(SQLException ex){\r\n                assertSQLException(\"01000\", 0, ex);\r\n            }\r\n        }finally{\r\n            con2.close();\r\n            dropTable(con1, \"transactions\");\r\n            con1.setAutoCommit(true);\r\n        }\r\n    }\r\n\r\n\r\n\tpublic void testReadWriteLock() throws Exception{\r\n\t\tConnection con1 = AllTests.getConnection();\r\n\t\tConnection con2 = AllTests.createConnection();\r\n\t\ttry{\t\t\r\n\t\t\tcon1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tcon1.createStatement().execute(\"Insert Into transactions(v) Values('qwert1')\");\r\n\r\n\t\t\tcon1.setAutoCommit(false);\r\n\t\t\tcon1.createStatement().execute(\"Update transactions Set v = 'qwert'\");\r\n\t\t\t\r\n\t\t\tlong time = System.currentTimeMillis();\r\n\t\t\ttry{\r\n\t\t\t\tcon2.createStatement().executeQuery(\"Select count(*) from transactions\");\r\n\t\t\t}catch(SQLException ex){\r\n\t\t\t    assertSQLException(\"01000\", 0, ex);\r\n\t\t\t}\t\t\r\n\t\t\tassertTrue(\"Wait time to small\", System.currentTimeMillis()-time>=5000);\r\n\t\t}finally{\r\n\t\t    con2.close();\r\n\t\t\tcon1.setAutoCommit(true);\r\n\t\t\tdropTable(con1, \"transactions\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n"},{"path":"/src/smallsql/junit/TestGroupBy.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * TestGroupBy.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.junit;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.sql.*;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n *\r\n */\r\npublic class TestGroupBy extends BasicTestCase {\r\n\r\n\tprivate static final String table1 = \"table_GroupBy1\";\r\n\t\r\n\tprivate static final String STR_VALUE1 = \"name1\";\r\n\tprivate static final String STR_VALUE2 = \"name2\";\r\n\r\n\tprivate boolean init;\r\n\tpublic TestGroupBy() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tpublic TestGroupBy(String name) {\r\n\t\tsuper(name);\r\n\t}\r\n\r\n\tpublic void init(){\r\n\t\tif(init) return;\r\n\t\ttry{\r\n\t\t\tConnection con = AllTests.getConnection();\r\n\t\t\tdropTable( con, table1 );\r\n\t\t\tStatement st = con.createStatement();\r\n\t\t\tst.execute(\"create table \" + table1 + \"(name varchar(30), id int )\");\r\n\t\t\t//st.execute(\"create table \" + table2 + \"(c \" + testValue.dataType +\", d \" + testValue.dataType + \")\");\r\n\t\t\t//st.execute(\"create table \" + table3 + \"(c \" + testValue.dataType +\", d \" + testValue.dataType + \")\");\r\n\t\t\tst.close();\r\n\t\t\tPreparedStatement pr = con.prepareStatement(\"INSERT into \" + table1 + \"(name, id) Values(?,?)\");\r\n\t\t\tpr.setString( 1, STR_VALUE1);\r\n\t\t\tpr.setInt( 2, 1 );\r\n\t\t\tpr.execute();\r\n\t\t\tpr.setString( 1, STR_VALUE1);\r\n\t\t\tpr.setInt( 2, 2 );\r\n\t\t\tpr.execute();\r\n\t\t\tpr.setString( 1, STR_VALUE1);\r\n\t\t\tpr.setNull( 2, Types.INTEGER );\r\n\t\t\tpr.execute();\r\n\t\t\tpr.setString( 1, STR_VALUE2);\r\n\t\t\tpr.setInt( 2, 1 );\r\n\t\t\tpr.execute();\r\n\r\n\t\t\tpr.close();\r\n\r\n\t\t\tinit = true;\r\n\t\t}catch(Throwable e){\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void testTest() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\t/*\r\n\t\trs = st.executeQuery(\"Select name FROM \" + table1 + \" Group By name\");\r\n\t\twhile(rs.next()){\r\n\t\t\tSystem.out.println( rs.getObject(1) ); \r\n\t\t}*/\r\n\t\t\r\n\t\trs = st.executeQuery(\"Select count(id) FROM \" + table1 + \" Group By name\");\r\n\t\twhile(rs.next()){\r\n\t\t\trs.getObject(1);\r\n\t\t}\r\n\r\n\t\trs = st.executeQuery(\"Select count(*) FROM \" + table1 + \" Group By name\");\r\n\t\twhile(rs.next()){\r\n\t\t\trs.getObject(1);\r\n\t\t}\r\n\r\n\t\trs = st.executeQuery(\"Select count(*) FROM \" + table1);\r\n\t\tassertTrue(rs.next());\r\n\t\tassertEquals( 4, rs.getInt(1));\r\n\r\n\t\trs = st.executeQuery(\"Select count(id) FROM \" + table1);\r\n\t\tassertTrue(rs.next());\r\n\t\tassertEquals( 3, rs.getInt(1));\r\n\r\n\t\trs = st.executeQuery(\"Select count(*)+1 FROM \" + table1);\r\n\t\tassertTrue(rs.next());\r\n\t\tassertEquals( 5, rs.getInt(1));\r\n\t}\r\n\r\n\tpublic void testCountWhere() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new Integer(0), \"Select count(*) FROM \" + table1 + \" Where id=-1234\");\r\n\t}\r\n\t\r\n\tpublic void testCountWherePrepare() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tPreparedStatement pr = con.prepareStatement(\"Select count(*) FROM \" + table1 + \" Where id=-1234\");\r\n\t\tfor(int i=1; i<=3; i++){\r\n\t\t\tResultSet rs = pr.executeQuery();\r\n\t\t\tassertTrue( \"No row produce in loop:\"+i, rs.next());\t\r\n\t\t\tassertEquals( \"loop:\"+i, 0, rs.getInt(1));\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic void testCountOrderBy() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tPreparedStatement pr = con.prepareStatement(\"Select count(*) FROM \" + table1 + \" Group By name Order By name DESC\");\r\n\t\tfor(int i=1; i<=3; i++){\r\n\t\t\tResultSet rs = pr.executeQuery( );\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 1, rs.getInt(1));\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 3, rs.getInt(1));\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic void testGroupByWithExpression() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tPreparedStatement pr = con.prepareStatement(\"Select sum(id), name+'a' as ColumnName FROM \" + table1 + \" Group By name+'a' Order By Name+'a'\");\r\n\t\tfor(int i=1; i<=3; i++){\r\n\t\t\tResultSet rs = pr.executeQuery( );\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 3, rs.getInt(1));\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 1, rs.getInt(1));\r\n\t\t\tassertEquals( \"loop:\"+i+\" Alias name von Expression\", \"ColumnName\", rs.getMetaData().getColumnName(2));\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic void testComplex() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tPreparedStatement pr = con.prepareStatement(\"Select abs(sum(abs(3-id))+2) FROM \" + table1 + \" Group By name+'a' Order By 'b'+(Name+'a')\");\r\n\t\tfor(int i=1; i<=3; i++){\r\n\t\t\tResultSet rs = pr.executeQuery( );\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 5, rs.getInt(1));\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 4, rs.getInt(1));\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic void testWithNullValue() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue(new Integer(4), \"Select count(*) FROM \" + table1 + \" Group By name+null\" );\r\n\t}\r\n\t\r\n\tpublic void testSumInt() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new Integer(4), \"Select sum(id) FROM \" + table1);\r\n\t}\r\n\t\r\n\tpublic void testSumLong() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new Long(4), \"Select sum(cast(id as BigInt)) FROM \" + table1);\r\n\t}\r\n\t\r\n\tpublic void testSumReal() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new Float(4), \"Select sum(cast(id as real)) FROM \" + table1);\r\n\t}\r\n\t\r\n\tpublic void testSumDouble() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new Double(4), \"Select sum(cast(id as double)) FROM \" + table1);\r\n\t}\r\n\t\r\n\tpublic void testSumDecimal() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new BigDecimal(\"4.00\"), \"Select sum(cast(id as decimal(38,2))) FROM \" + table1);\r\n\t}\r\n\t\r\n\tpublic void testMaxInt() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new Integer(2), \"Select max(id) FROM \" + table1);\r\n\t}\r\n\t\r\n\tpublic void testMaxBigInt() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new Long(2), \"Select max(cast(id as BigInt)) FROM \" + table1);\r\n\t}\r\n\t\r\n\tpublic void testMaxString() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( STR_VALUE2, \"Select max(name) FROM \" + table1);\r\n\t}\r\n\t\r\n\t\r\n\tpublic void testMaxTinyint() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new Integer(2), \"Select max(convert(tinyint,id)) FROM \" + table1);\r\n\t}\r\n\t\r\n\t\r\n\tpublic void testMaxReal() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new Float(2), \"Select max(convert(real,id)) FROM \" + table1);\r\n\t}\r\n\t\r\n\t\r\n\tpublic void testMaxFloat() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new Double(2), \"Select max(convert(float,id)) FROM \" + table1);\r\n\t}\r\n\t\r\n\t\r\n\tpublic void testMaxDouble() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new Double(2), \"Select max(convert(double,id)) FROM \" + table1);\r\n\t}\r\n\t\r\n\t\r\n\tpublic void testMaxMoney() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new java.math.BigDecimal(\"2.0000\"), \"Select max(convert(money,id)) FROM \" + table1);\r\n\t}\r\n\t\r\n\t\r\n\tpublic void testMaxNumeric() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new java.math.BigDecimal(\"2\"), \"Select max(convert(numeric,id)) FROM \" + table1);\r\n\t}\r\n\t\r\n\t\r\n\tpublic void testMaxDate() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( java.sql.Date.valueOf(\"2345-01-23\"), \"Select max({d '2345-01-23'}) FROM \" + table1);\r\n\t}\r\n\t\r\n\t\r\n\tpublic void testMaxTime() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( java.sql.Time.valueOf(\"12:34:56\"), \"Select max({t '12:34:56'}) FROM \" + table1);\r\n\t}\r\n\t\r\n\tpublic void testMaxTimestamp() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( java.sql.Timestamp.valueOf(\"2345-01-23 12:34:56.123\"), \"Select max({ts '2345-01-23 12:34:56.123'}) FROM \" + table1);\r\n\t}\r\n\t\r\n\tpublic void testMaxUniqueidentifier() throws Exception{\r\n\t\tinit();\r\n\t\tString sql = \"Select max(convert(uniqueidentifier, '12345678-3445-3445-3445-1234567890ab')) FROM \" + table1;\r\n\t\tassertEqualsRsValue( \"12345678-3445-3445-3445-1234567890AB\", sql);\r\n\t}\r\n\t\r\n\tpublic void testMaxOfNull() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( null, \"Select max(id) FROM \" + table1 + \" Where id is null\");\r\n\t}\r\n\t\r\n\tpublic void testMin() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new Integer(1), \"Select min(id) FROM \" + table1);\r\n\t}\r\n\t\r\n\tpublic void testMinString() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( STR_VALUE1, \"Select min(name) FROM \" + table1);\r\n\t}\r\n\t\r\n\tpublic void testMinOfNull() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( null, \"Select min(id) FROM \" + table1 + \" Where id is null\");\r\n\t}\r\n\t\r\n\tpublic void testFirst1() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new Integer(1), \"Select first(id) FROM \" + table1);\r\n\t}\r\n\t\r\n\tpublic void testFirst2() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( \"name1\", \"Select first(name) FROM \" + table1);\r\n\t}\r\n\t\r\n\tpublic void testLast1() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new Integer(1), \"Select last(id) FROM \" + table1);\r\n\t}\r\n\t\r\n\tpublic void testLast2() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( \"name2\", \"Select last(name) FROM \" + table1);\r\n\t}\r\n\t\r\n\t\r\n\tpublic void testAvg() throws Exception{\r\n\t\tinit();\r\n\t\tassertEqualsRsValue( new Integer(1), \"Select avg(id) FROM \" + table1);\r\n\t}\r\n\t\r\n\t\r\n\tpublic void testGroupBy() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\trs = st.executeQuery(\"Select name FROM \" + table1 + \" Group By name\");\r\n\t\tassertTrue(rs.next());\r\n\t\tassertEquals( STR_VALUE1, rs.getObject(1) ); \r\n\t\tassertTrue(rs.next());\r\n\t\tassertEquals( STR_VALUE2, rs.getObject(1) ); \r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * A problem can be the metadata from a View.\r\n\t * @throws Exception\r\n\t */\r\n\tpublic void testViewWidthGroupBy() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\ttry{\r\n\t\t\tResultSet rs;\r\n\t\t\tst.execute(\"Create View qry\" + table1 + \" as Select name, name as name2, count(*) as count FROM \" + table1 + \" Group By name\");\r\n\t\t\trs = st.executeQuery(\"Select * from qry\" + table1);\r\n\t\t\tassertEquals( \"name\",  rs.getMetaData().getColumnLabel(1) );\r\n\t\t\tassertEquals( \"name2\", rs.getMetaData().getColumnLabel(2) );\r\n\t\t\tassertEquals( \"count\", rs.getMetaData().getColumnLabel(3) );\r\n\t\t}finally{\r\n\t\t\tst.execute(\"Drop View qry\" + table1);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\tpublic void testCountNoRow() throws Exception{\r\n\t\tinit();\r\n\t\r\n\t\t// test count(*) without any row\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tst.execute(\"Delete FROM \" + table1);\r\n\t\tinit = false;\r\n\t\tassertEqualsRsValue( new Integer(0), \"Select count(*) FROM \" + table1);\r\n\t}\r\n\t\r\n}\r\n"},{"path":"/src/smallsql/database/SSCallableStatement.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * SSCallableStatament.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\nimport java.sql.*;\r\nimport java.math.*;\r\nimport java.util.Map;\r\nimport java.util.Calendar;\r\nimport java.net.URL;\r\nimport java.io.*;\r\nimport smallsql.database.language.Language;\r\n\r\npublic class SSCallableStatement extends SSPreparedStatement implements CallableStatement {\r\n\r\n    private boolean wasNull;\r\n\r\n    SSCallableStatement( SSConnection con, String sql ) throws SQLException {\r\n        super( con, sql );\r\n    }\r\n\r\n    SSCallableStatement( SSConnection con, String sql, int rsType, int rsConcurrency ) throws SQLException {\r\n        super( con, sql, rsType, rsConcurrency );\r\n    }\r\n\r\n    private Expression getValue(int i) throws SQLException{\r\n        /**@todo: Implement this java.sql.CallableStatement method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method getValue() not yet implemented.\");\r\n    }\r\n\r\n    private int findParameter( String parameterName ){\r\n        /**@todo: Implement this java.sql.CallableStatement method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method findParameter() not yet implemented.\");\r\n    }\r\n/*==============================================================================\r\n\r\n    Public Interface\r\n\r\n==============================================================================*/\r\n    public void registerOutParameter(int i, int sqlType) throws SQLException {\r\n        /**@todo: Implement this java.sql.CallableStatement method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method registerOutParameter() not yet implemented.\");\r\n    }\r\n    public void registerOutParameter(int i, int sqlType, int scale) throws SQLException {\r\n        /**@todo: Implement this java.sql.CallableStatement method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method registerOutParameter() not yet implemented.\");\r\n    }\r\n    \r\n    \r\n    public boolean wasNull(){\r\n        return wasNull;\r\n    }\r\n    \r\n    \r\n    public String getString(int i) throws SQLException {\r\n        try{\r\n            String obj = getValue(i).getString();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public boolean getBoolean(int i) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getBoolean();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public byte getByte(int i) throws SQLException {\r\n        return (byte)getInt( i );\r\n    }\r\n    public short getShort(int i) throws SQLException {\r\n        return (byte)getInt( i );\r\n    }\r\n    public int getInt(int i) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getInt();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public long getLong(int i) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public float getFloat(int i) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getFloat();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public double getDouble(int i) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            return expr.getLong();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public BigDecimal getBigDecimal(int i, int scale) throws SQLException {\r\n        try{\r\n            MutableNumeric obj = getValue(i).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal(scale);\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public byte[] getBytes(int i) throws SQLException {\r\n        try{\r\n            byte[] obj = getValue(i).getBytes();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public Date getDate(int i) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public Time getTime(int i) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public Timestamp getTimestamp(int i) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public Object getObject(int i) throws SQLException {\r\n        try{\r\n            Object obj = getValue(i).getObject();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public BigDecimal getBigDecimal(int i) throws SQLException {\r\n        try{\r\n            MutableNumeric obj = getValue(i).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }\r\n    public Object getObject(int i, Map map) throws SQLException {\r\n        /**@todo: Implement this java.sql.CallableStatement method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getObject() not yet implemented.\");\r\n    }\r\n    public Ref getRef(int i) throws SQLException {\r\n        /**@todo: Implement this java.sql.CallableStatement method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getRef() not yet implemented.\");\r\n    }\r\n    public Blob getBlob(int i) throws SQLException {\r\n        /**@todo: Implement this java.sql.CallableStatement method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getBlob() not yet implemented.\");\r\n    }\r\n    public Clob getClob(int i) throws SQLException {\r\n        /**@todo: Implement this java.sql.CallableStatement method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getClob() not yet implemented.\");\r\n    }\r\n    public Array getArray(int i) throws SQLException {\r\n        /**@todo: Implement this java.sql.CallableStatement method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getArray() not yet implemented.\");\r\n    }\r\n    public Date getDate(int i, Calendar cal) throws SQLException {\r\n        /**@todo: Implement this java.sql.CallableStatement method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getDate() not yet implemented.\");\r\n    }\r\n    public Time getTime(int i, Calendar cal) throws SQLException {\r\n        /**@todo: Implement this java.sql.CallableStatement method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getTime() not yet implemented.\");\r\n    }\r\n    public Timestamp getTimestamp(int i, Calendar cal) throws SQLException {\r\n        /**@todo: Implement this java.sql.CallableStatement method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getTimestamp() not yet implemented.\");\r\n    }\r\n    public void registerOutParameter(int i, int sqlType, String typeName) throws SQLException {\r\n        /**@todo: Implement this java.sql.CallableStatement method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method registerOutParameter() not yet implemented.\");\r\n    }\r\n    public void registerOutParameter(String parameterName, int sqlType) throws SQLException {\r\n        registerOutParameter( findParameter( parameterName ), sqlType );\r\n    }\r\n    public void registerOutParameter(String parameterName, int sqlType, int scale) throws SQLException {\r\n        registerOutParameter( findParameter( parameterName ), sqlType, scale );\r\n    }\r\n    public void registerOutParameter(String parameterName, int sqlType, String typeName) throws SQLException {\r\n        registerOutParameter( findParameter( parameterName ), sqlType, typeName );\r\n    }\r\n    public URL getURL(int parameterIndex) throws SQLException {\r\n        /**@todo: Implement this java.sql.CallableStatement method*/\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Method getURL() not yet implemented.\");\r\n    }\r\n    public void setURL(String parameterName, URL x) throws SQLException {\r\n        setURL( findParameter( parameterName ), x );\r\n    }\r\n    public void setNull(String parameterName, int sqlType) throws SQLException {\r\n        setNull( findParameter( parameterName ), sqlType );\r\n    }\r\n    public void setBoolean(String parameterName, boolean x) throws SQLException {\r\n        setBoolean( findParameter( parameterName ), x );\r\n    }\r\n    public void setByte(String parameterName, byte x) throws SQLException {\r\n        setByte( findParameter( parameterName ), x );\r\n    }\r\n    public void setShort(String parameterName, short x) throws SQLException {\r\n        setShort( findParameter( parameterName ), x );\r\n    }\r\n    public void setInt(String parameterName, int x) throws SQLException {\r\n        setInt( findParameter( parameterName ), x );\r\n    }\r\n    public void setLong(String parameterName, long x) throws SQLException {\r\n        setLong( findParameter( parameterName ), x );\r\n    }\r\n    public void setFloat(String parameterName, float x) throws SQLException {\r\n        setFloat( findParameter( parameterName ), x );\r\n    }\r\n    public void setDouble(String parameterName, double x) throws SQLException {\r\n        setDouble( findParameter( parameterName ), x );\r\n    }\r\n    public void setBigDecimal(String parameterName, BigDecimal x) throws SQLException {\r\n        setBigDecimal( findParameter( parameterName ), x );\r\n    }\r\n    public void setString(String parameterName, String x) throws SQLException {\r\n        setString( findParameter( parameterName ), x );\r\n    }\r\n    public void setBytes(String parameterName, byte[] x) throws SQLException {\r\n        setBytes( findParameter( parameterName ), x );\r\n    }\r\n    public void setDate(String parameterName, Date x) throws SQLException {\r\n        setDate( findParameter( parameterName ), x );\r\n    }\r\n    public void setTime(String parameterName, Time x) throws SQLException {\r\n        setTime( findParameter( parameterName ), x );\r\n    }\r\n    public void setTimestamp(String parameterName, Timestamp x) throws SQLException {\r\n        setTimestamp( findParameter( parameterName ), x );\r\n    }\r\n    public void setAsciiStream(String parameterName, InputStream x, int length) throws SQLException {\r\n        setAsciiStream( findParameter( parameterName ), x, length );\r\n    }\r\n    public void setBinaryStream(String parameterName, InputStream x, int length) throws SQLException {\r\n        setBinaryStream( findParameter( parameterName ), x, length );\r\n    }\r\n    public void setObject(String parameterName, Object x, int sqlType, int scale) throws SQLException {\r\n        setObject( findParameter( parameterName ), x, sqlType, scale );\r\n    }\r\n    public void setObject(String parameterName, Object x, int sqlType) throws SQLException {\r\n        setObject( findParameter( parameterName ), x, sqlType );\r\n    }\r\n    public void setObject(String parameterName, Object x) throws SQLException {\r\n        setObject( findParameter( parameterName ), x );\r\n    }\r\n    public void setCharacterStream(String parameterName, Reader x, int length) throws SQLException {\r\n        setCharacterStream( findParameter( parameterName ), x, length );\r\n    }\r\n    public void setDate(String parameterName, Date x, Calendar cal) throws SQLException {\r\n        setDate( findParameter( parameterName ), x, cal );\r\n    }\r\n    public void setTime(String parameterName, Time x, Calendar cal) throws SQLException {\r\n        setTime( findParameter( parameterName ), x, cal );\r\n    }\r\n    public void setTimestamp(String parameterName, Timestamp x, Calendar cal) throws SQLException {\r\n        setTimestamp( findParameter( parameterName ), x, cal );\r\n    }\r\n    public void setNull(String parameterName, int sqlType, String typeName) throws SQLException {\r\n        setNull( findParameter( parameterName ), sqlType, typeName );\r\n    }\r\n    public String getString(String parameterName) throws SQLException {\r\n        return getString( findParameter( parameterName ) );\r\n    }\r\n    public boolean getBoolean(String parameterName) throws SQLException {\r\n        return getBoolean( findParameter( parameterName ) );\r\n    }\r\n    public byte getByte(String parameterName) throws SQLException {\r\n        return getByte( findParameter( parameterName ) );\r\n    }\r\n    public short getShort(String parameterName) throws SQLException {\r\n        return getShort( findParameter( parameterName ) );\r\n    }\r\n    public int getInt(String parameterName) throws SQLException {\r\n        return getInt( findParameter( parameterName ) );\r\n    }\r\n    public long getLong(String parameterName) throws SQLException {\r\n        return getLong( findParameter( parameterName ) );\r\n    }\r\n    public float getFloat(String parameterName) throws SQLException {\r\n        return getFloat( findParameter( parameterName ) );\r\n    }\r\n    public double getDouble(String parameterName) throws SQLException {\r\n        return getDouble( findParameter( parameterName ) );\r\n    }\r\n    public byte[] getBytes(String parameterName) throws SQLException {\r\n        return getBytes( findParameter( parameterName ) );\r\n    }\r\n    public Date getDate(String parameterName) throws SQLException {\r\n        return getDate( findParameter( parameterName ) );\r\n    }\r\n    public Time getTime(String parameterName) throws SQLException {\r\n        return getTime( findParameter( parameterName ) );\r\n    }\r\n    public Timestamp getTimestamp(String parameterName) throws SQLException {\r\n        return getTimestamp( findParameter( parameterName ) );\r\n    }\r\n    public Object getObject(String parameterName) throws SQLException {\r\n        return getObject( findParameter( parameterName ) );\r\n    }\r\n    public BigDecimal getBigDecimal(String parameterName) throws SQLException {\r\n        return getBigDecimal( findParameter( parameterName ) );\r\n    }\r\n    public Object getObject(String parameterName, Map map) throws SQLException {\r\n        return getObject( findParameter( parameterName ), map );\r\n    }\r\n    public Ref getRef(String parameterName) throws SQLException {\r\n        return getRef( findParameter( parameterName ) );\r\n    }\r\n    public Blob getBlob(String parameterName) throws SQLException {\r\n        return getBlob( findParameter( parameterName ) );\r\n    }\r\n    public Clob getClob(String parameterName) throws SQLException {\r\n        return getClob( findParameter( parameterName ) );\r\n    }\r\n    public Array getArray(String parameterName) throws SQLException {\r\n        return getArray( findParameter( parameterName ) );\r\n    }\r\n    public Date getDate(String parameterName, Calendar cal) throws SQLException {\r\n        return getDate( findParameter( parameterName ), cal );\r\n    }\r\n    public Time getTime(String parameterName, Calendar cal) throws SQLException {\r\n        return getTime( findParameter( parameterName ), cal );\r\n    }\r\n    public Timestamp getTimestamp(String parameterName, Calendar cal) throws SQLException {\r\n        return getTimestamp( findParameter( parameterName ), cal );\r\n    }\r\n    public URL getURL(String parameterName) throws SQLException {\r\n        return getURL( findParameter( parameterName ) );\r\n    }\r\n}"},{"path":"/src/smallsql/database/SSDatabaseMetaData.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * SSDatabaseMetaData.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\n\r\n\r\nfinal class SSDatabaseMetaData implements DatabaseMetaData {\r\n\tfinal private SSConnection con;\r\n\tfinal private SSStatement st;\r\n\t\r\n\t\r\n    /**\r\n     * @throws SQLException Exception can be throw if the Connection already closed.\r\n     */\r\n    SSDatabaseMetaData(SSConnection con) throws SQLException{\r\n\t\tthis.con = con;\r\n\t\tst = new SSStatement(con);\r\n\t}\r\n\t\r\n    public boolean allProceduresAreCallable() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean allTablesAreSelectable() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public String getURL() throws SQLException {\r\n    \tDatabase database = con.getDatabase(true);\r\n    \tif(database == null)\r\n\t\t\treturn SSDriver.URL_PREFIX;\r\n    \treturn SSDriver.URL_PREFIX + ':' + database.getName();\r\n    }\r\n\t\r\n\t\r\n    public String getUserName() {\r\n    \treturn \"\";\r\n    }\r\n\t\r\n\t\r\n    public boolean isReadOnly() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean nullsAreSortedHigh() {\r\n\t\treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean nullsAreSortedLow() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean nullsAreSortedAtStart() {\r\n\t\treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean nullsAreSortedAtEnd() {\r\n\t\treturn false;\r\n    }\r\n\t\r\n\t\r\n    public String getDatabaseProductName() {\r\n    \treturn \"SmallSQL Database\";\r\n    }\r\n\t\r\n\t\r\n    public String getDatabaseProductVersion() {\r\n    \treturn getDriverVersion();\r\n    }\r\n\t\r\n\t\r\n    public String getDriverName(){\r\n    \treturn \"SmallSQL Driver\";\r\n    }\r\n\t\r\n\t\r\n    public String getDriverVersion() {\r\n    \treturn getDriverMajorVersion() + \".\" + SSDriver.drv.getMinorVersion();\r\n    }\r\n\t\r\n\t\r\n    public int getDriverMajorVersion() {\r\n    \treturn SSDriver.drv.getMajorVersion();\r\n    }\r\n\t\r\n\t\r\n    public int getDriverMinorVersion() {\r\n\t\treturn SSDriver.drv.getMinorVersion();\r\n    }\r\n\t\r\n\t\r\n    public boolean usesLocalFiles() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean usesLocalFilePerTable() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsMixedCaseIdentifiers() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean storesUpperCaseIdentifiers() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean storesLowerCaseIdentifiers() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean storesMixedCaseIdentifiers() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsMixedCaseQuotedIdentifiers() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean storesUpperCaseQuotedIdentifiers() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean storesLowerCaseQuotedIdentifiers() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean storesMixedCaseQuotedIdentifiers() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public String getIdentifierQuoteString() {\r\n    \treturn \"\\\"\";\r\n    }\r\n\t\r\n\t\r\n    public String getSQLKeywords() {\r\n    \treturn \"database,use\";\r\n    }\r\n    \r\n    \r\n    private String getFunctions(int from, int to){\r\n\t\tStringBuffer buf = new StringBuffer();\r\n\t\tfor(int i=from; i<=to; i++){\r\n\t\t\tif(i != from) buf.append(',');\r\n\t\t\tbuf.append( SQLTokenizer.getKeyWord(i) );\r\n\t\t}\r\n\t\treturn buf.toString();\r\n    }\r\n    \r\n    \r\n    public String getNumericFunctions() {\r\n    \treturn getFunctions(SQLTokenizer.ABS, SQLTokenizer.TRUNCATE);\r\n    }\r\n    \r\n    \r\n    public String getStringFunctions() {\r\n\t\treturn getFunctions(SQLTokenizer.ASCII, SQLTokenizer.UCASE);\r\n    }\r\n    \r\n    \r\n    public String getSystemFunctions() {\r\n\t\treturn getFunctions(SQLTokenizer.IFNULL, SQLTokenizer.IIF);\r\n    }\r\n    \r\n    \r\n    public String getTimeDateFunctions() {\r\n\t\treturn getFunctions(SQLTokenizer.CURDATE, SQLTokenizer.YEAR);\r\n    }\r\n    \r\n    \r\n    public String getSearchStringEscape() {\r\n    \treturn \"\\\\\";\r\n    }\r\n    \r\n    \r\n    public String getExtraNameCharacters() {\r\n    \treturn \"#$ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ\";\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsAlterTableWithAddColumn() {\r\n        /**@todo: Implement this java.sql.DatabaseMetaData method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method supportsAlterTableWithAddColumn() not yet implemented.\");\r\n    }\r\n    public boolean supportsAlterTableWithDropColumn() {\r\n        /**@todo: Implement this java.sql.DatabaseMetaData method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method supportsAlterTableWithDropColumn() not yet implemented.\");\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsColumnAliasing() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean nullPlusNonNullIsNull() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsConvert() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsConvert(int fromType, int toType) {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsTableCorrelationNames() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsDifferentTableCorrelationNames() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsExpressionsInOrderBy() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsOrderByUnrelated() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsGroupBy() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsGroupByUnrelated() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsGroupByBeyondSelect() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsLikeEscapeClause() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsMultipleResultSets() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsMultipleTransactions() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsNonNullableColumns() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsMinimumSQLGrammar() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsCoreSQLGrammar() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsExtendedSQLGrammar() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsANSI92EntryLevelSQL() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsANSI92IntermediateSQL() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsANSI92FullSQL() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsIntegrityEnhancementFacility() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsOuterJoins() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsFullOuterJoins() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsLimitedOuterJoins() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public String getSchemaTerm() {\r\n    \treturn \"owner\";\r\n    }\r\n\t\r\n\t\r\n    public String getProcedureTerm() {\r\n    \treturn \"procedure\";\r\n    }\r\n\t\r\n\t\r\n    public String getCatalogTerm() {\r\n    \treturn \"database\";\r\n    }\r\n\t\r\n\t\r\n    public boolean isCatalogAtStart() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public String getCatalogSeparator() {\r\n    \treturn \".\";\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsSchemasInDataManipulation() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsSchemasInProcedureCalls() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsSchemasInTableDefinitions() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsSchemasInIndexDefinitions() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsSchemasInPrivilegeDefinitions() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsCatalogsInDataManipulation() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsCatalogsInProcedureCalls() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsCatalogsInTableDefinitions() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsCatalogsInIndexDefinitions() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsCatalogsInPrivilegeDefinitions() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsPositionedDelete() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsPositionedUpdate() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsSelectForUpdate() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsStoredProcedures() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsSubqueriesInComparisons() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsSubqueriesInExists() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsSubqueriesInIns() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsSubqueriesInQuantifieds() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsCorrelatedSubqueries() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsUnion() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsUnionAll() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsOpenCursorsAcrossCommit() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsOpenCursorsAcrossRollback() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsOpenStatementsAcrossCommit() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsOpenStatementsAcrossRollback() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxBinaryLiteralLength() {\r\n    \treturn 0;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxCharLiteralLength() {\r\n    \treturn 0;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxColumnNameLength() {\r\n    \treturn 255;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxColumnsInGroupBy() {\r\n    \treturn 0;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxColumnsInIndex() {\r\n    \treturn 0;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxColumnsInOrderBy() {\r\n    \treturn 0;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxColumnsInSelect() {\r\n    \treturn 0;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxColumnsInTable() {\r\n    \treturn 0;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxConnections() {\r\n    \treturn 0;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxCursorNameLength() {\r\n    \treturn 0;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxIndexLength() {\r\n    \treturn 0;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxSchemaNameLength() {\r\n    \treturn 255;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxProcedureNameLength() {\r\n    \treturn 255;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxCatalogNameLength() {\r\n    \treturn 255;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxRowSize() {\r\n    \treturn 0;\r\n    }\r\n\t\r\n\t\r\n    public boolean doesMaxRowSizeIncludeBlobs() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxStatementLength() {\r\n    \treturn 0;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxStatements() {\r\n    \treturn 0;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxTableNameLength() {\r\n    \treturn 255;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxTablesInSelect() {\r\n    \treturn 0;\r\n    }\r\n\t\r\n\t\r\n    public int getMaxUserNameLength() {\r\n    \treturn 0;\r\n    }\r\n\t\r\n\t\r\n    public int getDefaultTransactionIsolation() {\r\n    \treturn Connection.TRANSACTION_READ_COMMITTED;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsTransactions() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsTransactionIsolationLevel(int level) {\r\n    \tswitch(level){\r\n\t\t\tcase Connection.TRANSACTION_NONE:\r\n\t\t\tcase Connection.TRANSACTION_READ_UNCOMMITTED:\r\n    \t\tcase Connection.TRANSACTION_READ_COMMITTED:\r\n\t\t\tcase Connection.TRANSACTION_REPEATABLE_READ:\r\n\t\t\tcase Connection.TRANSACTION_SERIALIZABLE:\r\n\t\t\t\treturn true;\r\n    \t}\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsDataDefinitionAndDataManipulationTransactions() {\r\n    \treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsDataManipulationTransactionsOnly() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean dataDefinitionCausesTransactionCommit() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean dataDefinitionIgnoredInTransactions() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public ResultSet getProcedures(String catalog, String schemaPattern, String procedureNamePattern) throws SQLException {\r\n\t\tString[] colNames = {\"PROCEDURE_CAT\", \"PROCEDURE_SCHEM\", \"PROCEDURE_NAME\", \"\", \"\", \"\", \"REMARKS\", \"PROCEDURE_TYPE\"};  \r\n\t\tObject[][] data   = new Object[0][];\r\n\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));\r\n    }\r\n\t\r\n\t\r\n    public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern, String columnNamePattern) throws SQLException {\r\n\t\tString[] colNames = {\"PROCEDURE_CAT\", \"PROCEDURE_SCHEM\", \"PROCEDURE_NAME\", \"COLUMN_NAME\", \"COLUMN_TYPE\", \"DATA_TYPE\", \"TYPE_NAME\", \"PRECISION\", \"LENGTH\", \"SCALE\", \"RADIX\", \"NULLABLE\", \"REMARKS\" };\r\n\t\tObject[][] data   = new Object[0][];\r\n\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));\r\n    }\r\n\t\r\n\t\r\n    public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types) throws SQLException {\r\n\t\tString[] colNames = {\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"TABLE_TYPE\",\"REMARKS\",\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"SELF_REFERENCING_COL_NAME\",\"REF_GENERATION\"};\r\n\t\tDatabase database;\r\n\t\tif(catalog == null){ \r\n\t\t\tdatabase = con.getDatabase(true);\r\n\t\t\tif(database != null)\r\n\t\t\t\tcatalog = database.getName();\r\n    \t}else{\r\n\t\t\tdatabase = Database.getDatabase(catalog, con, false);\r\n    \t}\r\n\t\tArrayList rows = new ArrayList();\r\n\t\tboolean isTypeTable = types == null;\r\n\t\tboolean isTypeView = types == null;\r\n\t\tfor(int i=0; types != null && i<types.length; i++){\r\n\t\t\tif(\"TABLE\".equalsIgnoreCase(types[i])) isTypeTable = true;\r\n\t\t\tif(\"VIEW\" .equalsIgnoreCase(types[i])) isTypeView  = true;\r\n\t\t}\r\n\t\t\r\n\t\tif(database != null){\r\n\t\t\tStrings tables = database.getTables(tableNamePattern);\r\n\t\t\tfor(int i=0; i<tables.size(); i++){\r\n\t\t\t\tString table = tables.get(i);\r\n\t\t\t\tObject[] row = new Object[10];\r\n\t\t\t\trow[0] = catalog;\r\n\t\t\t\trow[2] = table;\r\n\t\t\t\ttry{\r\n\t\t\t\t\tif(database.getTableView( con, table) instanceof View){\r\n\t\t\t\t\t\tif(isTypeView){\r\n\t\t\t\t\t\t\trow[3] = \"VIEW\";\r\n\t\t\t\t\t\t\trows.add(row);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tif(isTypeTable){\r\n\t\t\t\t\t\t\trow[3] = \"TABLE\";\t\t\t\t\t\r\n\t\t\t\t\t\t\trows.add(row);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}catch(Exception e){\r\n\t\t\t\t\t//TODO invalid VIEWS does not show because it can't load.\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tObject[][] data = new Object[rows.size()][];\r\n\t\trows.toArray(data);\r\n\t\tCommandSelect cmdSelect = Utils.createMemoryCommandSelect( con, colNames, data);\r\n\t\tExpressions order = new Expressions();\r\n\t\torder.add( new ExpressionName(\"TABLE_TYPE\") );\r\n\t\torder.add( new ExpressionName(\"TABLE_NAME\") );\r\n\t\tcmdSelect.setOrder( order );\r\n\t\treturn new SSResultSet( st, cmdSelect);\r\n    }\r\n\t\r\n\t\r\n    public ResultSet getSchemas() throws SQLException {\r\n\t\tString[] colNames = {\"TABLE_SCHEM\"};\r\n\t\tObject[][] data   = new Object[0][];\r\n\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));\r\n    }\r\n\t\r\n    \r\n    public ResultSet getCatalogs() throws SQLException {\r\n    \tString[] colNames = {\"TABLE_CAT\"};\r\n    \tObject[][] data   = Database.getCatalogs(con.getDatabase(true));\r\n    \treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));\r\n    }\r\n\t\r\n    \r\n    public ResultSet getTableTypes() throws SQLException {\r\n\t\tString[] colNames = {\"TABLE_TYPE\"};\r\n\t\tObject[][] data   = {{\"SYSTEM TABLE\"}, {\"TABLE\"}, {\"VIEW\"}};\r\n\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));\r\n    }\r\n\t\r\n    \r\n    public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException {\r\n\t\ttry {\r\n\t\t\tString[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"NUM_PREC_RADIX\", \"NULLABLE\", \"REMARKS\", \"COLUMN_DEF\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"CHAR_OCTET_LENGTH\", \"ORDINAL_POSITION\", \"IS_NULLABLE\"};\r\n\t\t\tObject[][] data   = con.getDatabase(false).getColumns(con, tableNamePattern, columnNamePattern);\r\n\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));\r\n\t\t} catch (Exception e) {\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n    }\r\n\t\r\n\t\r\n    public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern) throws SQLException {\r\n        String[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"GRANTOR\", \"GRANTEE\", \"PRIVILEGE\", \"IS_GRANTABLE\"};\r\n        /**@todo: Implement this java.sql.DatabaseMetaData method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method getColumnPrivileges() not yet implemented.\");\r\n    }\r\n    \r\n    \r\n    public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {\r\n        String[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"GRANTOR\", \"GRANTEE\", \"PRIVILEGE\", \"IS_GRANTABLE\"};\r\n        /**@todo: Implement this java.sql.DatabaseMetaData method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method getTablePrivileges() not yet implemented.\");\r\n    }\r\n\t\r\n\t\r\n    public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable) throws SQLException {\r\n\t\ttry {\r\n\t\t\tString[] colNames = {\"SCOPE\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"PSEUDO_COLUMN\"};\r\n\t\t\tObject[][] data   = con.getDatabase(false).getBestRowIdentifier(con, table);\r\n\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));\r\n\t\t} catch (Exception e) {\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n    }\r\n\t\r\n\t\r\n    public ResultSet getVersionColumns(String catalog, String schema, String table) throws SQLException {\r\n\t\ttry {\r\n\t\t\tString[] colNames = {\"SCOPE\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"PSEUDO_COLUMN\"};\r\n\t\t\tObject[][] data   = new Object[0][0];\r\n\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));\r\n\t\t} catch (Exception e) {\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n    }\r\n\t\r\n\t\r\n    public ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException {\r\n\t\ttry {\r\n\t\t\tString[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"KEY_SEQ\", \"PK_NAME\"};\r\n\t\t\tObject[][] data   = con.getDatabase(false).getPrimaryKeys(con, table);\r\n\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));\r\n\t\t} catch (Exception e) {\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n    }\r\n\t\r\n\t\r\n    public ResultSet getImportedKeys(String catalog, String schema, String table) throws SQLException {\r\n\t\treturn getCrossReference( null, null, null, null, null, table );\r\n    }\r\n\t\r\n\t\r\n    public ResultSet getExportedKeys(String catalog, String schema, String table) throws SQLException {\r\n\t\treturn getCrossReference( null, null, table, null, null, null );\r\n    }\r\n\t\r\n\t\r\n    public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable, String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {\r\n\t\ttry {\r\n\t\t\tString[] colNames = {\"PKTABLE_CAT\", \"PKTABLE_SCHEM\", \"PKTABLE_NAME\", \"PKCOLUMN_NAME\", \"FKTABLE_CAT\", \"FKTABLE_SCHEM\", \"FKTABLE_NAME\", \"FKCOLUMN_NAME\", \"KEY_SEQ\", \"UPDATE_RULE\", \"DELETE_RULE\", \"FK_NAME\", \"PK_NAME\", \"DEFERRABILITY\"};\r\n\t\t\tObject[][] data   = con.getDatabase(false).getReferenceKeys(con, primaryTable, foreignTable);\r\n\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));\r\n\t\t} catch (Exception e) {\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n    }\r\n\t\r\n\t\r\n    public ResultSet getTypeInfo() throws SQLException {\r\n\t\tString[] colNames = {\t\t\"TYPE_NAME\", \t\t\t\t\"DATA_TYPE\", \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"PRECISION\", \t\"LITERAL_PREFIX\", \"LITERAL_SUFFIX\", \t\t\"CREATE_PARAMS\", \"NULLABLE\", \t \"CASE_SENSITIVE\", \"SEARCHABLE\", \"UNSIGNED_ATTRIBUTE\", \"FIXED_PREC_SCALE\", \"AUTO_INCREMENT\", \"LOCAL_TYPE_NAME\", \"MINIMUM_SCALE\", \"MAXIMUM_SCALE\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"NUM_PREC_RADIX\"};\r\n\t\tObject[][] data   = {\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.BIT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIT) ),             Utils.getInteger(1),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TINYINT) ),         Utils.getInteger(3),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.TRUE,  Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIGINT) ),          Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),           Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.MONEY) ),           Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),      Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLMONEY) ),      Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.INT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.INT) ),             Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLINT) ),        Utils.getInteger(5),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.REAL),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.REAL) ),        \t  Utils.getInteger(7),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.BOOLEAN),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BOOLEAN) ),         Utils.getInteger(1),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.TIMESTAMP),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIMESTAMP) ), \t  Utils.getInteger(23),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, Utils.getInteger(3), Utils.getInteger(3), null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},\r\n\t\t {SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null},\r\n\t\t};\r\n\t\t//TODO add more data types to the list\r\n\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));\r\n    }\r\n\t\r\n\t\r\n    public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate) throws SQLException {\r\n\t\ttry {\r\n\t\t\tString[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"NON_UNIQUE\", \"INDEX_QUALIFIER\", \"INDEX_NAME\", \"TYPE\", \"ORDINAL_POSITION\", \"COLUMN_NAME\", \"ASC_OR_DESC\", \"CARDINALITY\", \"PAGES\", \"FILTER_CONDITION\"};\r\n\t\t\tObject[][] data   = con.getDatabase(false).getIndexInfo(con, table, unique);\r\n\t\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));\r\n\t\t} catch (Exception e) {\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsResultSetType(int type) {\r\n\t\tswitch(type){\r\n\t\t\tcase ResultSet.TYPE_FORWARD_ONLY:\r\n\t\t\tcase ResultSet.TYPE_SCROLL_INSENSITIVE:\r\n\t\t\tcase ResultSet.TYPE_SCROLL_SENSITIVE:\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsResultSetConcurrency(int type, int concurrency) {\r\n\t\tif(type >= ResultSet.TYPE_FORWARD_ONLY && type <= ResultSet.TYPE_SCROLL_SENSITIVE &&\r\n\t\t\tconcurrency >= ResultSet.CONCUR_READ_ONLY && concurrency <= ResultSet.CONCUR_UPDATABLE)\r\n\t\t\treturn true;\r\n\t\treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean ownUpdatesAreVisible(int type) {\r\n\t\treturn supportsResultSetType(type);\r\n    }\r\n\t\r\n\t\r\n    public boolean ownDeletesAreVisible(int type) {\r\n\t\treturn supportsResultSetType(type);\r\n    }\r\n\r\n\t\r\n\tpublic boolean ownInsertsAreVisible(int type) {\r\n\t\treturn supportsResultSetType(type);\r\n    }\r\n\t\r\n\t\r\n    public boolean othersUpdatesAreVisible(int type) {\r\n\t\treturn supportsResultSetType(type);\r\n    }\r\n\t\r\n\t\r\n    public boolean othersDeletesAreVisible(int type) {\r\n\t\treturn supportsResultSetType(type);\r\n    }\r\n\t\r\n\t\r\n    public boolean othersInsertsAreVisible(int type) {\r\n\t\treturn supportsResultSetType(type);\r\n    }\r\n\t\r\n\t\r\n    public boolean updatesAreDetected(int type) {\r\n\t\treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean deletesAreDetected(int type) {\r\n\t\treturn supportsResultSetType(type);\r\n    }\r\n\t\r\n\t\r\n    public boolean insertsAreDetected(int type) {\r\n\t\treturn supportsResultSetType(type);\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsBatchUpdates() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public ResultSet getUDTs(String catalog, String schemaPattern, String typeNamePattern, int[] types) throws SQLException {\r\n\t\tString[] colNames = {\"TYPE_CAT\", \"TYPE_SCHEM\", \"TYPE_NAME\", \"CLASS_NAME\", \"DATA_TYPE\", \"REMARKS\"};        \r\n\t\tObject[][] data   = new Object[0][];\r\n\t\treturn new SSResultSet( st, Utils.createMemoryCommandSelect( con, colNames, data));\r\n    }\r\n\t\r\n\t\r\n    public Connection getConnection() {\r\n    \treturn con;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsSavepoints() {\r\n    \treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsNamedParameters() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsMultipleOpenResults() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsGetGeneratedKeys() {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException {\r\n        /**@todo: Implement this java.sql.DatabaseMetaData method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method getSuperTypes() not yet implemented.\");\r\n    }\r\n    public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {\r\n        /**@todo: Implement this java.sql.DatabaseMetaData method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method getSuperTables() not yet implemented.\");\r\n    }\r\n    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern, String attributeNamePattern) throws SQLException {\r\n        /**@todo: Implement this java.sql.DatabaseMetaData method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method getAttributes() not yet implemented.\");\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsResultSetHoldability(int holdability) {\r\n\t\treturn true;\r\n    }\r\n\t\r\n\t\r\n    public int getResultSetHoldability() {\r\n\t\treturn ResultSet.HOLD_CURSORS_OVER_COMMIT;\r\n    }\r\n\t\r\n\t\r\n    public int getDatabaseMajorVersion() {\r\n    \treturn getDriverMajorVersion();\r\n    }\r\n\t\r\n\t\r\n    public int getDatabaseMinorVersion() {\r\n\t\treturn getDriverMinorVersion();\r\n    }\r\n\t\r\n\t\r\n    public int getJDBCMajorVersion() {\r\n    \treturn 3;\r\n    }\r\n\t\r\n\t\r\n    public int getJDBCMinorVersion() {\r\n    \treturn 0;\r\n    }\r\n\t\r\n\t\r\n    public int getSQLStateType() {\r\n\t\treturn sqlStateSQL99;\r\n    }\r\n\t\r\n\t\r\n    public boolean locatorsUpdateCopy() {\r\n\t\treturn false;\r\n    }\r\n\t\r\n\t\r\n    public boolean supportsStatementPooling() {\r\n\t\treturn false;\r\n    }\r\n}"},{"path":"/src/smallsql/database/IndexDescription.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2011, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * IndexDescription.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 19.04.2005\r\n */\r\npackage smallsql.database;\r\n\r\nimport java.io.File;\r\nimport java.nio.ByteBuffer;\r\nimport java.nio.channels.FileChannel;\r\nimport java.sql.DriverManager;\r\nimport java.sql.SQLException;\r\nimport smallsql.database.language.Language;\r\n\r\n\r\nfinal class IndexDescription {\r\n\r\n\tstatic final int MAGIC_INDEX = 'S' << 24 | 'Q' << 16 | 'L' << 8 | 'I';\r\n\tstatic final int INDEX_VERSION = 1;\r\n\t\r\n\tprivate final String name;\r\n\tfinal private int constraintType; //PRIMARY, UNIQUE, FOREIGIN, INDEX\r\n\tfinal private Strings columns;\r\n\tprivate int[] matrix;\r\n\tfinal private Expressions expressions;\r\n\tprivate Index index;\r\n    private FileChannel raFile;\r\n    \r\n\t\r\n\t/**\r\n\t * \r\n\t * @param constraintType one of SQLTokenizer.PRIMARY, SQLTokenizer.UNIQUE, SQLTokenizer.FOREIGN or SQLTokenizer.INDEX.\r\n\t * @param columns the Expressions that build the index. For example one or more database columns.\r\n\t */\r\n\tIndexDescription( String name, String tableName, int constraintType, Expressions expressions, Strings columns){\r\n\t\tthis.constraintType = constraintType;\r\n\t\tthis.expressions = expressions;\r\n\t\tthis.columns = columns;\r\n        this.name = createName(name, tableName);\r\n\t}\r\n    \r\n    \r\n    private static String createName( String defaultName, String tableName ){\r\n        if(defaultName == null){\r\n            defaultName = tableName + \"_\" + Long.toHexString(System.currentTimeMillis()) + Integer.toHexString(new Object().hashCode());\r\n        }\r\n        return defaultName;\r\n    }\r\n\t\r\n\t\r\n\tfinal String getName(){\r\n\t\treturn name;\r\n\t}\r\n\t\r\n\t\r\n\tfinal boolean isPrimary(){\r\n\t\treturn constraintType == SQLTokenizer.PRIMARY;\r\n\t}\r\n\t\r\n\t\r\n\tfinal boolean isUnique(){\r\n\t\treturn constraintType == SQLTokenizer.PRIMARY || constraintType == SQLTokenizer.UNIQUE;\r\n\t}\r\n\t\r\n\t\r\n\tfinal Strings getColumns(){\r\n\t\treturn columns;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Described how well the index match to the column list.\r\n\t * @param strings a list of columns that should match\r\n\t * @return Integer.MAX_VALUE does not match; 0 - 100% match\r\n\t */\r\n\tfinal int matchFactor(Strings strings){\r\n\t\tif(strings.size() < columns.size())\r\n\t\t\treturn Integer.MAX_VALUE; //does not map\r\n\t\t\r\n\t\tnextColumn:\r\n\t\tfor(int c=0; c<columns.size(); c++){\r\n\t\t\tString colName = columns.get(c);\r\n\t\t\tfor(int s=0; s<strings.size(); s++){\r\n\t\t\t\tif(colName.equalsIgnoreCase(strings.get(s)) )\r\n\t\t\t\t\tcontinue nextColumn;\r\n\t\t\t}\r\n\t\t\treturn Integer.MAX_VALUE; //No Strin found for colName\r\n\t\t}\r\n\t\treturn strings.size() - columns.size();\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Create a binding of the columns form this index to the columns of the table.\r\n\t * @param database \r\n\t * @param tableView\r\n\t * @see IndexDescriptions#setTableView\r\n\t */\r\n\tfinal void init(Database database, TableView tableView)/* throws Exception*/{\r\n\t\tint size = tableView.columns.size();\r\n\t\tmatrix = new int[size];\r\n\t\tfor(int i=0; i<matrix.length; i++){\r\n\t\t\tmatrix[i] = -1;\r\n\t\t}\r\n\t\t\r\n\t\tfor(int i=0; i<columns.size(); i++){\r\n\t\t\tmatrix[tableView.findColumnIdx(columns.get(i))] = i;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Create the index. A raFile for storing the index data is saved.\r\n\t */\r\n\tfinal void create(SSConnection con, Database database, TableView tableView) throws Exception{\r\n\t\tinit( database, tableView );\r\n\t\traFile = createFile( con, database );\r\n\t}\r\n\t\r\n\t\r\n\tstatic File getFile(Database database, String name) throws Exception{\r\n\t\treturn new File( Utils.createIdxFileName( database, name ) );\r\n\t}\r\n\t\r\n\r\n\tprivate FileChannel createFile(SSConnection con, Database database) throws Exception{\r\n\t    if( database.isReadOnly() ){\r\n\t        throw SmallSQLException.create(Language.DB_READONLY);\r\n\t    }\r\n\t\tFile file = getFile( database, name );\r\n\t\tboolean ok = file.createNewFile();\r\n\t\tif(!ok) throw SmallSQLException.create(Language.INDEX_EXISTS, name);\r\n\t\tFileChannel randomFile = Utils.openRaFile( file, database.isReadOnly() );\r\n        con.add(new CreateFile(file, randomFile, con, database));\r\n\t\twriteMagic(randomFile);\r\n\t\treturn randomFile;\r\n\t}\r\n    \r\n    \r\n    private void load(Database database) throws SQLException{\r\n        try{\r\n            File file = getFile( database, name );\r\n            if(!file.exists())\r\n                throw SmallSQLException.create(Language.INDEX_MISSING, name);\r\n            raFile = Utils.openRaFile( file, database.isReadOnly() );\r\n            ByteBuffer buffer = ByteBuffer.allocate(8);\r\n            raFile.read(buffer);\r\n            buffer.position(0);\r\n            int magic   = buffer.getInt();\r\n            int version = buffer.getInt();\r\n            if(magic != MAGIC_INDEX){\r\n                throw SmallSQLException.create(Language.INDEX_FILE_INVALID, file.getName());\r\n            }\r\n            if(version > INDEX_VERSION){\r\n            \tObject[] params = { new Integer(version), file.getName() };\r\n                throw SmallSQLException.create(Language.FILE_TOONEW, params);\r\n            }\r\n        }catch(Throwable e){\r\n            if(raFile != null)\r\n                try{\r\n                    raFile.close();\r\n                }catch(Exception e2){\r\n                    DriverManager.println(e2.toString());\r\n                }\r\n            throw SmallSQLException.createFromException(e);\r\n        }\r\n    }\r\n\t\r\n\r\n\tvoid drop(Database database) throws Exception {\r\n        close();\r\n\t\tboolean ok = getFile( database, name).delete();\r\n\t\tif(!ok) throw SmallSQLException.create(Language.TABLE_CANT_DROP, name);\r\n\t}\r\n    \r\n    \r\n    void close() throws Exception{\r\n        if(raFile != null){\r\n            raFile.close();\r\n            raFile = null;\r\n        }\r\n    }\r\n    \r\n\r\n\tprivate final void writeMagic(FileChannel raFile) throws Exception{\r\n\t    ByteBuffer buffer = ByteBuffer.allocate(8);\r\n\t    buffer.putInt(MAGIC_INDEX);\r\n\t    buffer.putInt(INDEX_VERSION);\r\n\t    buffer.position(0);\r\n\t    raFile.write(buffer);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * This is call if a single colum of the table is changed.\r\n\t * @param columnIdx The column position in the table\r\n\t * @param valueExpression the new value of the current row.\r\n\t */\r\n\tfinal void writeExpression( int columnIdx, Expression valueExpression) {\r\n\t\tint idx = matrix[columnIdx];\r\n\t\tif(idx >= 0) //set only if the column part of this index\r\n\t\t\texpressions.set(idx, valueExpression);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * This is call if the row is finish written.\r\n\t * @param con the connection for a later commit or rollback.\r\n\t */\r\n\tfinal void writeFinish(SSConnection con) {\r\n\t\t//TODO\r\n\t\t//index.addValues(expressions);\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Save this IndexDescription in the Table definition.\r\n\t */\r\n\tfinal void save(StoreImpl store) throws SQLException{\r\n\t\tstore.writeInt(constraintType);\r\n\t\tstore.writeInt(columns.size());\r\n\t\tfor(int c=0; c<columns.size(); c++){\r\n\t\t\tstore.writeString( columns.get(c) );\r\n\t\t}\r\n\t\tstore.writeString(name);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Restore a IndexDescription from a saved Table.\r\n\t */\r\n\tfinal static IndexDescription load(Database database, TableView tableView, StoreImpl store) throws SQLException{\r\n\t\tint constraintType = store.readInt();\r\n\t\tint count = store.readInt();\r\n\t\tStrings columns = new Strings();\r\n\t\tExpressions expressions = new Expressions();\r\n\t\tSQLParser sqlParser = new SQLParser();\r\n\t\tfor(int c=0; c<count; c++){\r\n\t\t\tString column = store.readString();\r\n\t\t\tcolumns.add( column );\r\n\t\t\texpressions.add( sqlParser.parseExpression(column));\r\n\t\t}\r\n\t\tIndexDescription indexDesc = new IndexDescription( store.readString(), tableView.name, constraintType, expressions, columns);\r\n        indexDesc.init( database, tableView );\r\n        indexDesc.load(database);\r\n\t\treturn indexDesc;\r\n\t}\r\n\r\n\r\n}\r\n"},{"path":"/src/smallsql/junit/TestDBMetaData.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * TestDBMetaData.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.junit;\r\n\r\nimport java.sql.*;\r\nimport java.text.*;\r\nimport java.util.Locale;\r\n/**\r\n * @author Volker Berlin\r\n *\r\n */\r\npublic class TestDBMetaData extends BasicTestCase {\r\n\r\n\tpublic TestDBMetaData(){\r\n\t\tsuper();\r\n\t}\r\n    \r\n    \r\n\tpublic TestDBMetaData(String arg0) {\r\n\t\tsuper(arg0);\r\n\t}\r\n\r\n    \r\n    public void testGetURL() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        DatabaseMetaData md = con.getMetaData();\r\n        assertEquals( \"URL\", AllTests.JDBC_URL, md.getURL());\r\n    }\r\n    \r\n    \r\n    public void testVersions() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        DatabaseMetaData md = con.getMetaData();\r\n        assertEquals( \"DriverVersion\", md.getDriverVersion(), md.getDatabaseProductVersion());\r\n        Driver driver = DriverManager.getDriver(AllTests.JDBC_URL);\r\n        assertEquals( \"MajorVersion\", driver.getMajorVersion(), md.getDatabaseMajorVersion());\r\n        assertEquals( \"MajorVersion\", driver.getMajorVersion(), md.getDriverMajorVersion());\r\n        assertEquals( \"MinorVersion\", driver.getMinorVersion(), md.getDatabaseMinorVersion());\r\n        assertEquals( \"MinorVersion\", driver.getMinorVersion(), md.getDriverMinorVersion());\r\n        assertEquals( \"Version\", new DecimalFormat(\"###0.00\", new DecimalFormatSymbols(Locale.US)).format(driver.getMajorVersion()+driver.getMinorVersion()/100.0), md.getDriverVersion());\r\n        assertTrue( \"jdbcCompliant\", driver.jdbcCompliant() );\r\n    }\r\n    \r\n    \r\n    public void testFunctions() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        DatabaseMetaData md = con.getMetaData();\r\n        assertEquals( \"getNumericFunctions\", \"ABS,ACOS,ASIN,ATAN,ATAN2,CEILING,COS,COT,DEGREES,EXP,FLOOR,LOG,LOG10,MOD,PI,POWER,RADIANS,RAND,ROUND,SIGN,SIN,SQRT,TAN,TRUNCATE\",\r\n                md.getNumericFunctions());\r\n        assertEquals( \"getStringFunctions\", \"ASCII,BIT_LENGTH,CHAR_LENGTH,CHARACTER_LENGTH,CHAR,CONCAT,DIFFERENCE,INSERT,LCASE,LEFT,LENGTH,LOCATE,LTRIM,OCTET_LENGTH,REPEAT,REPLACE,RIGHT,RTRIM,SOUNDEX,SPACE,SUBSTRING,TRIM,UCASE\",\r\n                md.getStringFunctions());\r\n        assertEquals( \"getStringFunctions\", \"IFNULL,USER,CONVERT,CAST,IIF\",\r\n                md.getSystemFunctions());\r\n        assertEquals( \"getStringFunctions\", \"CURDATE,CURRENT_DATE,CURTIME,DAYNAME,DAYOFMONTH,DAYOFWEEK,DAYOFYEAR,DAY,HOUR,MILLISECOND,MINUTE,MONTH,MONTHNAME,NOW,QUARTER,SECOND,TIMESTAMPADD,TIMESTAMPDIFF,WEEK,YEAR\",\r\n                md.getTimeDateFunctions());\r\n    }\r\n    \r\n    \r\n    public void testGetProcedures() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        DatabaseMetaData md = con.getMetaData();\r\n        ResultSet rs = md.getProcedures( null, null, \"*\");\r\n        String[] colNames = {\"PROCEDURE_CAT\", \"PROCEDURE_SCHEM\", \"PROCEDURE_NAME\", \"\", \"\", \"\", \"REMARKS\", \"PROCEDURE_TYPE\"};\r\n        int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };\r\n        assertRSMetaData( rs, colNames, colTypes);\r\n    }\r\n    \r\n    \r\n    public void testGetProcedureColumns() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        DatabaseMetaData md = con.getMetaData();\r\n        ResultSet rs = md.getProcedureColumns( null, null, \"*\", null);\r\n        String[] colNames = {\"PROCEDURE_CAT\", \"PROCEDURE_SCHEM\", \"PROCEDURE_NAME\", \"COLUMN_NAME\", \"COLUMN_TYPE\", \"DATA_TYPE\", \"TYPE_NAME\", \"PRECISION\", \"LENGTH\", \"SCALE\", \"RADIX\", \"NULLABLE\", \"REMARKS\" };\r\n        int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };\r\n        assertRSMetaData( rs, colNames, colTypes);\r\n    }\r\n    \r\n    \r\n    public void testGetTables() throws Exception{\r\n        String[] colNames = {\"TABLE_CAT\",\"TABLE_SCHEM\",\"TABLE_NAME\",\"TABLE_TYPE\",\"REMARKS\",\"TYPE_CAT\",\"TYPE_SCHEM\",\"TYPE_NAME\",\"SELF_REFERENCING_COL_NAME\",\"REF_GENERATION\"};\r\n        int[] types = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL};\r\n        \r\n        //First test the function without a database connection\r\n        Connection con = DriverManager.getConnection(\"jdbc:smallsql?\");\r\n        DatabaseMetaData md = con.getMetaData();\r\n        ResultSet rs = md.getTables(null, null, null, null);\r\n        super.assertRSMetaData(rs, colNames, new int[colNames.length]); //All types are NULL, because no row.\r\n        assertFalse(rs.next());\r\n        con.close();\r\n        \r\n        //Then test it with a database\r\n        con = AllTests.getConnection();\r\n        md = con.getMetaData();\r\n        rs = md.getTables(null, null, null, null);\r\n        super.assertRSMetaData(rs, colNames, types);\r\n    }\r\n    \r\n    \r\n    public void testGetSchemas() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        DatabaseMetaData md = con.getMetaData();\r\n        ResultSet rs = md.getSchemas();\r\n        String[] colNames = {\"TABLE_SCHEM\"};\r\n        int[] colTypes = {Types.NULL};\r\n        assertRSMetaData( rs, colNames, colTypes);\r\n        assertFalse(rs.next());\r\n    }\r\n    \r\n    \r\n\tpublic void testGetCatalogs() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\r\n\t\t\tcon.createStatement().execute(\"drop database test2\\n\\r\\t\");\r\n\t\t}catch(SQLException e){/* ignore it if the database already exists */}\r\n\t\tcon.createStatement().execute(\"create database test2\");\r\n\t\tDatabaseMetaData md = con.getMetaData();\r\n\t\tResultSet rs = md.getCatalogs();\r\n\t\tassertRSMetaData( rs, new String[]{\"TABLE_CAT\"}, new int[]{Types.VARCHAR});\r\n\t\twhile(rs.next()){\r\n\t\t\tSystem.out.println( \"testCatalogs:\"+rs.getObject(1) );\r\n\t\t}\r\n\t}\r\n\t\r\n    \r\n    public void testGetTableTypes() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        DatabaseMetaData md = con.getMetaData();\r\n        ResultSet rs = md.getTableTypes();\r\n        String[] colNames = {\"TABLE_TYPE\"};\r\n        int[] colTypes = {Types.VARCHAR};\r\n        assertRSMetaData( rs, colNames, colTypes);\r\n        String type = \"\";\r\n        int count = 0;\r\n        while(rs.next()){\r\n            String type2 = rs.getString(\"TABLE_TYPE\");\r\n            assertTrue( type+\"-\"+type2, type.compareTo(type2)<0);\r\n            type = type2;\r\n            count++;\r\n        }\r\n        assertEquals(\"Table Type Count\", 3, count);\r\n    }\r\n    \r\n    \r\n\tpublic void testGetColumn() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tdropTable(con,\"tableColumns\");\r\n\t\tdropView( con, \"viewColumns\");\r\n\t\tcon.createStatement().execute(\"create table tableColumns(a int default 5)\");\r\n\t\tDatabaseMetaData md = con.getMetaData();\r\n\t\t\r\n\t\tResultSet rs = md.getColumns(null, null, \"tableColumns\", null);\r\n        String[] colNames = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"NUM_PREC_RADIX\", \"NULLABLE\", \"REMARKS\", \"COLUMN_DEF\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"CHAR_OCTET_LENGTH\", \"ORDINAL_POSITION\", \"IS_NULLABLE\"};\r\n        int[] colTypes = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.INTEGER, Types.INTEGER, Types.INTEGER, Types.NULL, Types.VARCHAR, Types.NULL, Types.NULL, Types.INTEGER, Types.INTEGER, Types.VARCHAR};\r\n\t\tassertRSMetaData( rs, colNames, colTypes);\t\t\r\n\t\tassertTrue( \"No row\", rs.next() );\r\n\t\tassertEquals( \"a\", rs.getObject(\"COLUMN_NAME\") ); \r\n\t\tassertEquals( \"INT\", rs.getObject(\"TYPE_NAME\") ); \r\n\t\tassertEquals( \"5\", rs.getObject(\"COLUMN_Def\") ); \r\n\t\t\r\n\t\tcon.createStatement().execute(\"create view viewColumns as Select * from tableColumns\");\r\n\t\t\r\n\t\trs = md.getColumns(null, null, \"viewColumns\", null);\r\n\t\tassertRSMetaData( rs, colNames, colTypes);\t\t\r\n\t\tassertTrue( \"No row\", rs.next() );\r\n\t\tassertEquals( \"a\", rs.getObject(\"COLUMN_NAME\") ); \r\n\t\tassertEquals( \"INT\", rs.getObject(\"TYPE_NAME\") ); \r\n\t\tassertEquals( \"5\", rs.getObject(\"COLUMN_Def\") ); \r\n\r\n\t\tdropView( con, \"viewColumns\");\r\n\t\tdropTable( con, \"tableColumns\");\r\n\t}\r\n    \r\n    \r\n    public void testGetTypeInfo() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        DatabaseMetaData md = con.getMetaData();\r\n        \r\n        ResultSet rs = md.getTypeInfo();  \r\n        \r\n        String[] colNames = {\"TYPE_NAME\", \"DATA_TYPE\", \"PRECISION\", \"LITERAL_PREFIX\", \"LITERAL_SUFFIX\", \"CREATE_PARAMS\", \"NULLABLE\", \"CASE_SENSITIVE\", \"SEARCHABLE\", \"UNSIGNED_ATTRIBUTE\", \"FIXED_PREC_SCALE\", \"AUTO_INCREMENT\", \"LOCAL_TYPE_NAME\", \"MINIMUM_SCALE\", \"MAXIMUM_SCALE\", \"SQL_DATA_TYPE\", \"SQL_DATETIME_SUB\", \"NUM_PREC_RADIX\"};\r\n        int[] colTypes = {Types.VARCHAR, Types.SMALLINT, Types.INTEGER, Types.VARCHAR, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.BOOLEAN, Types.SMALLINT, Types.BOOLEAN, Types.BOOLEAN, Types.BOOLEAN, Types.NULL, Types.INTEGER, Types.INTEGER, Types.NULL, Types.NULL, Types.NULL };\r\n        assertRSMetaData(rs, colNames, colTypes);\r\n        \r\n        assertTrue(rs.next());\r\n        int lastDataType = rs.getInt(\"data_type\");\r\n        while(rs.next()){\r\n            int dataType = rs.getInt(\"data_type\");\r\n            assertTrue(\"Wrong sorting order\", dataType>=lastDataType );\r\n            lastDataType = dataType;\r\n        }\r\n    }\r\n\t\r\n    \r\n    public void testGetCrossReference() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        dropTable(con,\"tblCross1\");\r\n        dropTable(con,\"tblCross2\");\r\n        DatabaseMetaData md = con.getMetaData();\r\n        \r\n        Statement st = con.createStatement();\r\n        st.execute(\"Create Table tblCross1(id1 counter primary key, v nvarchar(100))\");\r\n        //st.execute(\"Create Table tblCross2(id2 counter foreign key REFERENCES tblCross1(id1), v nvarchar(100))\");\r\n        st.execute(\"Create Table tblCross2(id2 int , v nvarchar(100), foreign key (id2) REFERENCES tblCross1(id1))\");\r\n        String[] colNames = {\"PKTABLE_CAT\", \"PKTABLE_SCHEM\", \"PKTABLE_NAME\", \"PKCOLUMN_NAME\", \"FKTABLE_CAT\", \"FKTABLE_SCHEM\", \"FKTABLE_NAME\", \"FKCOLUMN_NAME\", \"KEY_SEQ\", \"UPDATE_RULE\", \"DELETE_RULE\", \"FK_NAME\", \"PK_NAME\", \"DEFERRABILITY\"};\r\n        int[] colTypes = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.SMALLINT, Types.SMALLINT, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT };\r\n        \r\n        ResultSet rs = md.getCrossReference(null,null,\"tblCross1\",null,null,\"tblCross2\");\r\n        assertRSMetaData(rs, colNames, colTypes);\r\n        assertTrue(rs.next());\r\n        assertFalse(rs.next());\r\n        \r\n        rs = md.getImportedKeys(null,null,\"tblCross2\");\r\n        assertRSMetaData(rs, colNames, colTypes);\r\n        assertTrue(rs.next());\r\n        assertFalse(rs.next());\r\n        \r\n        rs = md.getExportedKeys(null,null,\"tblCross1\");\r\n        assertRSMetaData(rs, colNames, colTypes);\r\n        assertTrue(rs.next());\r\n        assertFalse(rs.next());\r\n        \r\n        dropTable(con,\"tblCross1\");\r\n        dropTable(con,\"tblCross2\");\r\n    }\r\n    \r\n    \r\n    public void testGetBestRowIdentifier() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        dropTable(con,\"tblBestRow1\");\r\n        DatabaseMetaData md = con.getMetaData();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"Create Table tblBestRow1(id1 counter primary key, v nvarchar(100))\");\r\n        String[] colNames = {\"SCOPE\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\", \"COLUMN_SIZE\", \"BUFFER_LENGTH\", \"DECIMAL_DIGITS\", \"PSEUDO_COLUMN\"};\r\n        int[] colTypes = {Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.SMALLINT, Types.SMALLINT};\r\n        \r\n        ResultSet rs = md.getBestRowIdentifier(null, null, \"tblBestRow1\", DatabaseMetaData.bestRowSession, true);        \r\n        assertRSMetaData(rs, colNames, colTypes);\r\n        assertTrue(rs.next());\r\n        assertEquals(\"Columnname:\", \"id1\", rs.getString(\"COLUMN_NAME\"));\r\n        assertFalse(rs.next());\r\n        \r\n        String[] colNames2 = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"COLUMN_NAME\", \"KEY_SEQ\", \"PK_NAME\"};\r\n        int[] colTypes2 = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.VARCHAR};\r\n        rs = md.getPrimaryKeys(null, null, \"tblBestRow1\");        \r\n        assertRSMetaData(rs, colNames2, colTypes2);\r\n        assertTrue(rs.next());\r\n        assertEquals(\"Columnname:\", \"id1\", rs.getString(\"COLUMN_NAME\"));\r\n        assertFalse(rs.next());\r\n        \r\n        String[] colNames3 = {\"TABLE_CAT\", \"TABLE_SCHEM\", \"TABLE_NAME\", \"NON_UNIQUE\", \"INDEX_QUALIFIER\", \"INDEX_NAME\", \"TYPE\", \"ORDINAL_POSITION\", \"COLUMN_NAME\", \"ASC_OR_DESC\", \"CARDINALITY\", \"PAGES\", \"FILTER_CONDITION\"};\r\n        int[] colTypes3 = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.BOOLEAN, Types.NULL, Types.VARCHAR, Types.SMALLINT, Types.SMALLINT, Types.VARCHAR, Types.NULL, Types.NULL, Types.NULL, Types.NULL};\r\n        rs = md.getIndexInfo(null, null, \"tblBestRow1\", true, true);        \r\n        assertRSMetaData(rs, colNames3, colTypes3);\r\n        assertTrue(rs.next());\r\n        assertEquals(\"Columnname:\", \"id1\", rs.getString(\"COLUMN_NAME\"));\r\n        assertFalse(rs.next());\r\n        \r\n        dropTable(con,\"tblBestRow1\");\r\n    }\r\n    \r\n    \r\n    public void testGetgetUDTs() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        DatabaseMetaData md = con.getMetaData();\r\n        ResultSet rs = md.getUDTs(null, null, null, null);\r\n        String[] colNames = {\"TYPE_CAT\", \"TYPE_SCHEM\", \"TYPE_NAME\", \"CLASS_NAME\", \"DATA_TYPE\", \"REMARKS\"};\r\n        int[] colTypes = new int[colNames.length];\r\n        assertRSMetaData( rs, colNames, colTypes);\r\n        assertFalse(rs.next());\r\n    }\r\n    \r\n    \r\n    public void testGetConnection() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        DatabaseMetaData md = con.getMetaData();\r\n        assertEquals(con, md.getConnection());\r\n    }\r\n\r\n    \r\n}\r\n"},{"path":"/src/smallsql/junit/TestStatement.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * TestStatement.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 23.04.2006\r\n */\r\npackage smallsql.junit;\r\n\r\nimport java.sql.*;\r\n\r\n\r\n/**\r\n * \r\n * @author Volker Berlin\r\n */\r\npublic class TestStatement extends BasicTestCase {\r\n\r\n\tprivate static boolean init;\r\n\r\n    \r\n    protected void setUp() throws Exception{\r\n    \tif(init) return;\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tdropTable( con, \"statement\");\r\n\t\tst.execute(\"Create Table statement (c varchar(30), i counter)\");\r\n\t\tinit = true;\r\n    }\r\n    \r\n    \r\n    public void testBatchUpate() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\t\r\n\t\tassertEquals(\"Result Length wrong\", 0, st.executeBatch().length );\r\n\t\tst.clearBatch();\r\n\t\tst.addBatch(\"Bla Bla\");\r\n        try {\r\n            st.executeBatch();\r\n        } catch (BatchUpdateException ex) {\r\n            assertEquals(\"Result Length wrong\",1,ex.getUpdateCounts().length);\r\n        }\r\n\t\tst.clearBatch();\r\n\t\tint count = 10;\r\n\t\tfor(int i=1; i<=count; i++){\r\n\t\t\tst.addBatch(\"Insert Into statement(c) Values('batch\"+i+\"')\");\r\n\t\t}\r\n\t\tint[] result = st.executeBatch();\r\n\t\tassertEquals(\"Result Length wrong\", count, result.length);\r\n\t\tfor(int i=0; i<count; i++){\r\n\t\t\tassertEquals(\"Update Count\", 1, result[i]);\r\n\t\t}\r\n\t\tassertRowCount(10, \"Select * From statement\");\r\n    }\r\n    \r\n    \r\n    public void testMultiValues() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n    \tassertEquals(\"Update Count:\", 10, st.executeUpdate(\"Insert Into statement(c) Values('abc1'),('abc2'),('abc3'),('abc4'),('abc5'),('abc6'),('abc7'),('abc8'),('abc9'),('abc10')\"));\r\n    }\r\n    \r\n\r\n    public void testMaxRows() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.setMaxRows(5);\r\n        ResultSet rs = st.executeQuery(\"Select * From statement\");\r\n        assertEquals(\"Statement.getResultSet\", rs, st.getResultSet());\r\n        assertRowCount(5,rs);\r\n        assertRowCount(4,\"Select top 4 * From statement\");\r\n        assertRowCount(3,\"Select * From statement Limit 3\");\r\n        assertRowCount(2,\"Select * From statement Order By c ASC Limit 2\");\r\n        assertRowCount(0,\"Select top 0 * From statement\");\r\n        \r\n        st = con.createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n        rs = st.executeQuery(\"Select Top 0 * From statement\");\r\n        assertFalse( \"last()\", rs.last() );\r\n        \r\n        PreparedStatement pr = con.prepareStatement(\"Select * From statement\");\r\n        pr.setMaxRows(6);\r\n        rs = pr.executeQuery();\r\n        assertEquals(\"PreparedStatement.getResultSet\", rs, pr.getResultSet());\r\n        assertRowCount(6,rs);\r\n        \r\n        pr.setMaxRows(3);\r\n        rs = pr.executeQuery();\r\n        assertRowCount(3,rs);\r\n               \r\n        pr.setMaxRows(4);\r\n        rs = pr.executeQuery();\r\n        assertRowCount(4,rs);\r\n    }\r\n    \r\n    \r\n    public void testMoreResults() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        \r\n        ResultSet rs = st.executeQuery(\"Select * From statement\");\r\n        assertEquals( \"getResultSet()\", rs, st.getResultSet() );\r\n        assertEquals( \"getUpdateCount()\", -1, st.getUpdateCount() );\r\n        assertFalse( st.getMoreResults() );\r\n        try{\r\n            rs.next();\r\n            fail(\"ResultSet should be closed\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"01000\", 0, ex);\r\n        }\r\n        assertNull( \"getResultSet()\", st.getResultSet() );\r\n        assertEquals( \"getUpdateCount()\", -1, st.getUpdateCount() );\r\n        \r\n        \r\n        rs = st.executeQuery(\"Select * From statement\");\r\n        assertEquals( \"getResultSet()\", rs, st.getResultSet() );\r\n        assertEquals( \"getUpdateCount()\", -1, st.getUpdateCount() );\r\n        assertFalse( st.getMoreResults(Statement.KEEP_CURRENT_RESULT) );\r\n        assertTrue(rs.next());\r\n        assertNull( \"getResultSet()\", st.getResultSet() );\r\n        assertEquals( \"getUpdateCount()\", -1, st.getUpdateCount() );\r\n        \r\n        \r\n        int count = st.executeUpdate(\"Update statement set c = c\");\r\n        assertTrue( \"Update Erfolgreich\", count>0 );\r\n        assertNull( \"getResultSet()\", st.getResultSet() );\r\n        assertEquals( \"getUpdateCount()\", count, st.getUpdateCount() );\r\n        assertFalse( st.getMoreResults() );\r\n        assertNull( \"getResultSet()\", st.getResultSet() );\r\n        assertEquals( \"getUpdateCount()\", -1, st.getUpdateCount() );\r\n    }\r\n    \r\n    \r\n    public void testGetConnection() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        \r\n        assertEquals(con, st.getConnection() );\r\n    }\r\n    \r\n    \r\n    public void testFetch() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        \r\n        st.setFetchDirection(ResultSet.FETCH_FORWARD);\r\n        assertEquals( st.getFetchDirection(), ResultSet.FETCH_FORWARD);\r\n\r\n        st.setFetchDirection(ResultSet.FETCH_REVERSE);\r\n        assertEquals( st.getFetchDirection(), ResultSet.FETCH_REVERSE);\r\n        \r\n        st.setFetchSize(123);\r\n        assertEquals( st.getFetchSize(), 123);\r\n    }\r\n    \r\n    \r\n    public void testGeneratedKeys() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        ResultSet rs;\r\n        \r\n        st.execute(\"Insert Into statement(c) Values('key1')\", Statement.NO_GENERATED_KEYS);\r\n        try{\r\n            st.getGeneratedKeys();\r\n            fail(\"NO_GENERATED_KEYS\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"01000\", 0, ex);\r\n        }\r\n        assertEquals(\"UpdateCount\", 1, st.getUpdateCount());\r\n        assertNull(\"getResultSet\", st.getResultSet());\r\n        \r\n        st.execute(\"Insert Into statement(c) Values('key2')\", Statement.RETURN_GENERATED_KEYS);\r\n        rs = st.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertTrue(rs.next());\r\n        assertEqualsRsValue( new Long(rs.getLong(1)), rs, false );\r\n        assertFalse(rs.next());\r\n\r\n\r\n        assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key3')\", Statement.RETURN_GENERATED_KEYS));\r\n        rs = st.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n\r\n        st.execute(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});\r\n        rs = st.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());\r\n        assertRowCount(1,rs);\r\n\r\n        assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key5')\", new int[]{2}));\r\n        rs = st.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n\r\n        st.execute(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});\r\n        rs = st.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());\r\n        assertRowCount(1,rs);\r\n\r\n        assertEquals(1,st.executeUpdate(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"}));\r\n        rs = st.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n    }\r\n    \r\n    \r\n    public void testGeneratedKeysWithPrepare() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        ResultSet rs;\r\n        \r\n        PreparedStatement pr = con.prepareStatement(\"Insert Into statement(c) Values('key1')\", Statement.NO_GENERATED_KEYS);\r\n        pr.execute();\r\n        try{\r\n            pr.getGeneratedKeys();\r\n            fail(\"NO_GENERATED_KEYS\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"01000\", 0, ex);\r\n        }\r\n        assertEquals(\"UpdateCount\", 1, pr.getUpdateCount());\r\n        assertNull(\"getResultSet\", pr.getResultSet());\r\n        pr.close();\r\n        \r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key2')\", Statement.RETURN_GENERATED_KEYS);\r\n        pr.execute();\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key3')\", Statement.RETURN_GENERATED_KEYS);\r\n        assertEquals(1,pr.executeUpdate());\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key4')\", new int[]{2,1});\r\n        pr.execute();\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key5')\", new int[]{2});\r\n        assertEquals(1,pr.executeUpdate());\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key6')\", new String[]{\"c\",\"i\"});\r\n        pr.execute();\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",2,rs.getMetaData().getColumnCount());\r\n        assertRowCount(1,rs);\r\n\r\n        pr = con.prepareStatement(\"Insert Into statement(c) Values('key7')\", new String[]{\"i\"});\r\n        assertEquals(1,pr.executeUpdate());\r\n        rs = pr.getGeneratedKeys();\r\n        assertNotNull(\"RETURN_GENERATED_KEYS\", rs);\r\n        assertEquals(\"ColumnCount\",1,rs.getMetaData().getColumnCount());\r\n        assertEquals(\"ColumnCount\",\"i\",rs.getMetaData().getColumnName(1));\r\n        assertRowCount(1,rs);\r\n    }\r\n    \r\n    \r\n    public void testResultSetType() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n        \r\n        assertEquals(ResultSet.TYPE_SCROLL_SENSITIVE, st.getResultSetType());\r\n        assertEquals(ResultSet.CONCUR_UPDATABLE, st.getResultSetConcurrency());\r\n        \r\n        ResultSet rs = st.executeQuery(\"Select * From statement\");\r\n        \r\n        assertEquals(ResultSet.TYPE_SCROLL_SENSITIVE, rs.getType());\r\n        assertEquals(ResultSet.CONCUR_UPDATABLE, rs.getConcurrency());\r\n    }\r\n\r\n    \r\n    public void testOther() throws Exception{\r\n        //now we test all not implemented code\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        \r\n        //curently there are no known warnings\r\n        st.clearWarnings();\r\n        assertNull(st.getWarnings());\r\n        \r\n        //query execution does not need any time the time occur on next,\r\n        //but currently there is no time observer\r\n        st.setQueryTimeout(5);\r\n        assertEquals(\"QueryTimeout\", 5, st.getQueryTimeout() );\r\n        \r\n        st.setMaxFieldSize(100);\r\n        assertEquals(\"MaxFieldSize\", 100, st.getMaxFieldSize() );\r\n    }\r\n    \r\n    \r\n    public void testTruncate() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        \r\n        st.execute(\"Truncate table statement\");\r\n        assertRowCount(0, \"Select * From statement\");\r\n    }\r\n}"},{"path":"/src/smallsql/junit/TestOperatoren.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * TestOperatoren.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.junit;\r\n\r\nimport junit.framework.*;\r\nimport java.sql.*;\r\nimport java.math.*;\r\n\r\npublic class TestOperatoren extends BasicTestCase {\r\n\r\n    private TestValue testValue;\r\n\r\n    private static final String table = \"table_functions\";\r\n\r\n    private static final TestValue[] TESTS = new TestValue[]{\r\n        a(\"tinyint\"           , new Byte( (byte)3),     new Byte( (byte)4)),\r\n        a(\"byte\"              , new Byte( (byte)3),     new Byte( (byte)4)),\r\n        a(\"smallint\"          , new Short( (short)3),   new Short( (short)4)),\r\n        a(\"int\"               , new Integer(3),         new Integer(4)),\r\n        a(\"bigint\"            , new Long(3),            new Long(4)),\r\n        a(\"real\"              , new Float(3.45),        new Float(4.56)),\r\n        a(\"float\"             , new Float(3.45),        new Float(4.56)),\r\n        a(\"double\"            , new Double(3.45),       new Double(4.56)),\r\n        a(\"smallmoney\"        , new Float(3.45),        new Float(4.56)),\r\n        a(\"money\"             , new Float(3.45),        new Float(4.56)),\r\n        a(\"money\"             , new Double(3.45),       new Double(4.56)),\r\n        a(\"numeric(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),\r\n        a(\"decimal(19,2)\"     , new BigDecimal(\"3.45\"), new BigDecimal(\"4.56\")),\r\n        a(\"varnum(28,2)\"      , new BigDecimal(\"2.34\"), new BigDecimal(\"3.45\")),\r\n        a(\"number(28,2)\"      , new BigDecimal(\"2.34\"), new BigDecimal(\"3.45\")),\r\n        a(\"varchar(100)\"      , new String(\"abc\"),      new String(\"qwert\")),\r\n        a(\"varchar(60000)\"    , new String(new char[43210]),      new String(\"qwert\")),\r\n        a(\"nvarchar(100)\"     , new String(\"abc\"),      new String(\"qwert\")),\r\n        a(\"varchar2(100)\"     , new String(\"abc\"),      new String(\"qwert\")),\r\n        a(\"nvarchar2(100)\"    , new String(\"abc\"),      new String(\"qwert\")),\r\n        a(\"character(100)\"    , new String(\"abc\"),      new String(\"qwert\")),\r\n        a(\"char(100)\"         , new String(\"abc\"),      new String(\"qwert\")),\r\n        a(\"nchar(100)\"        , new String(\"abc\"),      new String(\"qwert\")),\r\n        a(\"text\"              , new String(\"abc\"),      new String(\"qwert\")),\r\n        a(\"ntext\"             , new String(\"abc\"),      new String(\"qwert\")),\r\n        a(\"date\"              , new Date(99, 1,1),      new Date(99, 2,2)),\r\n        a(\"time\"              , new Time(9, 1,1),       new Time(9, 2,2)),\r\n        a(\"timestamp\"         , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),\r\n        a(\"datetime\"          , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),\r\n        a(\"smalldatetime\"     , new Timestamp(99, 1,1,0,0,0,0),      new Timestamp(99, 2,2,0,0,0,0)),\r\n        a(\"binary(100)\"       , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),\r\n        a(\"varbinary(100)\"    , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),\r\n        a(\"varbinary(60000)\"  , new byte[54321],        new byte[]{12, 45, 2, 56, 89}),\r\n        a(\"raw(100)\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),\r\n        a(\"long raw\"          , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),\r\n        a(\"longvarbinary\"     , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),\r\n        a(\"blob\"              , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),\r\n        a(\"image\"             , new byte[]{12, 45, 1},  new byte[]{12, 45, 2, 56, 89}),\r\n        a(\"boolean\"           , Boolean.FALSE,          Boolean.TRUE),\r\n        a(\"bit\"               , Boolean.FALSE,          Boolean.TRUE),\r\n        a(\"uniqueidentifier\"  , \"12345678-3445-3445-3445-1234567890ab\",      \"12345679-3445-3445-3445-1234567890ac\"),\r\n    };\r\n\r\n\r\n    TestOperatoren(TestValue testValue){\r\n        super(testValue.dataType);\r\n        this.testValue = testValue;\r\n    }\r\n\r\n    public void tearDown(){\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void setUp(){\r\n        tearDown();\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"create table \" + table + \"(a \" + testValue.dataType +\", b \" + testValue.dataType + \")\");\r\n            st.close();\r\n            PreparedStatement pr = con.prepareStatement(\"INSERT into \" + table + \"(a,b) Values(?,?)\");\r\n\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, testValue.large);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.large);\r\n            pr.setObject( 2, testValue.large);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.large);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, null);\r\n            pr.setObject( 2, testValue.small);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, testValue.small);\r\n            pr.setObject( 2, null);\r\n            pr.execute();\r\n\r\n            pr.setObject( 1, null);\r\n            pr.setObject( 2, null);\r\n            pr.execute();\r\n            pr.close();\r\n        }catch(Throwable e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    public void runTest() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        ResultSet rs;\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where 1 = 0\");\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a = b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a <= b and b <= a\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertEqualsObject( \"Values not equals\", rs.getObject(1), rs.getObject(2), false);\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where (a > (b))\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a >= b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where not (a >= b)\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a < b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a < b or a>b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a <= b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        rs = st.executeQuery(\"Select * from \" + table + \" where a <> b\");\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\r\n        PreparedStatement pr = con.prepareStatement(\"Select * from \" + table + \" where a between ? and ?\");\r\n        pr.setObject( 1, testValue.small);\r\n        pr.setObject( 2, testValue.large);\r\n        rs = pr.executeQuery();\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n        assertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();\r\n\r\n\t\tpr = con.prepareStatement(\"Select * from \" + table + \" where a not between ? and ?\");\r\n\t\tpr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();\r\n\r\n\t\tpr = con.prepareStatement(\"Select * from \" + table + \" where a in(?,?)\");\r\n\t\tpr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n        assertTrue( \"To few rows\", rs.next() );\r\n\t\tassertTrue( \"To few rows\", rs.next() );\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();\r\n\r\n\t\tpr = con.prepareStatement(\"Select * from \" + table + \" where a not in(?,?)\");\r\n\t\tpr.setObject( 1, testValue.small);\r\n\t\tpr.setObject( 2, testValue.large);\r\n\t\trs = pr.executeQuery();\r\n\t\tassertTrue( \"To few rows\", rs.next());\r\n\t\tassertTrue( \"To few rows\", rs.next());\r\n\t\tassertFalse( \"To many rows\", rs.next() );\r\n\t\tpr.close();\r\n\r\n        st.close();\r\n    }\r\n\r\n    public static Test suite() throws Exception{\r\n        TestSuite theSuite = new TestSuite(\"Operatoren\");\r\n        for(int i=0; i<TESTS.length; i++){\r\n            theSuite.addTest(new TestOperatoren( TESTS[i] ) );\r\n        }\r\n        return theSuite;\r\n    }\r\n\r\n    public static void main(String[] argv) {\r\n        junit.swingui.TestRunner.main(new String[]{TestOperatoren.class.getName()});\r\n    }\r\n\r\n\r\n\r\n    private static TestValue a(String dataType, Object small, Object large){\r\n        TestValue value = new TestValue();\r\n        value.dataType  = dataType;\r\n        value.small     = small;\r\n        value.large     = large;\r\n        return value;\r\n    }\r\n\r\n    private static class TestValue{\r\n        String dataType;\r\n        Object small;\r\n        Object large;\r\n    }\r\n\r\n}"},{"path":"/src/smallsql/junit/TestDataTypes.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * TestDataTypes.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.junit;\r\n\r\nimport junit.framework.*;\r\nimport java.sql.*;\r\nimport java.math.*;\r\n\r\npublic class TestDataTypes extends BasicTestCase{\r\n\r\n    static final String[] DATATYPES = { \"varchar(100)\",\r\n                                                \"varchar2(130)\", \"nvarchar(137)\", \"nvarchar2(137)\", \"sysname\",\r\n                                                \"char(100)\", \"CHARACTER(99)\",\r\n                                                \"nchar(80)\",\r\n                                                \"int\", \"smallint\", \"tinyint\", \"bigint\", \"byte\",\r\n                                                \"real\", \"float\", \"double\",\r\n                                                \"bit\", \"Boolean\",\r\n                                                \"binary( 125 )\", \"varbinary(57)\", \"raw(88)\",\r\n                                                \"java_object\", \"sql_variant\",\r\n                                                \"image\", \"LONGvarbinary\", \"long raw\",\r\n                                                \"blob\", \"clob\",\"nclob\",\r\n                                                \"text\", \"ntext\", \"LongVarchar\", \"long\",\r\n                                                \"time\", \"date\", \"datetime\", \"timestamp\", \"SMALLDATETIME\",\r\n                                                \"UNIQUEIDENTIFIER\",\r\n                                                \"numeric(28,4)\", \"decimal(29,4)\",\"number(29,4)\", \"varnum(29,4)\",\r\n                                                \"COUNTER\",\r\n                                                \"money\", \"smallmoney\"};\r\n\r\n    private static final String table = \"table_datatypes\";\r\n\r\n    private String datatype;\r\n\r\n    TestDataTypes( String datatype ){\r\n        super( datatype );\r\n        this.datatype = datatype;\r\n    }\r\n\r\n    public void tearDown(){\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void setUp(){\r\n        tearDown();\r\n    }\r\n\r\n    public void runTest() throws Throwable {\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"Create Table \" + table +\"(abc \" + datatype + \")\");\r\n        String name = \"abc\";\r\n\r\n        Object[] values = null;\r\n        String   quote = \"\";\r\n        String escape1 = \"\";\r\n        String escape2 = \"\";\r\n        boolean needTrim = false;\r\n\r\n        ResultSet rs = st.executeQuery(\"SELECT * From \" + table);\r\n\t\tResultSetMetaData md = rs.getMetaData();\r\n        switch(md.getColumnType(1)){\r\n            case Types.CHAR:\r\n                needTrim = true;\r\n            case Types.VARCHAR:\r\n            case Types.LONGVARCHAR:\r\n            case Types.CLOB:\r\n                values = new Object[]{null,\"qwert\", \"asdfg\", \"hjhjhj\", \"1234567890 qwertzuiop 1234567890 asdfghjklö 1234567890 yxcvbnm,.- 1234567890 \"};\r\n                quote  = \"\\'\";\r\n                break;\r\n            case Types.BIGINT:\r\n                values = new Object[]{null,new Long(123), new Long(-2123), new Long(392839283)};\r\n                break;\r\n            case Types.INTEGER:\r\n                values = new Object[]{null,new Integer(123), new Integer(-2123), new Integer(392839283)};\r\n                break;\r\n            case Types.SMALLINT:\r\n                values = new Object[]{null,new Integer(123), new Integer(-2123), new Integer(32000)};\r\n                break;\r\n            case Types.TINYINT:\r\n                values = new Object[]{null,new Integer(0), new Integer(12), new Integer(228)};\r\n                break;\r\n            case Types.REAL:\r\n                values = new Object[]{null,new Float(0.0), new Float(-12.123), new Float(22812345234.9)};\r\n                break;\r\n            case Types.FLOAT:\r\n            case Types.DOUBLE:\r\n                values = new Object[]{null,new Double(0.0), new Double(-12.123), new Double(22812345234.9)};\r\n                break;\r\n            case Types.NUMERIC:\r\n            case Types.DECIMAL:\r\n                needTrim = true;\r\n            \tif(md.getPrecision(1)<16){//smallmoney\r\n\t\t\t\t\tvalues = new Object[]{null,new BigDecimal(\"0.0\"), new BigDecimal(\"-2\"), new BigDecimal(\"-12.123\")};\r\n                /*if(rs.getMetaData().isCurrency(1)){\r\n                    values = new Object[]{null, new Money(0.0), new Money(-12.123), new Money(202812.9)};*/\r\n                }else{\r\n                    values = new Object[]{null,new BigDecimal(\"0.0\"), new BigDecimal(\"-2\"), new BigDecimal(\"-12.123\"), new BigDecimal(\"22812345234.9\")};\r\n                }\r\n                break;\r\n            case Types.BIT:\r\n            case Types.BOOLEAN:\r\n                values = new Object[]{null, Boolean.TRUE, Boolean.FALSE};\r\n                break;\r\n            case Types.TIME:\r\n                values = new Object[]{null, new Time(10,17,56), new Time(0,0,0),new Time(23,59,59)};\r\n                escape1 = \"{t '\";\r\n                escape2 = \"'}\";\r\n                break;\r\n\t\t\tcase Types.DATE:\r\n\t\t\t\tvalues = new Object[]{null, new java.sql.Date(10,10,1), new java.sql.Date(0,0,1),new java.sql.Date(70,0,1)};\r\n\t\t\t\tescape1 = \"{d '\";\r\n\t\t\t\tescape2 = \"'}\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase Types.TIMESTAMP:\r\n\t\t\t\tif(md.getPrecision(1) >16)\r\n\t\t\t\t\tvalues = new Object[]{null, new Timestamp(10,10,1, 10,17,56, 0), new Timestamp(0,0,1, 0,0,0, 0),new Timestamp( 120,1,1, 23,59,59, 500000000),new Timestamp(0),new Timestamp( -120,1,1, 23,59,59, 500000000)};\r\n\t\t\t\telse//smalldatetime\r\n\t\t\t\t\tvalues = new Object[]{null, new Timestamp(10,10,1, 10,17,0, 0), new Timestamp(0,0,1, 0,0,0, 0),new Timestamp(0)};\r\n\t\t\t\tescape1 = \"{ts '\";\r\n\t\t\t\tescape2 = \"'}\";\r\n\t\t\t\tbreak;\r\n            case Types.BINARY:\r\n                needTrim = true;\r\n            case Types.VARBINARY:\r\n            case Types.LONGVARBINARY:\r\n            case Types.BLOB:\r\n                values = new Object[]{null, new byte[]{1, 127, -23}};\r\n                break;\r\n            case Types.JAVA_OBJECT:\r\n                values = new Object[]{null, new Integer(-123), new Double(1.2), new byte[]{1, 127, -23}};\r\n                break;\r\n            case -11: //UNIQUEIDENTIFER\r\n                values = new Object[]{null, \"342734E3-D9AC-408F-8724-B7A257C4529E\", \"342734E3-D9AC-408F-8724-B7A257C4529E\"};\r\n                quote  = \"\\'\";\r\n                break;\r\n            default: fail(\"Unknown column type: \" + rs.getMetaData().getColumnType(1));\r\n        }\r\n        rs.close();\r\n\t\t\r\n\t\t// remove all resource for reloading the tables from file\r\n\t\tcon.close();\r\n\t\tcon = AllTests.getConnection();\r\n\t\tst = con.createStatement();\r\n\r\n        for(int i=0; i<values.length; i++){\r\n            Object val = values[i];\r\n            String q = (val == null) ? \"\" : quote;\r\n            String e1 = (val == null) ? \"\" : escape1;\r\n            String e2 = (val == null) ? \"\" : escape2;\r\n            if(val instanceof byte[]){\r\n                StringBuffer buf = new StringBuffer( \"0x\" );\r\n                for(int k=0; k<((byte[])val).length; k++){\r\n                    String digit = \"0\" + Integer.toHexString( ((byte[])val)[k] );\r\n                    buf.append( digit.substring( digit.length()-2 ) );\r\n                }\r\n                val = buf.toString();\r\n            }\r\n            st.execute(\"Insert into \" + table + \"(abc) Values(\" + e1 + q + val + q + e2 + \")\");\r\n        }\r\n\t\tcheckValues( st, values, needTrim);\r\n\t\t\r\n\t\tst.execute(\"Delete From \"+ table);\r\n\t\tCallableStatement cal = con.prepareCall(\"Insert Into \" + table + \"(abc) Values(?)\");\r\n        for(int i=0; i<values.length; i++){\r\n            Object val = values[i];\r\n\t\t\tcal.setObject( 1, val);\r\n\t\t\tcal.execute();\r\n        }\r\n\t\tcal.close();\r\n\t\tcheckValues( st, values, needTrim);\r\n\t\t\r\n\t\tst.execute(\"Delete From \"+ table);\r\n\t\tcal = con.prepareCall(\"Insert Into \" + table + \"(abc) Values(?)\");\r\n        for(int i=0; i<values.length; i++){\r\n            Object val = values[i];\r\n\t\t\tif(val == null){\r\n\t\t\t\tcal.setNull( 1, Types.NULL );\r\n\t\t\t}else\r\n\t\t\tif(val instanceof Time){\r\n\t\t\t\tcal.setTime( 1, (Time)val );\r\n\t\t\t}else\r\n\t\t\tif(val instanceof Timestamp){\r\n\t\t\t\tcal.setTimestamp( 1, (Timestamp)val );\r\n\t\t\t}else\r\n\t\t\tif(val instanceof Date){\r\n\t\t\t\tcal.setDate( 1, (Date)val );\r\n\t\t\t}else\r\n\t\t\tif(val instanceof String){\r\n\t\t\t\tcal.setString( 1, (String)val );\r\n\t\t\t}else\r\n\t\t\tif(val instanceof Boolean){\r\n\t\t\t\tcal.setBoolean( 1, ((Boolean)val).booleanValue() );\r\n\t\t\t}else\r\n\t\t\tif(val instanceof Byte){\r\n\t\t\t\tcal.setByte( 1, ((Byte)val).byteValue() );\r\n\t\t\t}else\r\n\t\t\tif(val instanceof Short){\r\n\t\t\t\tcal.setShort( 1, ((Short)val).shortValue() );\r\n\t\t\t}else\r\n\t\t\tif(val instanceof Integer){\r\n\t\t\t\tcal.setInt( 1, ((Integer)val).intValue() );\r\n\t\t\t}else\r\n\t\t\tif(val instanceof Long){\r\n\t\t\t\tcal.setLong( 1, ((Long)val).longValue() );\r\n\t\t\t}else\r\n\t\t\tif(val instanceof Float){\r\n\t\t\t\tcal.setFloat( 1, ((Float)val).floatValue() );\r\n\t\t\t}else\r\n\t\t\tif(val instanceof Double){\r\n\t\t\t\tcal.setDouble( 1, ((Double)val).doubleValue() );\r\n\t\t\t}else\r\n\t\t\tif(val instanceof BigDecimal){\r\n\t\t\t\tcal.setBigDecimal( 1, (BigDecimal)val );\r\n\t\t\t}else\r\n\t\t\tif(val instanceof byte[]){\r\n\t\t\t\tcal.setBytes( 1, (byte[])val );\r\n\t\t\t}\r\n\t\t\tcal.execute();\r\n        }\r\n\t\tcal.close();\r\n\t\tcheckValues( st, values, needTrim);\r\n\r\n        \r\n        st.execute(\"Delete From \"+ table);\r\n        Statement st2 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n        ResultSet rs2 = st2.executeQuery(\"SELECT * From \" + table);\r\n        for(int i=0; i<values.length; i++){\r\n            rs2.moveToInsertRow();\r\n            Object val = values[i];\r\n            if(val == null){\r\n                rs2.updateNull( name );\r\n            }else\r\n            if(val instanceof Time){\r\n                rs2.updateTime( name, (Time)val );\r\n            }else\r\n            if(val instanceof Timestamp){\r\n                rs2.updateTimestamp( name, (Timestamp)val );\r\n            }else\r\n            if(val instanceof Date){\r\n                rs2.updateDate( name, (Date)val );\r\n            }else\r\n            if(val instanceof String){\r\n                rs2.updateString( name, (String)val );\r\n            }else\r\n            if(val instanceof Boolean){\r\n                rs2.updateBoolean( name, ((Boolean)val).booleanValue() );\r\n            }else\r\n            if(val instanceof Byte){\r\n                rs2.updateByte( name, ((Byte)val).byteValue() );\r\n            }else\r\n            if(val instanceof Short){\r\n                rs2.updateShort( name, ((Short)val).shortValue() );\r\n            }else\r\n            if(val instanceof Integer){\r\n                rs2.updateInt( name, ((Integer)val).intValue() );\r\n            }else\r\n            if(val instanceof Long){\r\n                rs2.updateLong( name, ((Long)val).longValue() );\r\n            }else\r\n            if(val instanceof Float){\r\n                rs2.updateFloat( name, ((Float)val).floatValue() );\r\n            }else\r\n            if(val instanceof Double){\r\n                rs2.updateDouble( name, ((Double)val).doubleValue() );\r\n            }else\r\n            if(val instanceof BigDecimal){\r\n                rs2.updateBigDecimal( name, (BigDecimal)val );\r\n            }else\r\n            if(val instanceof byte[]){\r\n                rs2.updateBytes( name, (byte[])val );\r\n            }\r\n            rs2.insertRow();\r\n        }\r\n        st2.close();\r\n        checkValues( st, values, needTrim);\r\n    }\r\n\t\r\n\t\r\n\tprivate void checkValues(Statement st, Object[] values, boolean needTrim) throws Exception{\r\n        ResultSet rs = st.executeQuery(\"SELECT * From \" + table);\r\n\r\n        int i = 0;\r\n        while(rs.next()){\r\n            assertEqualsRsValue(values[i], rs, needTrim);\r\n            i++;\r\n        }\r\n        rs.close();\r\n\t}\r\n\r\n\r\n    public static Test suite() throws Exception{\r\n        TestSuite theSuite = new TestSuite(\"Data Types\");\r\n        for(int i=0; i<DATATYPES.length; i++){\r\n            theSuite.addTest(new TestDataTypes( DATATYPES[i] ) );\r\n        }\r\n        return theSuite;\r\n    }\r\n\r\n    public static void main(String[] argv) {\r\n        junit.swingui.TestRunner.main(new String[]{TestDataTypes.class.getName()});\r\n    }\r\n}"},{"path":"/src/smallsql/database/MutableNumeric.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * MutableNumeric.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\nimport java.math.*;\r\n\r\nclass MutableNumeric extends Number implements Mutable{\r\n\r\n    private static final long serialVersionUID = -750525164208565056L;\r\n    private int[] value;\r\n    private int scale;\r\n    private int signum;\r\n\r\n    \r\n    /** \r\n     * The most significant value is on position 0.\r\n     */\r\n    MutableNumeric(byte[] complement){\r\n\t\tsetValue(complement);\r\n    }\r\n    \r\n    private void setValue(byte[] complement){\r\n        int length = complement.length;\r\n        if(length == 0){\r\n            value   = EMPTY_INTS;\r\n            signum  = 0;\r\n            return;\r\n        }\r\n        value = new int[ (length + 3) / 4 ];\r\n        if(complement[0] < 0){\r\n            negate( complement );\r\n            signum = -1;\r\n        }else{\r\n\t\t\tsignum = 0;\r\n        \tfor(int i=0; i<complement.length; i++)\r\n        \t\tif(complement[i] != 0){\r\n        \t\t\tsignum = 1;\r\n        \t\t\tbreak;\r\n        \t\t}\r\n        }\r\n        for(int v=value.length-1; v>=0; v--){\r\n            int temp = 0;\r\n            for(int i=0; i<4 && 0<length; i++){\r\n                temp |= (complement[ --length ] & 0xFF) << (i*8);\r\n            }\r\n            value[v] = temp;\r\n        }\r\n    }\r\n\r\n    MutableNumeric(int complement){\r\n        if(complement == 0){\r\n            signum = 0;\r\n            value = EMPTY_INTS;\r\n        }else{\r\n            value = new int[1];\r\n            if(complement < 0){\r\n                value[0] = -complement;\r\n                signum = -1;\r\n            }else{\r\n                value[0] = complement;\r\n                signum = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    MutableNumeric(int complement, int scale){\r\n        this( complement );\r\n        this.scale = scale;\r\n    }\r\n\r\n    MutableNumeric(long complement){\r\n        if(complement == 0){\r\n            signum = 0;\r\n            value = EMPTY_INTS;\r\n        }else{\r\n            value = new int[2];\r\n            if(complement < 0){\r\n                value[0] = (int)(~(complement >> 32));\r\n                value[1] = (int)(-complement);\r\n                signum = -1;\r\n            }else{\r\n                value[0] = (int)(complement >> 32);\r\n                value[1] = (int)complement;\r\n                signum = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    MutableNumeric(long complement, int scale){\r\n        this( complement );\r\n        this.scale = scale;\r\n    }\r\n\r\n    MutableNumeric(double val){\r\n    \t//first convert it to a string, because double to BigDecimal has very large rounding bug\r\n        this( new BigDecimal( String.valueOf(val) ) );\r\n    }\r\n\r\n    MutableNumeric(float val){\r\n        //first convert it to a string, because float to BigDecimal has very large rounding bug\r\n        this( new BigDecimal( String.valueOf(val) ) );\r\n    }\r\n\r\n    MutableNumeric(String val){\r\n        this( new BigDecimal( val ) );\r\n    }\r\n\r\n    MutableNumeric( BigDecimal big ){\r\n        this(big.unscaledValue().toByteArray() );\r\n        scale   = big.scale();\r\n    }\r\n\r\n    MutableNumeric(int signum, int[] value, int scale){\r\n        this.signum = signum;\r\n        this.value  = value;\r\n        this.scale  = scale;\r\n    }\r\n    \r\n\tMutableNumeric(MutableNumeric numeric){\r\n\t\tthis.signum = numeric.signum;\r\n\t\tthis.value  = new int[numeric.value.length];\r\n\t\tSystem.arraycopy(numeric.value, 0, value, 0, value.length);\r\n\t\tthis.scale  = numeric.scale;\r\n\t}\r\n    \r\n    \r\n    int[] getInternalValue(){\r\n        return value;\r\n    }\r\n\t\r\n\r\n    /**\r\n     * Add the value to the current MutableNumeric Object and change it.\r\n     * @param num the added value\r\n     */\r\n    void add(MutableNumeric num){\r\n\t\tif(num.scale < scale){\r\n\t\t\tnum.setScale(scale);\r\n\t\t}else\r\n\t\tif(num.scale > scale){\r\n\t\t\tsetScale(num.scale);\r\n\t\t}\r\n        add( num.signum, num.value );\r\n    }\r\n\t\r\n\r\n    private void add( int sig2, int[] val2){\r\n        if(val2.length > value.length){\r\n            int[] temp = val2;\r\n            val2 = value;\r\n            value = temp;\r\n            int tempi = signum;\r\n            signum = sig2;\r\n            sig2 = tempi;\r\n        }\r\n        if(signum != sig2)\r\n            sub(val2);\r\n        else\r\n            add(val2);\r\n    }\r\n\r\n    \r\n    /**\r\n     * Add the value to the current MutableNumeric Object and change it.\r\n     * The parameter <code>val2</code> has a shorter or equals length.\r\n     * The signum of both values is equals.\r\n     * @param val2 the added value\r\n     */\r\n    private void add( int[] val2){\r\n        long temp = 0;\r\n        int v1 = value.length;\r\n        for(int v2 = val2.length; v2>0; ){\r\n            temp = (value[--v1] & 0xFFFFFFFFL) + (val2 [--v2] & 0xFFFFFFFFL) + (temp >>> 32);\r\n            value[v1] = (int)temp;\r\n        }\r\n        boolean uebertrag = (temp >>> 32) != 0;\r\n        while(v1 > 0 && uebertrag)\r\n            uebertrag = (value[--v1] = value[v1] + 1) == 0;\r\n\r\n        // resize if needed\r\n        if(uebertrag){\r\n\t\t\tresizeValue(1);\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * Resize the value mantissa with a carryover. \r\n     * @param highBits Is the high value that is save on the resize place.\r\n     */\r\n\tprivate void resizeValue(int highBits){\r\n\t\tint val[] = new int[value.length+1];\r\n\t\tval[0] = highBits;\r\n\t\tSystem.arraycopy(value, 0, val, 1, value.length);\r\n\t\tvalue = val;\r\n    }\r\n\t \r\n    \r\n    /**\r\n     * Subtract the value to the current MutableNumeric Object and change it.\r\n     * @param num the subtracted  value\r\n     */\r\n    void sub(MutableNumeric num){\r\n\t\tif(num.scale < scale){\r\n\t\t\tnum.setScale(scale);\r\n\t\t}else\r\n\t\tif(num.scale > scale){\r\n\t\t\tsetScale(num.scale);\r\n\t\t}\r\n        add( -num.signum, num.value );\r\n    }\r\n\r\n    /**\r\n     * Subtract the value to the current MutableNumeric Object and change it.\r\n     * The parameter <code>val2</code> has a shorter or equals length.\r\n     * The signum of both values is equals.\r\n     * @param val2 the subtracted  value\r\n     */\r\n    private void sub(int[] val2){\r\n        long temp = 0;\r\n        int v1 = value.length;\r\n        for(int v2 = val2.length; v2>0; ){\r\n            temp = (value[--v1] & 0xFFFFFFFFL) - (val2 [--v2] & 0xFFFFFFFFL) + (temp >>>= 32);\r\n            value[v1] = (int)temp;\r\n        }\r\n\r\n        boolean uebertrag = (temp >>> 32) != 0;\r\n        while(v1 > 0 && uebertrag)\r\n            uebertrag = (value[--v1] = value[v1] - 1) == -1;\r\n\r\n        if(uebertrag){\r\n            signum = -signum;\r\n            int last = value.length-1;\r\n            for(int i=0; i<=last; i++){\r\n                value[i] = (i == last) ? -value[i] : ~value[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    void mul(MutableNumeric num){\r\n\t\t//TODO performance\r\n\t\tBigDecimal big = toBigDecimal().multiply(num.toBigDecimal() );\r\n\t\tsetValue( big.unscaledValue().toByteArray() );\r\n\t\tscale = big.scale();\r\n\t\tsignum = big.signum();\r\n    }\r\n\r\n\tfinal void mul(int factor){\r\n\t\tif(factor < 0){\r\n\t\t\tfactor = - factor;\r\n\t\t\tsignum = -signum;\r\n\t\t}\r\n\t\tlong carryover = 0;\r\n\t\tfor(int i = value.length-1; i>=0; i--){\r\n\t\t\tlong v = (value[i] & 0xFFFFFFFFL) * factor + carryover;\r\n\t\t\tvalue[i] = (int)v;\r\n\t\t\tcarryover = v >> 32;\r\n\t\t}\r\n\t\tif(carryover > 0){\r\n\t\t\tresizeValue( (int)carryover );\r\n\t\t}\r\n\t}\r\n\t\r\n\r\n    void div(MutableNumeric num){\r\n    \t//TODO performance\r\n\t\tint newScale = Math.max(scale+5, num.scale +4);\r\n\t\tBigDecimal big = toBigDecimal().divide(num.toBigDecimal(), newScale, BigDecimal.ROUND_HALF_EVEN);\r\n\t\tsetValue( big.unscaledValue().toByteArray() );\r\n\t\tscale = big.scale();\r\n\t\tsignum = big.signum();\r\n    }\r\n\t\r\n\r\n\tfinal void div(int quotient){\r\n\t\t//increment the scale with 5\r\n\t\tmul(100000);\r\n\t\tscale += 5;\r\n\t\t\r\n\t\tdivImpl(quotient);\r\n\t}\r\n\t\r\n\t\r\n\tfinal private void divImpl(int quotient){\t\r\n\t\tif(quotient == 1) return;\r\n\t\tif(quotient < 0){\r\n\t\t\tquotient = - quotient;\r\n\t\t\tsignum = -signum;\r\n\t\t}\r\n\t\tint valueLength = value.length;\r\n\t\tlong carryover = 0;\r\n\t\tfor(int i = 0; i<valueLength; i++){\r\n\t\t\tlong v = (value[i] & 0xFFFFFFFFL) + carryover;\r\n\t\t\tvalue[i] = (int)(v / quotient);\r\n\t\t\tcarryover = ((v % quotient) << 32);\r\n\t\t}\r\n\t\tcarryover /= quotient;\r\n\t\tif(carryover > 2147483648L || //2147483648L == Integer.MAX_VALUE+1\r\n\t\t  (carryover == 2147483648L && (value[valueLength-1] % 2 == 1))){\r\n\t\t\tint i = valueLength-1;\r\n\t\t\tboolean isCarryOver = true;\r\n\t\t\twhile(i >= 0 && isCarryOver)\r\n\t\t\t\tisCarryOver = (value[i--] += 1) == 0;\r\n\t\t}\r\n\t\tif(valueLength>1 && value[0] == 0){\r\n\t\t\tint[] temp = new int[valueLength-1];\r\n\t\t\tSystem.arraycopy(value, 1, temp, 0, valueLength-1);\r\n\t\t\tvalue = temp;\r\n\t\t}\r\n\t\t\t\r\n\t}\r\n\t\r\n\t\r\n    void mod(MutableNumeric num){\r\n    \t//TODO performance\r\n\t\tnum = new MutableNumeric( doubleValue() % num.doubleValue() );\r\n\t\tvalue = num.value;\r\n\t\tscale = num.scale;\r\n\t\tsignum = num.signum;\r\n    }\r\n\r\n\r\n\tint getScale(){\r\n\t    return scale;\r\n    }\r\n    \r\n    \r\n\tvoid setScale(int newScale){\r\n\t\tif(newScale == scale) return;\r\n\t\tint factor = 1;\r\n\t\tif(newScale > scale){\r\n\t\t\tfor(;newScale>scale; scale++){\r\n\t\t\t\tfactor *=10;\r\n\t\t\t\tif(factor == 1000000000){\r\n\t\t\t\t\tmul(factor);\r\n\t\t\t\t\tfactor = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmul(factor);\r\n\t\t}else{\r\n\t\t\tfor(;newScale<scale; scale--){\r\n\t\t\t\tfactor *=10;\r\n\t\t\t\tif(factor == 1000000000){\r\n\t\t\t\t\tdivImpl(factor);\r\n\t\t\t\t\tfactor = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdivImpl(factor);\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\r\n    /**\r\n     * @return Returns the signum.\r\n     */\r\n    int getSignum() {\r\n        return signum;\r\n    }\r\n    \r\n    \r\n    void setSignum(int signum){\r\n        this.signum = signum;\r\n    }\r\n    \r\n\r\n    void floor(){\r\n\t\t//TODO performance\r\n\t\tint oldScale = scale;\r\n\t\tsetScale(0);\r\n\t\tsetScale(oldScale);\r\n\t}\r\n\t\r\n\r\n    private void negate(byte[] complement){\r\n        int last = complement.length-1;\r\n        for(int i=0; i<=last; i++){\r\n            complement[i] = (byte)( (i == last) ? -complement[i] : ~complement[i]);\r\n        }\r\n        while(complement[last] == 0){\r\n            last--;\r\n            complement[last]++;\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * Convert this number in a 2 complement that can be used from BigInteger.\r\n     * The length is ever a multiple of 4\r\n     * @return the 2 complement of this object\r\n     */\r\n    byte[] toByteArray(){\r\n        if(signum == 0) return EMPTY_BYTES;\r\n        byte[] complement;\r\n        int offset;\r\n\r\n        int v = 0;\r\n        while(v < value.length && value[v] == 0) v++;\r\n        if (v == value.length) return EMPTY_BYTES;\r\n\r\n        if(value[v] < 0){\r\n            // If the highest bit is set then it must resize\r\n            // because this bit is needed for the signum\r\n            complement = new byte[(value.length-v)*4 + 4];\r\n            if(signum < 0)\r\n                complement[0] = complement[1] = complement[2] = complement[3] = -1;\r\n            offset = 4;\r\n        }else{\r\n            complement = new byte[(value.length-v)*4];\r\n            offset = 0;\r\n        }\r\n        int last = value.length-1;\r\n        for(; v <= last; v++){\r\n            int val = (signum>0) ? value[v] : (v == last) ? -value[v] : ~value[v];\r\n            complement[offset++] = (byte)(val >> 24);\r\n            complement[offset++] = (byte)(val >> 16);\r\n            complement[offset++] = (byte)(val >> 8);\r\n            complement[offset++] = (byte)(val);\r\n        }\r\n        return complement;\r\n    }\r\n\r\n    public int intValue(){\r\n        return Utils.long2int(longValue());\r\n    }\r\n    \r\n\r\n    public long longValue(){\r\n        if(value.length == 0 || signum == 0){\r\n            return 0;\r\n        }else{\r\n            if (value.length == 1 && (value[0] > 0)){\r\n                // simple Integer Value\r\n                return Utils.double2long(value[0] / scaleDoubleFactor[scale] * signum);\r\n            }else\r\n            if (value.length == 1){\r\n                // overflow Integer Value\r\n                long temp = value[0] & 0xFFFFFFFFL;\r\n                return Utils.double2long(temp / scaleDoubleFactor[scale] * signum);\r\n            }else\r\n            if (value.length == 2 && (value[0] > 0)){\r\n                // simple Long Value\r\n                long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);\r\n                return Utils.double2long(temp / scaleDoubleFactor[scale] * signum);\r\n            }else{\r\n           \t\tif(scale != 0){\r\n           \t\t\tMutableNumeric numeric = new MutableNumeric(this);\r\n           \t\t\tnumeric.setScale(0);\r\n           \t\t\treturn numeric.longValue();\r\n           \t\t}           \t\t\t\r\n            \treturn (signum > 0) ? Long.MAX_VALUE : Long.MIN_VALUE;\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    public float floatValue(){\r\n        if(value.length == 0 || signum == 0){\r\n            return 0;\r\n        }else{\r\n            if (value.length == 1 && (value[0] > 0)){\r\n                // simple Integer Value\r\n                return value[0] / scaleFloatFactor[scale] * signum;\r\n            }else\r\n            if (value.length == 1){\r\n                // overflow Integer Value\r\n                long temp = value[0] & 0xFFFFFFFFL;\r\n                return temp / scaleFloatFactor[scale] * signum;\r\n            }else\r\n            if (value.length == 2 && (value[0] > 0)){\r\n                // simple Long Value\r\n                long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);\r\n                return temp / scaleFloatFactor[scale] * signum;\r\n            }else{\r\n                return new BigDecimal( new BigInteger( toByteArray() ), scale ).floatValue();\r\n            }\r\n        }\r\n    }\r\n\r\n    public double doubleValue(){\r\n        if(value.length == 0 || signum == 0){\r\n            return 0;\r\n        }else{\r\n            if (value.length == 1 && (value[0] > 0)){\r\n                // simple Integer Value\r\n                return value[0] / scaleDoubleFactor[scale] * signum;\r\n            }else\r\n            if (value.length == 1){\r\n                // overflow Integer Value\r\n                long temp = value[0] & 0xFFFFFFFFL;\r\n                return temp / scaleDoubleFactor[scale] * signum;\r\n            }else\r\n            if (value.length == 2 && (value[0] > 0)){\r\n                // simple Long Value\r\n                long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);\r\n                return temp / scaleDoubleFactor[scale] * signum;\r\n            }else{\r\n                return new BigDecimal( new BigInteger( toByteArray() ), scale ).doubleValue();\r\n            }\r\n        }\r\n    }\r\n\r\n    public String toString(){\r\n        StringBuffer buf = new StringBuffer();\r\n        if(value.length == 0 || signum == 0){\r\n            buf.append( '0' );\r\n        }else{\r\n            if (value.length == 1 && (value[0] > 0)){\r\n                // simple Integer Value\r\n                buf.append( Integer.toString(value[0]) );\r\n            }else\r\n            if (value.length == 1){\r\n                // overflow Integer Value\r\n                long temp = value[0] & 0xFFFFFFFFL;\r\n                buf.append( Long.toString( temp ) );\r\n            }else\r\n            if (value.length == 2 && (value[0] > 0)){\r\n                // simple Long Value\r\n                long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);\r\n                buf.append( Long.toString( temp ) );\r\n            }else{\r\n                return new BigDecimal( new BigInteger( toByteArray() ), scale ).toString();\r\n            }\r\n        }\r\n        if(scale > 0){\r\n            while(buf.length() <= scale) buf.insert( 0, '0' );\r\n            buf.insert( buf.length() - scale, '.' );\r\n        }\r\n        if (signum < 0) buf.insert( 0, '-');\r\n        return buf.toString();\r\n    }\r\n    \r\n    public int compareTo(MutableNumeric numeric){\r\n    \t//TODO performance\r\n\t\treturn toBigDecimal().compareTo(numeric.toBigDecimal());\r\n    }           \r\n\r\n\tpublic boolean equals(Object obj){\r\n\t\tif(!(obj instanceof MutableNumeric)) return false;\r\n\t\treturn compareTo((MutableNumeric)obj) == 0;\r\n\t}\r\n\t\r\n    public BigDecimal toBigDecimal(){\r\n\t\tif(signum == 0) return new BigDecimal( BigInteger.ZERO, scale);\r\n        return new BigDecimal( new BigInteger( toByteArray() ), scale );\r\n    }\r\n\r\n    public BigDecimal toBigDecimal(int newScale){\r\n        if(newScale == this.scale) return toBigDecimal();\r\n        return toBigDecimal().setScale( newScale, BigDecimal.ROUND_HALF_EVEN);\r\n    }\r\n\r\n\tpublic Object getImmutableObject(){\r\n\t\treturn toBigDecimal();\r\n\t}\r\n\t\r\n\r\n    private static final byte[] EMPTY_BYTES = new byte[0];\r\n    private static final int [] EMPTY_INTS  = new int [0];\r\n    private static final double[] scaleDoubleFactor = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000 };\r\n    private static final float[]  scaleFloatFactor =  { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000 };\r\n}"},{"path":"/src/smallsql/database/TableView.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2011, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * TableView.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 05.06.2004\r\n */\r\npackage smallsql.database;\r\n\r\nimport java.io.*;\r\nimport java.nio.ByteBuffer;\r\nimport java.nio.channels.FileChannel;\r\nimport java.sql.*;\r\n\r\nimport smallsql.database.language.Language;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nabstract class TableView {\r\n\r\n\tstatic final int MAGIC_TABLE = 'S' << 24 | 'Q' << 16 | 'L' << 8 | 'T';\r\n\tstatic final int MAGIC_VIEW  = 'S' << 24 | 'Q' << 16 | 'L' << 8 | 'V';\r\n\tstatic final int TABLE_VIEW_VERSION = 2;\r\n\tstatic final int TABLE_VIEW_OLD_VERSION = 1;\r\n\t\r\n\tfinal String name;\r\n\tfinal Columns columns;\r\n\r\n\t/** \r\n\t * Mark the last change on the structure of the Table or View.\r\n\t * If this value change then PreparedStatements need to recompile.\r\n\t */\r\n\tprivate long timestamp = System.currentTimeMillis();\r\n\t\r\n\tstatic final int LOCK_NONE   = 0; // read on READ_COMMITED and READ_UNCOMMITED\r\n\tstatic final int LOCK_INSERT = 1; // prevent only LOCK_TAB\r\n\tstatic final int LOCK_READ   = 2; // occur on read and prevent a write of data, it can occur more as one LOCK_READ per page\r\n\tstatic final int LOCK_WRITE  = 3; // occur on write and prevent every other access to the data, it is only one LOCK_WRITE per page possible\r\n\tstatic final int LOCK_TAB    = 4; // lock the total table\r\n\r\n\r\n\tTableView(String name, Columns columns){\r\n\t\tthis.name = name;\r\n\t\tthis.columns = columns;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Load a Table or View object. \r\n\t */\r\n\tstatic TableView load(SSConnection con, Database database, String name) throws SQLException{\r\n\t    FileChannel raFile = null;\r\n\t\ttry{\r\n\t\t\tString fileName = Utils.createTableViewFileName( database, name );\r\n\t\t\tFile file = new File( fileName );\r\n\t\t\tif(!file.exists())\r\n\t\t\t\tthrow SmallSQLException.create(Language.TABLE_OR_VIEW_MISSING, name);\r\n\t\t\traFile = Utils.openRaFile( file, database.isReadOnly() );\r\n\t\t\tByteBuffer buffer = ByteBuffer.allocate(8);\r\n\t\t\traFile.read(buffer);\r\n\t\t\tbuffer.position(0);\r\n\t\t\tint magic   = buffer.getInt();\r\n\t\t\tint version = buffer.getInt();\r\n\t\t\tswitch(magic){\r\n\t\t\t\tcase MAGIC_TABLE:\r\n\t\t\t\tcase MAGIC_VIEW:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow SmallSQLException.create(Language.TABLE_OR_VIEW_FILE_INVALID, fileName);\r\n\t\t\t}\r\n\t\t\tif(version > TABLE_VIEW_VERSION)\r\n\t\t\t\tthrow SmallSQLException.create(Language.FILE_TOONEW, new Object[] { new Integer(version), fileName });\r\n\t\t\tif(version < TABLE_VIEW_OLD_VERSION)\r\n\t\t\t\tthrow SmallSQLException.create(Language.FILE_TOOOLD, new Object[] { new Integer(version), fileName });\r\n\t\t\tif(magic == MAGIC_TABLE)\r\n\t\t\t\treturn new Table( database, con, name, raFile, raFile.position(), version);\r\n\t\t\t\treturn new View ( con, name, raFile, raFile.position());\r\n\t\t}catch(Throwable e){\r\n\t\t\tif(raFile != null)\r\n\t\t\t\ttry{\r\n\t\t\t\t\traFile.close();\r\n\t\t\t\t}catch(Exception e2){\r\n\t\t\t\t\tDriverManager.println(e2.toString());\r\n\t\t\t\t}\r\n\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Get a file object for the current table or view. This is independent\r\n\t * if it exists or not.\r\n\t * @param database The database that the table or view include\r\n\t * @return a file handle, never null\r\n\t */\r\n\tFile getFile(Database database){\r\n\t\treturn new File( Utils.createTableViewFileName( database, name ) );\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * Create an empty table or view file that only include the signature.\r\n\t * @param database The database that the table or view should include.\r\n\t * @return A file handle\r\n\t * @throws Exception if any error occur like\r\n\t * <li>file exist already\r\n\t * <li>SecurityException\r\n\t */\r\n\tFileChannel createFile(SSConnection con, Database database) throws Exception{\r\n\t    if( database.isReadOnly() ){\r\n\t        throw SmallSQLException.create(Language.DB_READONLY);\r\n\t    }\r\n\t\tFile file = getFile( database );\r\n\t\tboolean ok = file.createNewFile();\r\n\t\tif(!ok) throw SmallSQLException.create(Language.TABLE_EXISTENT, name);\r\n\t\tFileChannel raFile = Utils.openRaFile( file, database.isReadOnly() );\r\n\t\tcon.add(new CreateFile(file, raFile, con, database));\r\n\t\twriteMagic(raFile);\r\n\t\treturn raFile;\r\n\t}\r\n\t\r\n\tabstract void writeMagic(FileChannel raFile) throws Exception;\r\n\r\n\t\r\n\tString getName(){\r\n\t\treturn name;\r\n\t}\r\n    \r\n\r\n\tlong getTimestamp(){\r\n\t\treturn timestamp;\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * Returns the index of a column name. The first column has the index 0.\r\n\t */\r\n\tfinal int findColumnIdx(String columnName){\r\n\t\t// FIXME switch to a tree search on performance reason\r\n\t\tfor(int i=0; i<columns.size(); i++){\r\n\t\t\tif( columns.get(i).getName().equalsIgnoreCase(columnName) ) return i;\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns the Column of a column name.\r\n\t */\r\n\tfinal Column findColumn(String columnName){\r\n\t\tfor(int i=0; i<columns.size(); i++){\r\n\t\t\tColumn column = columns.get(i);\r\n\t\t\tif( column.getName().equalsIgnoreCase(columnName) ) return column;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\r\n\t\r\n\t/**\r\n\t * Close it and free all resources.\r\n\t */\r\n\tvoid close() throws Exception{/* in this abstract class is nothing to free */}\r\n\r\n}\r\n\r\n\r\n"},{"path":"/src/smallsql/database/Index.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * Index.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\n\r\n\r\n/**\r\n * To index data there need to solve the follow problems\r\n * - change the values that need to save in the index to a value with sort order that is compatible\r\n *   with the index algorithm.\r\n * - multiple column index need to support. There should no identical save with combinations of values.\r\n * - The data type for column should be constant.\r\n * - the data need to save fast.\r\n * - the size of the index should be small (also with a small count of values)\r\n * - It should use for unique index and nor unique. The unique index can save only one rowOffset.\r\n *   The non unique can save multiple rowOffsets in a LongTreeList.\r\n * - Problem ORDER BY with Joins? There are more as one rowOffset per row.\r\n * \r\n * \r\n * Algorithm:\r\n * - convert the values that the binary order is equals to the value order. We need to handle\r\n *   sign, floating numbers, case insensitive, different binary length (MutableNumeric).\r\n * - create a 256 byte large mask for the first byte.\r\n * - create a 256 byte large status mask\r\n * - create a 256 large Object array\r\n * \r\n * \r\n * @author Volker Berlin\r\n *\r\n */\r\nclass Index{\r\n\r\n\tfinal IndexNode rootPage;\r\n\t\r\n\t/**\r\n\t * Create an Index in the memory. An Index is like a sorted list.\r\n\t * @param unique true if there are no duplicated values allow.\r\n\t */\r\n\tIndex(boolean unique){\r\n\t\trootPage = new IndexNode(unique, (char)-1);\r\n\t}\r\n\t\r\n    \r\n    Index(IndexNode rootPage){\r\n        this.rootPage = rootPage;\r\n    }\r\n    \r\n    \r\n\tIndexScrollStatus createScrollStatus(Expressions expressions){\r\n\t\treturn new IndexScrollStatus(rootPage, expressions);\r\n\t}\r\n\t\r\n\t/**\r\n     * Returns a Long (unique) or a LongTreeList with rowOffsets. If the value in expressions does not exist then it\r\n     * return a null.\r\n     * \r\n     * @param expressions\r\n     *            The value that are search in the Index.\r\n     * @param searchNullValues\r\n     *            expressions with NULL values should return a result.\r\n     * @param nodeList\r\n     *            optional, can be null. The search path in the index tree.\r\n     */\r\n\tfinal Object findRows(Expressions expressions, boolean searchNullValues, ArrayList nodeList) throws Exception{\r\n        IndexNode page = rootPage;\r\n        int count = expressions.size();\r\n        for(int i = 0; i < count; i++){\r\n            page = findRows(page, expressions.get(i), searchNullValues, nodeList);\r\n            if(page == null)\r\n                return null;\r\n            if(i + 1 == count)\r\n                return page.getValue();\r\n            else\r\n                page = (IndexNode)page.getValue();\r\n        }\r\n        throw new Error();\r\n    }\r\n\t\r\n\t\r\n\t/**\r\n     * Returns a Long (unique) or a LongTreeList with rowOffsets. If the value in expressions does not exist then it\r\n     * return a null.\r\n     * \r\n     * @param expressions\r\n     *            The value that are search in the Index.\r\n     * @param searchNullValues\r\n     *            a expression with NULL values should return a result.\r\n     * @param nodeList\r\n     *            optional, can be null. The search path in the index tree.\r\n     */\r\n    final Object findRows(Expression[] expressions, boolean searchNullValues, ArrayList nodeList) throws Exception{\r\n        IndexNode page = rootPage;\r\n        int count = expressions.length;\r\n        for(int i = 0; i < count; i++){\r\n            page = findRows(page, expressions[i], searchNullValues, nodeList);\r\n            if(page == null)\r\n                return null;\r\n            if(i + 1 == count)\r\n                return page.getValue();\r\n            else\r\n                page = (IndexNode)page.getValue();\r\n        }\r\n        throw new Error();\r\n    }\r\n\t\r\n\t\r\n\t/**\r\n     * Return the last IndexNode for the expression. If the value in expressions does not exist then it return a null.\r\n     * \r\n     * @param page\r\n     *            the start point of the search. If it the first expression of a list then it is the rootPage\r\n     * @param expr\r\n     *            the searching expression\r\n     * @param searchNullValues\r\n     *            a expression with NULL values should return a result.\r\n     * @param nodeList\r\n     *            optional, can be null. The search path in the index tree.\r\n     * @return the mapping IndexNode or null.\r\n     */\r\n\tfinal private IndexNode findRows(IndexNode page, Expression expr, boolean searchNullValues, ArrayList nodeList) throws Exception{\r\n\t\t\tif(expr.isNull()){\r\n                if(!searchNullValues){\r\n                    return null;\r\n                }\r\n\t\t\t\tpage = findNull(page);\r\n\t\t\t}else{\r\n\t\t\t\tswitch(expr.getDataType()){\r\n\t\t\t\t\tcase SQLTokenizer.REAL:\r\n\t\t\t\t\t\tpage = find( page, floatToBinarySortOrder( expr.getFloat()), 2, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.DOUBLE:\r\n\t\t\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\t\t\t\tpage = find( page, doubleToBinarySortOrder( expr.getDouble()), 4, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.TINYINT:\r\n\t\t\t\t\t\tpage = find( page, expr.getInt(), 1, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.SMALLINT:\r\n\t\t\t\t\t\tpage = find( page, shortToBinarySortOrder( expr.getInt()), 1, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.INT:\r\n\t\t\t\t\t\tpage = find( page, intToBinarySortOrder( expr.getInt()), 2, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.BIGINT:\r\n\t\t\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\tcase SQLTokenizer.MONEY:\r\n\t\t\t\t\tcase SQLTokenizer.SMALLMONEY:\r\n\t\t\t\t\t\tpage = find( page, longToBinarySortOrder( expr.getLong()), 4, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.NVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.LONGNVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\t\t\t\tpage = find( page, stringToBinarySortOrder( expr.getString(), false ), nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.NCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\t\t\t\tpage = find( page, stringToBinarySortOrder( expr.getString(), true ), nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.VARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.BINARY:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.BLOB:\r\n\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\t\t\tpage = find( page, bytesToBinarySortOrder( expr.getBytes()), nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.BIT:\r\n\t\t\t\t\tcase SQLTokenizer.BOOLEAN:\r\n\t\t\t\t\t\tpage = find( page, expr.getBoolean() ? 2 : 1, 1, nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\t\tcase SQLTokenizer.DECIMAL:\t\t\t\t\t\t\r\n\t\t\t\t\t\tpage = find( page, numericToBinarySortOrder( expr.getNumeric() ), nodeList );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault: \r\n\t\t\t\t\t\t//TODO more data types\r\n\t\t\t\t\t\tthrow new Error(String.valueOf(expr.getDataType()));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn page;\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * Add a value to the index.\r\n\t * @param rowOffset Is the value that is save in the index. It is typical a row number or a rowOffset.\r\n\t * @param expressions This is the list of ORDER BY columns and describe the position in the index.\r\n\t */\r\n\tfinal void addValues( long rowOffset, Expressions expressions ) throws Exception{\r\n\t\tIndexNode page = this.rootPage;\r\n\t\tint count = expressions.size();\r\n\t\tfor(int i=0; i<count; i++){\r\n\t\t\tExpression expr = expressions.get(i);\r\n\t\t\tboolean isLastValues = (i == count-1);\r\n\t\t\tif(expr.isNull()){\r\n\t\t\t\tpage = addNull(page, rowOffset, isLastValues);\r\n\t\t\t}else{\r\n\t\t\t\tswitch(expr.getDataType()){\r\n\t\t\t\t\tcase SQLTokenizer.REAL:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, floatToBinarySortOrder( expr.getFloat()), isLastValues, 2 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.DOUBLE:\r\n\t\t\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, doubleToBinarySortOrder( expr.getDouble()), isLastValues, 4 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.TINYINT:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, expr.getInt(), isLastValues, 1 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.SMALLINT:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, shortToBinarySortOrder( expr.getInt()), isLastValues, 1 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.INT:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, intToBinarySortOrder( expr.getInt()), isLastValues, 2 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.BIGINT:\r\n\t\t\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\tcase SQLTokenizer.MONEY:\r\n\t\t\t\t\tcase SQLTokenizer.SMALLMONEY:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, longToBinarySortOrder( expr.getLong()), isLastValues, 4 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.NVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.LONGNVARCHAR:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, stringToBinarySortOrder( expr.getString(), false ), isLastValues );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.NCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, stringToBinarySortOrder( expr.getString(), true ), isLastValues );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.VARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.BINARY:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARBINARY:\r\n\t\t\t\t\tcase SQLTokenizer.BLOB:\r\n\t\t\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, bytesToBinarySortOrder( expr.getBytes()), isLastValues );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.BIT:\r\n\t\t\t\t\tcase SQLTokenizer.BOOLEAN:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, expr.getBoolean() ? 2 : 1, isLastValues, 1 );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\t\t\t\tpage = add( page, rowOffset, numericToBinarySortOrder( expr.getNumeric()), isLastValues );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault: \r\n\t\t\t\t\t\t//TODO more data types\r\n\t\t\t\t\t\tthrow new Error(String.valueOf(expr.getDataType()));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\t\r\n\tfinal void removeValue( long rowOffset, Expressions expressions ) throws Exception{\r\n\t\tArrayList nodeList = new ArrayList();\r\n\t\tObject obj = findRows(expressions, true, nodeList);\r\n\t\tif(!rootPage.getUnique()){\r\n\t\t\tLongTreeList list = (LongTreeList)obj;\r\n\t\t\tlist.remove(rowOffset);\r\n\t\t\tif(list.getSize() > 0) return;\r\n\t\t}\r\n\t\tIndexNode node = (IndexNode)nodeList.get(nodeList.size()-1);\r\n\t\tnode.clearValue();\r\n\t\tfor(int i = nodeList.size()-2; i >= 0; i--){\r\n\t\t\tif(!node.isEmpty())\r\n\t\t\t\tbreak;\r\n\t\t\tIndexNode parent = (IndexNode)nodeList.get(i);\r\n\t\t\tparent.removeNode( node.getDigit() );\r\n\t\t\tnode = parent;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\tfinal private IndexNode findNull(IndexNode page){\r\n\t\treturn page.getChildNode( (char)0 );\r\n\t}\r\n\t\r\n\r\n\tfinal private IndexNode addNull(IndexNode page, long rowOffset, boolean isLastValue) throws SQLException{\r\n\t\tif(isLastValue){\r\n\t\t\tpage.addNode( (char)0, rowOffset );\r\n\t\t\treturn null;\r\n\t\t}else\r\n\t\t\treturn page.addRoot((char)0);\r\n\t}\r\n\r\n\t\r\n\tfinal private IndexNode find(IndexNode node, long key, int digitCount, ArrayList nodeList){\r\n\t\tfor(int i=digitCount-1; i>=0; i--){\r\n\t\t\tchar digit = (char)(key >> (i<<4));\r\n\t\t\tnode = node.getChildNode(digit);\r\n\t\t\t\r\n\t\t\tif(node == null) return null;\r\n\t\t\tif(nodeList != null) nodeList.add(node);\r\n\r\n\t\t\tif(equals(node.getRemainderValue(), key, i)){\r\n\t\t\t\treturn node;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn node;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * The key has a binary sort order. This means the most significant byte is in the high byte.\r\n\t * @param digitCount The count of 16Bit digits.\r\n\t */\r\n\tfinal private IndexNode add(IndexNode node, long rowOffset, long key, boolean isLastValue, int digitCount) throws SQLException{\r\n\t\tfor(int i=digitCount-1; i>=0; i--){\r\n\t\t\tchar digit = (char)(key >> (i<<4));\r\n\t\t\tif(i == 0){\r\n\t\t\t\tif(isLastValue){\r\n\t\t\t\t\tnode.addNode( digit, rowOffset );\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRoot(digit);\r\n\t\t\t}\r\n\t\t\tnode = node.addNode(digit);\r\n\t\t\tif(node.isEmpty()){\r\n\t\t\t\tif(isLastValue){\r\n\t\t\t\t\tnode.addRemainderKey( rowOffset, key, i );\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRootValue( key, i);\r\n\t\t\t}else\r\n\t\t\tif(equals(node.getRemainderValue(), key, i)){\r\n\t\t\t\tif(isLastValue){\r\n\t\t\t\t\tnode.saveValue( rowOffset);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRoot();\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\tthrow new Error();\r\n\t}\r\n\t\r\n\t\r\n\tfinal private IndexNode find(IndexNode node, char[] key, ArrayList nodeList){\r\n\t\tint length = key.length;\r\n\t\tint i=-1;\r\n\t\twhile(true){\r\n\t\t\t// the first digit include 0-null; 1-empty; 2 another value\r\n\t\t\tchar digit = (i<0) ? (length == 0 ? (char)1 : 2)\r\n\t\t\t\t\t\t\t  : (key[i]);\r\n\t\t\tnode = node.getChildNode(digit);\r\n\r\n\t\t\tif(node == null) return null;\r\n\t\t\tif(nodeList != null) nodeList.add(node);\r\n\t\t\tif(++i == length){\r\n\t\t\t\treturn node;\r\n\t\t\t}\r\n\r\n\t\t\tif(equals(node.getRemainderValue(), key, i)){\r\n\t\t\t\treturn node;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Add a byte array to the Index.\r\n\t */\r\n\tfinal private IndexNode add(IndexNode node, long rowOffset, char[] key, boolean isLast) throws SQLException{\r\n\t\tint length = key.length;\r\n\t\tint i=-1;\r\n\t\twhile(true){\r\n\t\t\t// the first digit include 0-null; 1-empty; 2 another value\r\n\t\t\tchar digit = (i<0) ? (length == 0 ? (char)1 : 2)\r\n\t\t\t\t\t\t\t  : (key[i]);\r\n\t\t\tif(++i == length){\r\n\t\t\t\tif(isLast){\r\n\t\t\t\t\tnode.addNode( digit, rowOffset );\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRoot(digit);\r\n\t\t\t}\r\n\t\t\tnode = node.addNode(digit);\r\n\t\t\tif(node.isEmpty()){\r\n\t\t\t\tif(isLast){\r\n\t\t\t\t\tnode.addRemainderKey( rowOffset, key, i );\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRootValue( key, i );\r\n\t\t\t}else\r\n\t\t\tif(equals(node.getRemainderValue(), key, i)){\r\n\t\t\t\tif(isLast){\r\n\t\t\t\t\tnode.saveValue(rowOffset);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRoot();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Remove all entries\r\n\t */\r\n\tfinal void clear(){\r\n\t\trootPage.clear();\r\n\t}\r\n\t/*================================================================\r\n\t * Normalize functions\r\n\t * convert the value to a binary with identical sort order \r\n\t * like the original values. \r\n\t ================================================================*/\r\n\t\r\n\t\r\n\tfinal static private int floatToBinarySortOrder(float value){\r\n\t\tint intValue = Float.floatToIntBits(value);\r\n\t\treturn (intValue<0) ?\r\n\t\t\t~intValue :\r\n\t\t\tintValue ^ 0x80000000;\t\t\t\r\n\t}\r\n\t\r\n\tfinal static private long doubleToBinarySortOrder(double value){\r\n\t\tlong intValue = Double.doubleToLongBits(value);\r\n\t\treturn (intValue<0) ?\r\n\t\t\t~intValue :\r\n\t\t\tintValue ^ 0x8000000000000000L;\t\t\t\r\n\t}\r\n\t\r\n\tfinal static private int shortToBinarySortOrder(int value){\r\n\t\treturn value ^ 0x8000;\r\n\t}\r\n\t\r\n\tfinal static private int intToBinarySortOrder(int value){\r\n\t\treturn value ^ 0x80000000;\r\n\t}\r\n\t\r\n\tfinal static private long longToBinarySortOrder(long value){\r\n\t\treturn value ^ 0x8000000000000000L;\r\n\t}\r\n\t\r\n\t\r\n\tfinal static private char[] stringToBinarySortOrder(String value, boolean needTrim){\r\n\t\tint length = value.length();\r\n\t\tif(needTrim){\r\n\t\t\twhile(length > 0 && value.charAt(length-1) == ' ') length--;\r\n\t\t}\r\n\t\tchar[] puffer = new char[length];\r\n\t\tfor(int i=0; i<length; i++){\r\n\t\t\tpuffer[i] = Character.toLowerCase(Character.toUpperCase( value.charAt(i) ));\r\n\t\t}\r\n\t\treturn puffer;\r\n\t}\r\n\t\r\n\t\r\n\tfinal static private char[] bytesToBinarySortOrder(byte[] value){\r\n\t\tint length = value.length;\r\n\t\tchar[] puffer = new char[length];\r\n\t\tfor(int i=0; i<length; i++){\r\n\t\t\tpuffer[i] = (char)(value[i] & 0xFF);\r\n\t\t}\r\n\t\treturn puffer;\r\n\t}\r\n\t\r\n\t\r\n\tfinal static private char[] numericToBinarySortOrder(MutableNumeric numeric){\r\n\t\tint[] value = numeric.getInternalValue();\r\n\t\tint count = 1;\r\n\t\tint i;\r\n\t\tfor(i=0; i<value.length; i++){\r\n\t\t\tif(value[i] != 0){\r\n\t\t\t\tcount = 2*(value.length - i)+1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tchar[] puffer = new char[count];\r\n\t\tpuffer[0] = (char)count;\r\n\t\tfor(int c=1; c<count;){\r\n\t\t\tpuffer[c++] = (char)(value[i] >> 16);\r\n\t\t\tpuffer[c++] = (char)value[i++];\r\n\t\t}\r\n\t\treturn puffer;\r\n\t}\r\n\t\r\n\t\r\n\t/*================================================================\r\n\t * \r\n\t * Functions  for reading the index.\r\n\t *\r\n\t ================================================================*/\r\n\t\r\n\t\r\n\t\r\n\tprivate final boolean equals(char[] src1, char[] src2, int offset2){\r\n\t\tif(src1 == null) return false;\r\n\t\tint length = src1.length;\r\n\t\tif(length != src2.length - offset2) return false;\r\n\t\tfor(int i=0; i<length; i++){\r\n\t\t\tif(src1[i] != src2[i+offset2]) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\r\n\tprivate final boolean equals(char[] src1, long src2, int charCount){\r\n\t\tif(src1 == null) return false;\r\n\t\tint length = src1.length;\r\n\t\tif(length != charCount) return false;\r\n\t\tfor(int i=0, d = charCount-1; i<length; i++){\r\n\t\t\tif(src1[i] != (char)((src2 >> (d-- << 4)))) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n}\r\n"},{"path":"/src/smallsql/database/SSPreparedStatement.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * SSPreparedStatement.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\nimport java.sql.*;\r\nimport java.math.*;\r\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.net.URL;\r\n\r\n\r\nclass SSPreparedStatement extends SSStatement implements PreparedStatement {\r\n\r\n\tprivate ArrayList batches;\r\n    private final int top; // value of an optional top expression\r\n\t\r\n    SSPreparedStatement( SSConnection con, String sql ) throws SQLException {\r\n        this( con, sql, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY );\r\n    }\r\n\r\n    SSPreparedStatement( SSConnection con, String sql, int rsType, int rsConcurrency ) throws SQLException {\r\n        super( con, rsType, rsConcurrency );\r\n        con.log.println(sql);\r\n        SQLParser parser = new SQLParser();\r\n        cmd = parser.parse( con, sql );\r\n        top = cmd.getMaxRows();\r\n    }\r\n\r\n    public ResultSet executeQuery() throws SQLException {\r\n\t\texecuteImp();\r\n        return cmd.getQueryResult();\r\n    }\r\n    \r\n    public int executeUpdate() throws SQLException {\r\n\t\texecuteImp();\r\n\t\treturn cmd.getUpdateCount();\r\n    }\r\n    \r\n\tfinal private void executeImp() throws SQLException {\r\n        checkStatement();\r\n\t\tcmd.verifyParams();\r\n        if(getMaxRows() != 0 && (top == -1 || top > getMaxRows()))\r\n            cmd.setMaxRows(getMaxRows());\r\n\t\tcmd.execute( con, this);\r\n\t}\r\n    \r\n    public void setNull(int parameterIndex, int sqlType) throws SQLException {\r\n        checkStatement();\r\n        cmd.setParamValue( parameterIndex, null, SQLTokenizer.NULL);\r\n    }\r\n    \r\n    \r\n    public void setBoolean(int parameterIndex, boolean x) throws SQLException {\r\n        checkStatement();\r\n        cmd.setParamValue( parameterIndex, x ? Boolean.TRUE : Boolean.FALSE, SQLTokenizer.BOOLEAN);\r\n    }\r\n    \r\n    \r\n    public void setByte(int parameterIndex, byte x) throws SQLException {\r\n        checkStatement();\r\n        cmd.setParamValue( parameterIndex, new Integer(x), SQLTokenizer.TINYINT);\r\n    }\r\n    \r\n    \r\n    public void setShort(int parameterIndex, short x) throws SQLException {\r\n        checkStatement();\r\n        cmd.setParamValue( parameterIndex, new Integer(x), SQLTokenizer.SMALLINT);\r\n    }\r\n    \r\n    \r\n    public void setInt(int parameterIndex, int x) throws SQLException {\r\n        checkStatement();\r\n        cmd.setParamValue( parameterIndex, new Integer(x), SQLTokenizer.INT);\r\n    }\r\n    \r\n    \r\n    public void setLong(int parameterIndex, long x) throws SQLException {\r\n        checkStatement();\r\n        cmd.setParamValue( parameterIndex, new Long(x), SQLTokenizer.BIGINT);\r\n    }\r\n    \r\n    \r\n    public void setFloat(int parameterIndex, float x) throws SQLException {\r\n        checkStatement();\r\n        cmd.setParamValue( parameterIndex, new Float(x), SQLTokenizer.REAL);\r\n    }\r\n    \r\n    \r\n    public void setDouble(int parameterIndex, double x) throws SQLException {\r\n        checkStatement();\r\n        cmd.setParamValue( parameterIndex, new Double(x), SQLTokenizer.DOUBLE);\r\n    }\r\n    \r\n    \r\n    public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {\r\n        checkStatement();\r\n        cmd.setParamValue( parameterIndex, x, SQLTokenizer.DECIMAL);\r\n    }\r\n    \r\n    \r\n    public void setString(int parameterIndex, String x) throws SQLException {\r\n        checkStatement();\r\n        cmd.setParamValue( parameterIndex, x, SQLTokenizer.VARCHAR);\r\n    }\r\n    \r\n    \r\n    public void setBytes(int parameterIndex, byte[] x) throws SQLException {\r\n        checkStatement();\r\n        cmd.setParamValue( parameterIndex, x, SQLTokenizer.BINARY);\r\n    }\r\n    \r\n    \r\n    public void setDate(int parameterIndex, Date x) throws SQLException {\r\n        checkStatement();\r\n        cmd.setParamValue( parameterIndex, DateTime.valueOf(x), SQLTokenizer.DATE);\r\n    }\r\n    \r\n    \r\n    public void setTime(int parameterIndex, Time x) throws SQLException {\r\n        checkStatement();\r\n        cmd.setParamValue( parameterIndex, DateTime.valueOf(x), SQLTokenizer.TIME);\r\n    }\r\n    \r\n    \r\n    public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {\r\n        checkStatement();\r\n        cmd.setParamValue( parameterIndex, DateTime.valueOf(x), SQLTokenizer.TIMESTAMP);\r\n    }\r\n    \r\n    \r\n    public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {\r\n        checkStatement();\r\n\t\tcmd.setParamValue( parameterIndex, x, SQLTokenizer.LONGVARCHAR, length);\r\n    }\r\n    \r\n    \r\n    public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {\r\n        checkStatement();\r\n        /**@todo: Implement this java.sql.PreparedStatement method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method setUnicodeStream() not yet implemented.\");\r\n    }\r\n    \r\n    \r\n    public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {\r\n        checkStatement();\r\n\t\tcmd.setParamValue( parameterIndex, x, SQLTokenizer.LONGVARBINARY, length);\r\n    }\r\n    \r\n    \r\n    public void clearParameters() throws SQLException {\r\n        checkStatement();\r\n        cmd.clearParams();\r\n    }\r\n    \r\n    \r\n    public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {\r\n        checkStatement();\r\n    \t//FIXME Scale to consider \r\n\t\tcmd.setParamValue( parameterIndex, x, -1);\r\n    }\r\n    \r\n    \r\n    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {\r\n        checkStatement();\r\n        cmd.setParamValue( parameterIndex, x, -1);\r\n    }\r\n    \r\n    \r\n    public void setObject(int parameterIndex, Object x) throws SQLException {\r\n        checkStatement();\r\n        cmd.setParamValue( parameterIndex, x, -1);\r\n    }\r\n    \r\n    \r\n    public boolean execute() throws SQLException {\r\n\t\texecuteImp();\r\n        return cmd.getResultSet() != null;\r\n    }\r\n    \r\n    \r\n    public void addBatch() throws SQLException {\r\n        checkStatement();\r\n    \ttry{\r\n\t    \tfinal Expressions params = cmd.params;\r\n\t    \tfinal int size = params.size();\r\n\t\t\tExpressionValue[] values = new ExpressionValue[size];\r\n\t    \tfor(int i=0; i<size; i++){\r\n\t    \t\tvalues[i] = (ExpressionValue)params.get(i).clone();\r\n\t    \t}\r\n\t    \tif(batches == null) batches = new ArrayList();\r\n\t    \tbatches.add(values);\r\n    \t}catch(Exception e){\r\n    \t\tthrow SmallSQLException.createFromException(e);\r\n    \t}\r\n    }\r\n    \r\n    \r\n\tpublic void clearBatch() throws SQLException {\r\n        checkStatement();\r\n\t\tif(batches != null) batches.clear();\r\n\t}\r\n\t\r\n\t\r\n    public int[] executeBatch() throws BatchUpdateException {\r\n\t\tif(batches == null || batches.size() == 0) return new int[0];\r\n\t\tint[] result = new int[batches.size()];\r\n\t\tBatchUpdateException failed = null;\r\n\t\tfor(int b=0; b<batches.size(); b++){\r\n\t\t\ttry{\r\n                checkStatement();\r\n\t\t\t\tExpressionValue[] values = (ExpressionValue[])batches.get(b);\r\n\t\t\t\tfor(int i=0; i<values.length; i++){\r\n\t\t\t\t\t((ExpressionValue)cmd.params.get(i)).set( values[i] );\r\n\t\t\t\t}\r\n\t\t\t\tresult[b] = executeUpdate();\r\n\t\t\t} catch (SQLException ex) {\r\n\t\t\t\tresult[b] = EXECUTE_FAILED;\r\n\t\t\t\tif(failed == null){\r\n\t\t\t\t\tfailed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n\t\t\t\t\tfailed.initCause(ex);\r\n\t\t\t\t}\r\n\t\t\t\tfailed.setNextException(ex);\r\n\t\t\t}\r\n\t\t}\r\n    \tbatches.clear();\r\n    \tif(failed != null)\r\n    \t\tthrow failed;\r\n    \treturn result;\r\n\t}\r\n\t\r\n\t\r\n    public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {\r\n        checkStatement();\r\n        /**@todo: Implement this java.sql.PreparedStatement method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method setCharacterStream() not yet implemented.\");\r\n    }\r\n    \r\n    \r\n    public void setRef(int i, Ref x) throws SQLException {\r\n        checkStatement();\r\n        /**@todo: Implement this java.sql.PreparedStatement method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method setRef() not yet implemented.\");\r\n    }\r\n    public void setBlob(int i, Blob x) throws SQLException {\r\n        checkStatement();\r\n        /**@todo: Implement this java.sql.PreparedStatement method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method setBlob() not yet implemented.\");\r\n    }\r\n    public void setClob(int i, Clob x) throws SQLException {\r\n        checkStatement();\r\n        /**@todo: Implement this java.sql.PreparedStatement method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method setClob() not yet implemented.\");\r\n    }\r\n    public void setArray(int i, Array x) throws SQLException {\r\n        checkStatement();\r\n        /**@todo: Implement this java.sql.PreparedStatement method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method setArray() not yet implemented.\");\r\n    }\r\n\t\r\n\t\r\n    public ResultSetMetaData getMetaData() throws SQLException {\r\n        checkStatement();\r\n\t\tif(cmd instanceof CommandSelect){\r\n\t\t\ttry{\r\n\t\t\t\t((CommandSelect)cmd).compile(con);\r\n\t\t\t\tSSResultSetMetaData metaData = new SSResultSetMetaData();\r\n\t\t\t\tmetaData.columns = cmd.columnExpressions;\r\n\t\t\t\treturn metaData;\r\n\t\t\t}catch(Exception e){\r\n\t\t\t\tthrow SmallSQLException.createFromException(e);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n    }\r\n\t\r\n\t\r\n    public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {\r\n        checkStatement();\r\n        /**@todo: Implement this java.sql.PreparedStatement method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method setDate() not yet implemented.\");\r\n    }\r\n    public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {\r\n        checkStatement();\r\n        /**@todo: Implement this java.sql.PreparedStatement method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method setTime() not yet implemented.\");\r\n    }\r\n    public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {\r\n        checkStatement();\r\n        /**@todo: Implement this java.sql.PreparedStatement method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method setTimestamp() not yet implemented.\");\r\n    }\r\n    public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException {\r\n        checkStatement();\r\n        /**@todo: Implement this java.sql.PreparedStatement method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method setNull() not yet implemented.\");\r\n    }\r\n    public void setURL(int parameterIndex, URL x) throws SQLException {\r\n        checkStatement();\r\n        /**@todo: Implement this java.sql.PreparedStatement method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method setURL() not yet implemented.\");\r\n    }\r\n    public ParameterMetaData getParameterMetaData() throws SQLException {\r\n        checkStatement();\r\n       /**@todo: Implement this java.sql.PreparedStatement method*/\r\n        throw new java.lang.UnsupportedOperationException(\"Method getParameterMetaData() not yet implemented.\");\r\n    }\r\n}"},{"path":"/src/smallsql/database/View.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2011, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * View.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 31.05.2004\r\n */\r\npackage smallsql.database;\r\n\r\nimport java.io.*;\r\nimport java.nio.ByteBuffer;\r\nimport java.nio.channels.FileChannel;\r\n\r\nimport smallsql.database.language.Language;\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nclass View extends TableView{\r\n\tfinal String sql;\r\n\tfinal CommandSelect commandSelect;\r\n\t\r\n\t\r\n\t/**\r\n\t * Constructor for loading an existing view. \r\n\t */\r\n\tView(SSConnection con, String name, FileChannel raFile, long offset) throws Exception{\r\n\t\tsuper( name, new Columns() );\r\n\t\tStorePage storePage = new StorePage( null, -1, raFile, offset);\r\n\t\tStoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.SELECT, offset);\r\n\t\tsql = store.readString();\r\n\t\t\r\n\t\t// read additional informations\r\n\t\tint type;\r\n\t\twhile((type = store.readInt()) != 0){\r\n\t\t\tint offsetInPage = store.getCurrentOffsetInPage();\r\n\t\t\tint size = store.readInt();\r\n\t\t\tswitch(type){\r\n\t\t\t\t//currently there are no additinal informations, see write()\r\n\t\t\t}\r\n\t\t\tstore.setCurrentOffsetInPage(offsetInPage + size);\r\n\t\t}\r\n\t\t\r\n\t\traFile.close();\r\n\t\tcommandSelect = (CommandSelect)new SQLParser().parse(con, sql);\r\n\t\tcreateColumns(con);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Constructor for a new view. Is call on execute() of CREATE VIEW. This view is not init.\r\n\t */\r\n\tView(Database database, SSConnection con, String name, String sql) throws Exception{\r\n\t\tsuper( name, new Columns() );\r\n\t\tthis.sql  = sql;\r\n\t\tthis.commandSelect = null;\r\n\t\twrite(database, con);\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * Constructor for a UNION \r\n\t */\r\n\tView(SSConnection con, CommandSelect commandSelect) throws Exception{\r\n\t\tsuper(\"UNION\", new Columns());\r\n\t\tthis.sql = null;\r\n\t\tthis.commandSelect = commandSelect;\r\n\t\tcreateColumns(con);\r\n\t}\r\n\t\r\n\t\r\n\tprivate void createColumns(SSConnection con) throws Exception{\r\n\t\tcommandSelect.compile(con);\r\n\t\tExpressions exprs = commandSelect.columnExpressions;\r\n\t\tfor(int c=0; c<exprs.size(); c++){\r\n\t\t\tExpression expr = exprs.get(c);\r\n\t\t\tif(expr instanceof ExpressionName){\r\n\t\t\t\tColumn column = ((ExpressionName)expr).getColumn().copy();\r\n\t\t\t\tcolumn.setName( expr.getAlias() );\r\n\t\t\t\tcolumns.add( column );\r\n\t\t\t}else{\r\n\t\t\t\tcolumns.add( new ColumnExpression(expr));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * Drop the View. This method is static that the file does not need to load and also corrupt files can be dropped.\r\n\t */ \r\n\tstatic void drop(Database database, String name) throws Exception{\r\n\t\tFile file = new File( Utils.createTableViewFileName( database, name ) );\r\n\t\tboolean ok = file.delete();\r\n\t\tif(!ok) throw SmallSQLException.create(Language.VIEW_CANTDROP, name);\r\n\t}\r\n    \r\n\r\n\tprivate void write(Database database, SSConnection con) throws Exception{\r\n\t    FileChannel raFile = createFile( con, database );\r\n\t\tStorePage storePage = new StorePage( null, -1, raFile, 8);\r\n\t\tStoreImpl store = StoreImpl.createStore( null, storePage, SQLTokenizer.CREATE, 8);\r\n\t\tstore.writeString(sql);\t\t\r\n\t\t\r\n\t\t// write additional informations\r\n\t\tstore.writeInt( 0 ); // no more additinal informations\r\n\r\n\t\tstore.writeFinsh(null);\r\n\t\traFile.close();\r\n\t}\r\n\r\n\t@Override\r\n    void writeMagic(FileChannel raFile) throws Exception{\r\n        ByteBuffer buffer = ByteBuffer.allocate(8);\r\n        buffer.putInt(MAGIC_VIEW);\r\n        buffer.putInt(TABLE_VIEW_VERSION);\r\n        buffer.position(0);\r\n        raFile.write(buffer);\r\n\t}\r\n\t\r\n}\r\n"},{"path":"/src/smallsql/database/Utils.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2011, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * Utils.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.RandomAccessFile;\r\nimport java.nio.channels.FileChannel;\r\nimport java.nio.channels.FileLock;\r\nimport java.sql.SQLException;\r\nimport smallsql.database.language.Language;\r\n\r\nclass Utils {\r\n\r\n\tstatic final String MASTER_FILENAME = \"smallsql.master\";\r\n\tstatic final String TABLE_VIEW_EXTENTION = \".sdb\";\r\n\tprivate static final String LOB_EXTENTION = \".lob\";\r\n\tstatic final String IDX_EXTENTION = \".idx\";\r\n\tprivate static final Integer[] integerCache = new Integer[260];\r\n\tprivate static final Short[]   shortCache   = new Short[260];\r\n\t\r\n\tstatic{\r\n\t\tfor(int i=-4; i<256; i++){\r\n\t\t\tintegerCache[ i+4 ] = new Integer(i);\r\n\t\t\tshortCache  [ i+4 ] = new Short((short)i);\r\n\t\t}\r\n\t}\r\n    \r\n    static String createTableViewFileName(Database database, String name){\r\n        return database.getName() + '/' + name + TABLE_VIEW_EXTENTION;\r\n    }\r\n\r\n\tstatic String createLobFileName(Database database, String name){\r\n\t\treturn database.getName() + '/' + name + LOB_EXTENTION;\r\n\t}\r\n\r\n\tstatic String createIdxFileName(Database database, String name){\r\n\t\treturn database.getName() + '/' + name + IDX_EXTENTION;\r\n\t}\r\n\r\n\tstatic boolean like(String value, String pattern){\r\n\t\tif(value == null || pattern == null) return false;\r\n\t\tif(pattern.length() == 0) return true;\r\n\r\n\t\tint mIdx = 0;//index in mask Array\r\n\t\tint sIdx = 0;//index in search Array\r\n\t\tboolean range = false;\r\n\t\tweiter:\r\n\t\twhile(pattern.length() > mIdx && value.length() > sIdx) {\r\n\t\t\tchar m = Character.toUpperCase(pattern.charAt(mIdx++));\r\n\t\t\tswitch(m) {\r\n\t\t\t\tcase '%':\r\n\t\t\t\t\trange = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '_':\r\n\t\t\t\t\tsIdx++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif(range) {//% wildcard is active\r\n\t\t\t\t\t\tfor(; sIdx < value.length(); sIdx++) {\r\n\t\t\t\t\t\t\tif(Character.toUpperCase(value.charAt(sIdx)) == m) break;//Counter mustn't increment before break\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(sIdx >= value.length()) return false;\r\n\t\t\t\t\t\tint lastmIdx = mIdx - 1;\r\n\t\t\t\t\t\tsIdx++;\r\n\t\t\t\t\t\twhile(pattern.length() > mIdx && value.length() > sIdx) {\r\n\t\t\t\t\t\t\tm = Character.toUpperCase(pattern.charAt(mIdx++));\r\n\t\t\t\t\t\t\tif(Character.toUpperCase(value.charAt(sIdx)) != m) {\r\n\t\t\t\t\t\t\t\tif(m == '%' || m == '_') {\r\n\t\t\t\t\t\t\t\t\tmIdx--;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tmIdx = lastmIdx;\r\n\t\t\t\t\t\t\t\tcontinue weiter;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsIdx++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trange = false;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tif(Character.toUpperCase(value.charAt(sIdx)) != m) return false;\r\n\t\t\t\t\t\tsIdx++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile(pattern.length() > mIdx) {\r\n            //Search mask is not too ends yet it may only '%' be contained \r\n\t\t\tif(Character.toUpperCase(pattern.charAt(mIdx++)) != '%') return false;\r\n\t\t}\r\n\t\twhile(value.length() > sIdx && !range) return false;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t\r\n\tstatic int long2int(long value){\r\n\t\tif(value > Integer.MAX_VALUE)\r\n\t\t\treturn Integer.MAX_VALUE;\r\n\t\tif(value < Integer.MIN_VALUE)\r\n\t\t\treturn Integer.MIN_VALUE;\r\n\t\treturn (int)value;\r\n\t}\r\n\t\r\n\tstatic long double2long(double value){\r\n\t\tif(value > Long.MAX_VALUE)\r\n\t\t\treturn Long.MAX_VALUE;\r\n\t\tif(value < Long.MIN_VALUE)\r\n\t\t\treturn Long.MIN_VALUE;\r\n\t\treturn (long)value;\r\n\t}\r\n\r\n\r\n\r\n    static float bytes2float( byte[] bytes ){\r\n        return Float.intBitsToFloat( bytes2int( bytes ) );\r\n    }\r\n\r\n    static double bytes2double( byte[] bytes ){\r\n        return Double.longBitsToDouble( bytes2long( bytes ) );\r\n    }\r\n\r\n    static long bytes2long( byte[] bytes ){\r\n        long result = 0;\r\n        int length = Math.min( 8, bytes.length);\r\n        for(int i=0; i<length; i++){\r\n            result = (result << 8) | (bytes[i] & 0xFF);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static int bytes2int( byte[] bytes ){\r\n        int result = 0;\r\n        int length = Math.min( 4, bytes.length);\r\n        for(int i=0; i<length; i++){\r\n            result = (result << 8) | (bytes[i] & 0xFF);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static byte[] double2bytes( double value ){\r\n        return long2bytes(Double.doubleToLongBits(value));\r\n    }\r\n\r\n    static byte[] float2bytes( float value ){\r\n        return int2bytes(Float.floatToIntBits(value));\r\n    }\r\n\r\n    static byte[] long2bytes( long value ){\r\n        byte[] result = new byte[8];\r\n        result[0] = (byte)(value >> 56);\r\n        result[1] = (byte)(value >> 48);\r\n        result[2] = (byte)(value >> 40);\r\n        result[3] = (byte)(value >> 32);\r\n        result[4] = (byte)(value >> 24);\r\n        result[5] = (byte)(value >> 16);\r\n        result[6] = (byte)(value >> 8);\r\n        result[7] = (byte)(value);\r\n        return result;\r\n    }\r\n    \r\n    static int money2int( long value ) {\r\n\t\tif (value < Integer.MIN_VALUE) return Integer.MIN_VALUE;\r\n\t\telse if (value > Integer.MAX_VALUE) return Integer.MAX_VALUE;\r\n\t\telse return (int) value;\r\n\t}\r\n\r\n\tstatic byte[] int2bytes( int value ){\r\n\t\tbyte[] result = new byte[4];\r\n\t\tresult[0] = (byte)(value >> 24);\r\n\t\tresult[1] = (byte)(value >> 16);\r\n\t\tresult[2] = (byte)(value >> 8);\r\n\t\tresult[3] = (byte)(value);\r\n\t\treturn result;\r\n\t}\r\n\r\n    static String bytes2hex( byte[] bytes ){\r\n        StringBuffer buf = new StringBuffer(bytes.length << 1);\r\n        for(int i=0; i<bytes.length; i++){\r\n            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n            buf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n        }\r\n        return buf.toString();\r\n    }\r\n\r\n    static byte[] hex2bytes( char[] hex, int offset, int length) throws SQLException{\r\n        try{\r\n            byte[] bytes = new byte[length / 2];\r\n            for(int i=0; i<bytes.length; i++){\r\n                bytes[i] = (byte)((hexDigit2int( hex[ offset++ ] ) << 4)\r\n                                | hexDigit2int( hex[ offset++ ] ));\r\n            }\r\n            return bytes;\r\n        }catch(Exception e){\r\n             throw SmallSQLException.create(Language.SEQUENCE_HEX_INVALID, String.valueOf(offset)); /*, offset*/\r\n        }\r\n    }\r\n\r\n    private static int hexDigit2int(char digit){\r\n        if(digit >= '0' && digit <= '9') return digit - '0';\r\n        digit |= 0x20;\r\n        if(digit >= 'a' && digit <= 'f') return digit - 'W'; // -'W'  ==  -'a' + 10\r\n        throw new RuntimeException();\r\n    }\r\n\r\n    static byte[] unique2bytes( String unique ) throws SQLException{\r\n        char[] chars = unique.toCharArray();\r\n        byte[] daten = new byte[16];\r\n        daten[3] = hex2byte( chars, 0 );\r\n        daten[2] = hex2byte( chars, 2 );\r\n        daten[1] = hex2byte( chars, 4 );\r\n        daten[0] = hex2byte( chars, 6 );\r\n\r\n        daten[5] = hex2byte( chars, 9 );\r\n        daten[4] = hex2byte( chars, 11 );\r\n\r\n        daten[7] = hex2byte( chars, 14 );\r\n        daten[6] = hex2byte( chars, 16 );\r\n\r\n        daten[8] = hex2byte( chars, 19 );\r\n        daten[9] = hex2byte( chars, 21 );\r\n\r\n        daten[10] = hex2byte( chars, 24 );\r\n        daten[11] = hex2byte( chars, 26 );\r\n        daten[12] = hex2byte( chars, 28 );\r\n        daten[13] = hex2byte( chars, 30 );\r\n        daten[14] = hex2byte( chars, 32 );\r\n        daten[15] = hex2byte( chars, 34 );\r\n        return daten;\r\n    }\r\n\r\n    private static byte hex2byte( char[] hex, int offset) throws SQLException{\r\n        try{\r\n                return (byte)((hexDigit2int( hex[ offset++ ] ) << 4)\r\n                                | hexDigit2int( hex[ offset++ ] ));\r\n        }catch(Exception e){\r\n             throw SmallSQLException.create(Language.SEQUENCE_HEX_INVALID_STR, new Object[] { new Integer(offset), new String(hex) });\r\n        }\r\n    }\r\n\r\n    static String bytes2unique( byte[] daten, int offset ){\r\n    \tif(daten.length-offset < 16){\r\n    \t\tbyte[] temp = new byte[16];\r\n    \t\tSystem.arraycopy(daten, offset, temp, 0, daten.length-offset);\r\n    \t\tdaten = temp;\r\n    \t}\r\n        char[] chars = new char[36];\r\n        chars[8] = chars[13] = chars[18] = chars[23] = '-';\r\n\r\n        chars[0] = digits[ (daten[offset+3] >> 4) & 0x0F ];\r\n        chars[1] = digits[ (daten[offset+3]     ) & 0x0F ];\r\n        chars[2] = digits[ (daten[offset+2] >> 4) & 0x0F ];\r\n        chars[3] = digits[ (daten[offset+2]     ) & 0x0F ];\r\n        chars[4] = digits[ (daten[offset+1] >> 4) & 0x0F ];\r\n        chars[5] = digits[ (daten[offset+1]     ) & 0x0F ];\r\n        chars[6] = digits[ (daten[offset+0] >> 4) & 0x0F ];\r\n        chars[7] = digits[ (daten[offset+0]     ) & 0x0F ];\r\n\r\n        chars[ 9] = digits[ (daten[offset+5] >> 4) & 0x0F ];\r\n        chars[10] = digits[ (daten[offset+5]     ) & 0x0F ];\r\n        chars[11] = digits[ (daten[offset+4] >> 4) & 0x0F ];\r\n        chars[12] = digits[ (daten[offset+4]     ) & 0x0F ];\r\n\r\n        chars[14] = digits[ (daten[offset+7] >> 4) & 0x0F ];\r\n        chars[15] = digits[ (daten[offset+7]     ) & 0x0F ];\r\n        chars[16] = digits[ (daten[offset+6] >> 4) & 0x0F ];\r\n        chars[17] = digits[ (daten[offset+6]     ) & 0x0F ];\r\n\r\n        chars[19] = digits[ (daten[offset+8] >> 4) & 0x0F ];\r\n        chars[20] = digits[ (daten[offset+8]     ) & 0x0F ];\r\n        chars[21] = digits[ (daten[offset+9] >> 4) & 0x0F ];\r\n        chars[22] = digits[ (daten[offset+9]     ) & 0x0F ];\r\n\r\n        chars[24] = digits[ (daten[offset+10] >> 4) & 0x0F ];\r\n        chars[25] = digits[ (daten[offset+10]     ) & 0x0F ];\r\n        chars[26] = digits[ (daten[offset+11] >> 4) & 0x0F ];\r\n        chars[27] = digits[ (daten[offset+11]     ) & 0x0F ];\r\n        chars[28] = digits[ (daten[offset+12] >> 4) & 0x0F ];\r\n        chars[29] = digits[ (daten[offset+12]     ) & 0x0F ];\r\n        chars[30] = digits[ (daten[offset+13] >> 4) & 0x0F ];\r\n        chars[31] = digits[ (daten[offset+13]     ) & 0x0F ];\r\n        chars[32] = digits[ (daten[offset+14] >> 4) & 0x0F ];\r\n        chars[33] = digits[ (daten[offset+14]     ) & 0x0F ];\r\n        chars[34] = digits[ (daten[offset+15] >> 4) & 0x0F ];\r\n        chars[35] = digits[ (daten[offset+15]     ) & 0x0F ];\r\n        return new String(chars);\r\n    }\r\n\r\n    static boolean string2boolean( String val){\r\n        try{\r\n            return Double.parseDouble( val ) != 0;\r\n        }catch(NumberFormatException e){/*ignore it if it not a number*/}\r\n        return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );\r\n    }\r\n\t\r\n\t\r\n\tstatic long doubleToMoney(double value){\r\n\t\tif(value < 0)\r\n\t\t\treturn (long)(value * 10000 - 0.5);\r\n\t\treturn (long)(value * 10000 + 0.5);\r\n\t}\r\n\r\n    static int indexOf( char value, char[] str, int offset, int length ){\r\n        value |= 0x20;\r\n        for(int end = offset+length;offset < end; offset++){\r\n            if((str[offset] | 0x20) == value) return offset;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    static int indexOf( int value, int[] list ){\r\n        int offset = 0;\r\n        for(int end = list.length; offset < end; offset++){\r\n            if((list[offset]) == value) return offset;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    static int indexOf( byte[] value, byte[] list, int offset ){\r\n        int length = value.length;\r\n        loop1:\r\n        for(int end = list.length-length; offset <= end; offset++){\r\n            for(int i=0; i<length; i++ ){\r\n                if(list[offset+i] != value[i]){\r\n                    continue loop1;\r\n                }\r\n            }\r\n            return offset;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    static int compareBytes( byte[] leftBytes, byte[] rightBytes){\r\n        int length = Math.min( leftBytes.length, rightBytes.length );\r\n        int comp = 0;\r\n        for(int i=0; i<length; i++){\r\n            if(leftBytes[i] != rightBytes[i]){\r\n                comp = leftBytes[i] < rightBytes[i] ? -1 : 1;\r\n                break;\r\n            }\r\n        }\r\n        if(comp == 0 && leftBytes.length != rightBytes.length){\r\n            comp = leftBytes.length < rightBytes.length ? -1 : 1;\r\n        }\r\n        return comp;\r\n    }\r\n\t\r\n    \r\n    /**\r\n     * \r\n     * @param colNames\r\n     * @param data\r\n     * @return\r\n     * @throws SQLException\r\n     */\r\n    static CommandSelect createMemoryCommandSelect( SSConnection con, String[] colNames, Object[][] data) throws SQLException{\r\n\t\tMemoryResult source = new MemoryResult(data, colNames.length);\r\n\t\tCommandSelect cmd = new CommandSelect(con.log);\r\n\t\tfor(int i=0; i<colNames.length; i++){\r\n\t\t\tExpressionName expr = new ExpressionName(colNames[i]);\r\n\t\t\tcmd.addColumnExpression( expr );\r\n\t\t\texpr.setFrom( source, i, source.getColumn(i));\r\n\t\t}\r\n\t\tcmd.setSource(source);\r\n\t\treturn cmd;\r\n    }\r\n\t\r\n\r\n\t/**\r\n     *  recycle Integer objects, this is faster as to garbage the objects\r\n\t */\r\n\tstatic final Integer getInteger(int value){\r\n\t\tif(value >= -4 && value < 256){\r\n\t\t\treturn integerCache[ value+4 ];\t\t\r\n\t\t}else\r\n\t\t\treturn new Integer(value);\r\n\t}\r\n\t\r\n\t/**\r\n     * recycle Integer objects, this is faster as to garbage the objects\r\n\t */\r\n\tstatic final Short getShort(int value){\r\n\t\tif(value >= -4 && value < 256){\r\n\t\t\treturn shortCache[ value+4 ];\t\t\r\n\t\t}else\r\n\t\t\treturn new Short((short)value);\r\n\t}\r\n    \r\n    \r\n    /**\r\n     * Open a RandomAccessFile and lock it that no other thread or VM can open it..\r\n     * \r\n     * @param file\r\n     *            The file that should be open.\r\n     * @return a FileChannel\r\n     * @throws FileNotFoundException\r\n     *             If the file can not open\r\n     * @param readonly open database in read only mode\r\n     * @throws SQLException\r\n     *             If the file can't lock.\r\n     */\r\n    static final FileChannel openRaFile( File file, boolean readonly ) throws FileNotFoundException, SQLException{\r\n        RandomAccessFile raFile = new RandomAccessFile(file, readonly ? \"r\" : \"rw\" );\r\n        FileChannel channel = raFile.getChannel();\r\n        if( !readonly ){\r\n            try{\r\n                FileLock lock = channel.tryLock();\r\n                if(lock == null){\r\n                    throw SmallSQLException.create(Language.CANT_LOCK_FILE, file);\r\n                }\r\n            }catch(SQLException sqlex){\r\n                throw sqlex;\r\n            }catch(Throwable th){\r\n                throw SmallSQLException.createFromException(Language.CANT_LOCK_FILE, file, th);\r\n            }\r\n        }\r\n        return channel;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get all the ExpressionName objects that are part of the tree.\r\n     * If it only a constant expression then a empty list is return.\r\n     * @param tree the expression to scan\r\n     * @return the list of ExpressionName instances\r\n     */\r\n    static final Expressions getExpressionNameFromTree(Expression tree){\r\n        Expressions list = new Expressions();\r\n        getExpressionNameFromTree( list, tree );\r\n        return list;\r\n    }\r\n    \r\n    /**\r\n     * Scan the tree recursively.\r\n     */\r\n    private static final void getExpressionNameFromTree(Expressions list, Expression tree){\r\n        if(tree.getType() == Expression.NAME ){\r\n            list.add(tree);\r\n        }\r\n        Expression[] params = tree.getParams();\r\n        if(params != null){\r\n            for(int i=0; i<params.length; i++){\r\n                getExpressionNameFromTree( list, tree );\r\n            }\r\n        }\r\n    }\r\n\r\n    final static char[] digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};\r\n}"},{"path":"/src/smallsql/database/IndexScrollStatus.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * IndexScrollStatus.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 18.04.2005\r\n */\r\npackage smallsql.database;\r\n\r\n/**\r\n * This class save the status of the scrolling through a Index. This is like a Cursor.\r\n */\r\nclass IndexScrollStatus {\r\n\tprivate final IndexNode rootPage;\r\n\tprivate final Expressions expressions; // is used for the description of ASC and DESC\r\n\r\n\tprivate final java.util.Stack nodeStack = new java.util.Stack(); //TODO performance Stack durch nicht synchronisierte Klasse ersetzten\r\n\t/** Used for getRowOffset() as context cash between 2 calls */\r\n\tprivate LongTreeList longList;\r\n\tprivate LongTreeListEnum longListEnum = new LongTreeListEnum();\r\n\r\n\r\n\tIndexScrollStatus(IndexNode rootPage, Expressions expressions){\t\r\n\t\tthis.rootPage\t= rootPage;\r\n\t\tthis.expressions= expressions;\r\n\t\treset();\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Reset this index to start a new scan of it with nextRowoffset()\r\n\t */\r\n\tfinal void reset(){\r\n\t\tnodeStack.clear();\r\n\t\tboolean asc = (expressions.get(0).getAlias() != SQLTokenizer.DESC_STR);\r\n\t\tnodeStack.push( new IndexNodeScrollStatus(rootPage, asc, true, 0) );\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * Return the next rowOffset of this index. You need to call reset() before the first use. \r\n\t * @param next if true the next rowOffset else the previous rowOffset\r\n\t */\r\n\tfinal long getRowOffset( boolean scroll){\r\n\t\tif(longList != null){\r\n\t\t\tlong rowOffset = scroll ? \r\n\t\t\t\t\t\t\t\tlongList.getNext(longListEnum) : \r\n\t\t\t\t\t\t\t\tlongList.getPrevious(longListEnum);\r\n\t\t\tif(rowOffset < 0){\r\n\t\t\t\t// No more entries on this node\r\n\t\t\t\tlongList = null;\r\n\t\t\t}else{\r\n\t\t\t\treturn rowOffset;\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile(true){\r\n\t\t\tIndexNodeScrollStatus status = (IndexNodeScrollStatus)nodeStack.peek();\r\n\t\t\tint level = status.level;\r\n\t\t\tif(!status.asc ^ scroll){\r\n\t\t\t\t//ASC order\r\n\t\t\t\tint idx = ++status.idx;\r\n\t\t\t\tif(idx == -1){\r\n\t\t\t\t\tif(status.nodeValue != null){\r\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else\r\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//There is no RowOffset in this node\r\n\t\t\t\t\tidx = ++status.idx;\r\n\t\t\t\t}\r\n\t\t\t\tif(idx >= status.nodes.length){\r\n\t\t\t\t\t//No more nodes in this level\r\n\t\t\t\t\tif(nodeStack.size() > 1){\r\n\t\t\t\t\t\tnodeStack.pop();\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t//No more RowOffsets in this Index\r\n                        status.idx = status.nodes.length; //to prevent problems with scroll back after multiple calls after the end.\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tIndexNode node = status.nodes[idx];\r\n\t\t\t\tnodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );\r\n\t\t\t}else{\r\n\t\t\t\t//DESC order\r\n\t\t\t\tint idx = --status.idx;\r\n\t\t\t\tif(idx == -1){\r\n\t\t\t\t\tif(status.nodeValue != null){\r\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else\r\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//There is no RowOffset in this node\r\n\t\t\t\t}\r\n\t\t\t\tif(idx < 0){\r\n\t\t\t\t\t//No more nodes in this level\r\n\t\t\t\t\tif(nodeStack.size() > 1){\r\n\t\t\t\t\t\tnodeStack.pop();\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t//No more RowOffsets in this Index\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tIndexNode node = status.nodes[idx];\r\n\t\t\t\tnodeStack.push( new IndexNodeScrollStatus(node, status.asc, scroll, level) );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\t\r\n\r\n\t/**\r\n\t * Move the index after the last position. The next call nextRowOffset() returns a -1\r\n\t *\r\n\t */\r\n\tfinal void afterLast(){\r\n\t\tlongList = null;\r\n\t\tnodeStack.setSize(1);\r\n\t\t((IndexNodeScrollStatus)nodeStack.peek()).afterLast();\r\n\t}\r\n\t\r\n    \r\n    /**\r\n     * Check if the index is after the last position.\r\n     */\r\n    /*final boolean isAfterLast(){\r\n        if(longList != null || nodeStack.size() != 1){\r\n            return false;\r\n        }\r\n        return ((IndexNodeScrollStatus)nodeStack.peek()).isAfterLast();\r\n    }*/\r\n    \r\n\t\r\n\tprivate final long getReturnValue( Object value){\r\n\t\tif(rootPage.getUnique()){\r\n\t\t\treturn ((Long)value).longValue();\r\n\t\t}else{\r\n\t\t\tlongList = (LongTreeList)value;\r\n\t\t\tlongListEnum.reset();\r\n\t\t\treturn longList.getNext(longListEnum); // there be should one value as minimum\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t\t\r\n\r\n}\r\n"},{"path":"/src/smallsql/database/ExpressionFunctionMinute.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionMinute.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 16.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionMinute extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.MINUTE;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.minute;\r\n\t}\r\n\r\n}\r\n"},{"path":"/src/smallsql/database/ExpressionFunctionMonth.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionMonth.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 17.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionMonth extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.MONTH;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.month+1;\r\n\t}\r\n\r\n}\r\n"},{"path":"/src/smallsql/database/SSStatement.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * SSStatement.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport smallsql.database.language.Language;\r\n\r\nclass SSStatement implements Statement{\r\n\r\n    final SSConnection con;\r\n\r\n    Command cmd;\r\n\r\n    private boolean isClosed;\r\n\r\n    int rsType;\r\n\r\n    int rsConcurrency;\r\n\r\n    private int fetchDirection;\r\n\r\n    private int fetchSize;\r\n\r\n    private int queryTimeout;\r\n\r\n    private int maxRows;\r\n\r\n    private int maxFieldSize;\r\n\r\n    private ArrayList batches;\r\n\r\n    private boolean needGeneratedKeys;\r\n\r\n    private ResultSet generatedKeys;\r\n\r\n    private int[] generatedKeyIndexes;\r\n\r\n    private String[] generatedKeyNames;\r\n\r\n\r\n    SSStatement(SSConnection con) throws SQLException{\r\n        this(con, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\r\n    }\r\n\r\n\r\n    SSStatement(SSConnection con, int rsType, int rsConcurrency) throws SQLException{\r\n        this.con = con;\r\n        this.rsType = rsType;\r\n        this.rsConcurrency = rsConcurrency;\r\n        con.testClosedConnection();\r\n    }\r\n\r\n\r\n    final public ResultSet executeQuery(String sql) throws SQLException{\r\n        executeImpl(sql);\r\n        return cmd.getQueryResult();\r\n    }\r\n\r\n\r\n    final public int executeUpdate(String sql) throws SQLException{\r\n        executeImpl(sql);\r\n        return cmd.getUpdateCount();\r\n    }\r\n\r\n\r\n    final public boolean execute(String sql) throws SQLException{\r\n        executeImpl(sql);\r\n        return cmd.getResultSet() != null;\r\n    }\r\n\r\n\r\n    final private void executeImpl(String sql) throws SQLException{\r\n        checkStatement();\r\n        generatedKeys = null;\r\n        try{\r\n            con.log.println(sql);\r\n            SQLParser parser = new SQLParser();\r\n            cmd = parser.parse(con, sql);\r\n            if(maxRows != 0 && (cmd.getMaxRows() == -1 || cmd.getMaxRows() > maxRows))\r\n                cmd.setMaxRows(maxRows);\r\n            cmd.execute(con, this);\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException(e);\r\n        }\r\n        needGeneratedKeys = false;\r\n        generatedKeyIndexes = null;\r\n        generatedKeyNames = null;\r\n    }\r\n\r\n\r\n    final public void close(){\r\n        con.log.println(\"Statement.close\");\r\n        isClosed = true;\r\n        cmd = null;\r\n        // TODO make Resources free;\r\n    }\r\n\r\n\r\n    final public int getMaxFieldSize(){\r\n        return maxFieldSize;\r\n    }\r\n\r\n\r\n    final public void setMaxFieldSize(int max){\r\n        maxFieldSize = max;\r\n    }\r\n\r\n\r\n    final public int getMaxRows(){\r\n        return maxRows;\r\n    }\r\n\r\n\r\n    final public void setMaxRows(int max) throws SQLException{\r\n        if(max < 0)\r\n            throw SmallSQLException.create(Language.ROWS_WRONG_MAX, String.valueOf(max));\r\n        maxRows = max;\r\n    }\r\n\r\n\r\n    final public void setEscapeProcessing(boolean enable) throws SQLException{\r\n        checkStatement();\r\n        // TODO enable/disable escape processing\r\n    }\r\n\r\n\r\n    final public int getQueryTimeout() throws SQLException{\r\n        checkStatement();\r\n        return queryTimeout;\r\n    }\r\n\r\n\r\n    final public void setQueryTimeout(int seconds) throws SQLException{\r\n        checkStatement();\r\n        queryTimeout = seconds;\r\n    }\r\n\r\n\r\n    final public void cancel() throws SQLException{\r\n        checkStatement();\r\n        // TODO Statement.cancel()\r\n    }\r\n\r\n\r\n    final public SQLWarning getWarnings(){\r\n        return null;\r\n    }\r\n\r\n\r\n    final public void clearWarnings(){\r\n        // TODO support for warnings\r\n    }\r\n\r\n\r\n    final public void setCursorName(String name) throws SQLException{\r\n        /** @todo: Implement this java.sql.Statement.setCursorName method */\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"setCursorName\");\r\n    }\r\n\r\n\r\n    final public ResultSet getResultSet() throws SQLException{\r\n        checkStatement();\r\n        return cmd.getResultSet();\r\n    }\r\n\r\n\r\n    final public int getUpdateCount() throws SQLException{\r\n        checkStatement();\r\n        return cmd.getUpdateCount();\r\n    }\r\n\r\n\r\n    final public boolean getMoreResults() throws SQLException{\r\n        checkStatement();\r\n        return getMoreResults(CLOSE_CURRENT_RESULT);\r\n    }\r\n\r\n\r\n    final public void setFetchDirection(int direction) throws SQLException{\r\n        checkStatement();\r\n        fetchDirection = direction;\r\n    }\r\n\r\n\r\n    final public int getFetchDirection() throws SQLException{\r\n        checkStatement();\r\n        return fetchDirection;\r\n    }\r\n\r\n\r\n    final public void setFetchSize(int rows) throws SQLException{\r\n        checkStatement();\r\n        fetchSize = rows;\r\n    }\r\n\r\n\r\n    final public int getFetchSize() throws SQLException{\r\n        checkStatement();\r\n        return fetchSize;\r\n    }\r\n\r\n\r\n    final public int getResultSetConcurrency() throws SQLException{\r\n        checkStatement();\r\n        return rsConcurrency;\r\n    }\r\n\r\n\r\n    final public int getResultSetType() throws SQLException{\r\n        checkStatement();\r\n        return rsType;\r\n    }\r\n\r\n\r\n    final public void addBatch(String sql){\r\n        if(batches == null)\r\n            batches = new ArrayList();\r\n        batches.add(sql);\r\n    }\r\n\r\n\r\n    public void clearBatch() throws SQLException{\r\n        checkStatement();\r\n        if(batches == null)\r\n            return;\r\n        batches.clear();\r\n    }\r\n\r\n\r\n    public int[] executeBatch() throws BatchUpdateException{\r\n        if(batches == null)\r\n            return new int[0];\r\n        final int[] result = new int[batches.size()];\r\n        BatchUpdateException failed = null;\r\n        for(int i = 0; i < result.length; i++){\r\n            try{\r\n                result[i] = executeUpdate((String)batches.get(i));\r\n            }catch(SQLException ex){\r\n                result[i] = EXECUTE_FAILED;\r\n                if(failed == null){\r\n                    failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n                    failed.initCause(ex);\r\n                }\r\n                failed.setNextException(ex);\r\n            }\r\n        }\r\n        batches.clear();\r\n        if(failed != null)\r\n            throw failed;\r\n        return result;\r\n    }\r\n\r\n\r\n    final public Connection getConnection(){\r\n        return con;\r\n    }\r\n\r\n\r\n    final public boolean getMoreResults(int current) throws SQLException{\r\n        switch(current){\r\n        case CLOSE_ALL_RESULTS:\r\n        // currently there exists only one ResultSet\r\n        case CLOSE_CURRENT_RESULT:\r\n            ResultSet rs = cmd.getResultSet();\r\n            cmd.rs = null;\r\n            if(rs != null)\r\n                rs.close();\r\n            break;\r\n        case KEEP_CURRENT_RESULT:\r\n            break;\r\n        default:\r\n            throw SmallSQLException.create(Language.FLAGVALUE_INVALID, String.valueOf(current));\r\n        }\r\n        return cmd.getMoreResults();\r\n    }\r\n\r\n\r\n    final void setNeedGeneratedKeys(int autoGeneratedKeys) throws SQLException{\r\n        switch(autoGeneratedKeys){\r\n        case NO_GENERATED_KEYS:\r\n            break;\r\n        case RETURN_GENERATED_KEYS:\r\n            needGeneratedKeys = true;\r\n            break;\r\n        default:\r\n            throw SmallSQLException.create(Language.ARGUMENT_INVALID, String.valueOf(autoGeneratedKeys));\r\n        }\r\n    }\r\n\r\n\r\n    final void setNeedGeneratedKeys(int[] columnIndexes) throws SQLException{\r\n        needGeneratedKeys = columnIndexes != null;\r\n        generatedKeyIndexes = columnIndexes;\r\n    }\r\n\r\n\r\n    final void setNeedGeneratedKeys(String[] columnNames) throws SQLException{\r\n        needGeneratedKeys = columnNames != null;\r\n        generatedKeyNames = columnNames;\r\n    }\r\n\r\n\r\n    final boolean needGeneratedKeys(){\r\n        return needGeneratedKeys;\r\n    }\r\n\r\n\r\n    final int[] getGeneratedKeyIndexes(){\r\n        return generatedKeyIndexes;\r\n    }\r\n\r\n\r\n    final String[] getGeneratedKeyNames(){\r\n        return generatedKeyNames;\r\n    }\r\n\r\n\r\n    /**\r\n     * Set on execution the result with the generated keys.\r\n     * \r\n     * @param rs\r\n     */\r\n    final void setGeneratedKeys(ResultSet rs){\r\n        generatedKeys = rs;\r\n    }\r\n\r\n\r\n    final public ResultSet getGeneratedKeys() throws SQLException{\r\n        if(generatedKeys == null)\r\n            throw SmallSQLException.create(Language.GENER_KEYS_UNREQUIRED);\r\n        return generatedKeys;\r\n    }\r\n\r\n\r\n    final public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException{\r\n        setNeedGeneratedKeys(autoGeneratedKeys);\r\n        return executeUpdate(sql);\r\n    }\r\n\r\n\r\n    final public int executeUpdate(String sql, int[] columnIndexes) throws SQLException{\r\n        setNeedGeneratedKeys(columnIndexes);\r\n        return executeUpdate(sql);\r\n    }\r\n\r\n\r\n    final public int executeUpdate(String sql, String[] columnNames) throws SQLException{\r\n        setNeedGeneratedKeys(columnNames);\r\n        return executeUpdate(sql);\r\n    }\r\n\r\n\r\n    final public boolean execute(String sql, int autoGeneratedKeys) throws SQLException{\r\n        setNeedGeneratedKeys(autoGeneratedKeys);\r\n        return execute(sql);\r\n    }\r\n\r\n\r\n    final public boolean execute(String sql, int[] columnIndexes) throws SQLException{\r\n        setNeedGeneratedKeys(columnIndexes);\r\n        return execute(sql);\r\n    }\r\n\r\n\r\n    final public boolean execute(String sql, String[] columnNames) throws SQLException{\r\n        setNeedGeneratedKeys(columnNames);\r\n        return execute(sql);\r\n    }\r\n\r\n\r\n    final public int getResultSetHoldability() throws SQLException{\r\n        /** @todo: Implement this java.sql.Statement method */\r\n        throw new java.lang.UnsupportedOperationException(\"Method getResultSetHoldability() not yet implemented.\");\r\n    }\r\n\r\n\r\n    void checkStatement() throws SQLException{\r\n        if(isClosed){\r\n            throw SmallSQLException.create(Language.STMT_IS_CLOSED);\r\n        }\r\n    }\r\n}"},{"path":"/src/smallsql/database/language/Language.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2011, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * Language.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * Author: Saverio Miroddi \r\n */\r\npackage smallsql.database.language;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\n/**\r\n * Base localization class.<br>\r\n * Contains English default messages and ResourceBundle interface\r\n * implementation.\r\n */\r\npublic class Language {\r\n\t//////////////////////////////////////////////////////////////////////\r\n\t// NAMED CONSTANTS \r\n\t//////////////////////////////////////////////////////////////////////\r\n\t\r\n\t/* CUSTOM_MESSAGE doesn't need to be copied to subclasses. Also, it's\r\n\t * not checked by the difference() method. */\r\n\tpublic static final String CUSTOM_MESSAGE\t\t\t= \"SS-0000\";\r\n\t\r\n\tpublic static final String UNSUPPORTED_OPERATION \t= \"SS-0001\";\r\n    public static final String CANT_LOCK_FILE           = \"SS-0003\";\r\n\r\n\tpublic static final String DB_EXISTENT \t\t\t\t= \"SS-0030\";\r\n\tpublic static final String DB_NONEXISTENT \t\t\t= \"SS-0031\";\r\n\tpublic static final String DB_NOT_DIRECTORY \t\t= \"SS-0032\";\r\n\tpublic static final String DB_NOTCONNECTED \t\t\t= \"SS-0033\";\r\n\tpublic static final String DB_READONLY              = \"SS-0034\";\r\n\r\n\tpublic static final String CONNECTION_CLOSED \t\t= \"SS-0070\";\r\n\r\n\tpublic static final String VIEW_INSERT \t\t\t\t= \"SS-0100\";\r\n\tpublic static final String VIEWDROP_NOT_VIEW \t\t= \"SS-0101\";\r\n\tpublic static final String VIEW_CANTDROP \t\t\t= \"SS-0102\";\r\n\r\n\tpublic static final String RSET_NOT_PRODUCED \t\t= \"SS-0130\";\r\n\tpublic static final String RSET_READONLY \t\t\t= \"SS-0131\";\r\n\tpublic static final String RSET_FWDONLY\t\t\t\t= \"SS-0132\";\r\n\tpublic static final String RSET_CLOSED\t\t\t\t= \"SS-0133\";\r\n\tpublic static final String RSET_NOT_INSERT_ROW\t\t= \"SS-0134\";\r\n\tpublic static final String RSET_ON_INSERT_ROW\t\t= \"SS-0135\";\r\n\tpublic static final String ROWSOURCE_READONLY\t\t= \"SS-0136\";\r\n    \r\n    public static final String STMT_IS_CLOSED           = \"SS-0140\";\r\n\r\n\tpublic static final String SUBQUERY_COL_COUNT\t\t= \"SS-0160\";\r\n\tpublic static final String JOIN_DELETE\t\t\t\t= \"SS-0161\";\r\n\tpublic static final String JOIN_INSERT\t\t\t\t= \"SS-0162\";\r\n\tpublic static final String DELETE_WO_FROM\t\t\t= \"SS-0163\";\r\n\tpublic static final String INSERT_WO_FROM\t\t\t= \"SS-0164\";\r\n\r\n\tpublic static final String TABLE_CANT_RENAME\t\t= \"SS-0190\";\r\n\tpublic static final String TABLE_CANT_DROP\t\t\t= \"SS-0191\";\r\n\tpublic static final String TABLE_CANT_DROP_LOCKED\t= \"SS-0192\";\r\n\tpublic static final String TABLE_CORRUPT_PAGE\t\t= \"SS-0193\";\r\n\tpublic static final String TABLE_MODIFIED\t\t\t= \"SS-0194\";\r\n\tpublic static final String TABLE_DEADLOCK\t\t\t= \"SS-0195\";\r\n\tpublic static final String TABLE_OR_VIEW_MISSING\t= \"SS-0196\";\r\n\tpublic static final String TABLE_FILE_INVALID\t\t= \"SS-0197\";\r\n\tpublic static final String TABLE_OR_VIEW_FILE_INVALID = \"SS-0198\";\r\n\tpublic static final String TABLE_EXISTENT\t\t\t= \"SS-0199\";\r\n\r\n\tpublic static final String FK_NOT_TABLE\t\t\t\t= \"SS-0220\";\r\n\tpublic static final String PK_ONLYONE\t\t\t\t= \"SS-0221\";\r\n\tpublic static final String KEY_DUPLICATE\t\t\t= \"SS-0222\";\r\n\r\n\tpublic static final String MONTH_TOOLARGE \t\t\t= \"SS-0251\";\r\n\tpublic static final String DAYS_TOOLARGE \t\t\t= \"SS-0252\";\r\n\tpublic static final String HOURS_TOOLARGE \t\t\t= \"SS-0253\";\r\n\tpublic static final String MINUTES_TOOLARGE \t\t= \"SS-0254\";\r\n\tpublic static final String SECS_TOOLARGE \t\t\t= \"SS-0255\";\r\n\tpublic static final String MILLIS_TOOLARGE \t\t\t= \"SS-0256\";\r\n\tpublic static final String DATETIME_INVALID \t\t= \"SS-0257\";\r\n\r\n\tpublic static final String UNSUPPORTED_CONVERSION_OPER = \"SS-0280\";\r\n\tpublic static final String UNSUPPORTED_DATATYPE_OPER = \"SS-0281\";\r\n\tpublic static final String UNSUPPORTED_DATATYPE_FUNC = \"SS-0282\";\r\n\tpublic static final String UNSUPPORTED_CONVERSION_FUNC = \"SS-0283\";\r\n\tpublic static final String UNSUPPORTED_TYPE_CONV \t= \"SS-0284\";\r\n\tpublic static final String UNSUPPORTED_TYPE_SUM \t= \"SS-0285\";\r\n\tpublic static final String UNSUPPORTED_TYPE_MAX \t= \"SS-0286\";\r\n\tpublic static final String UNSUPPORTED_CONVERSION \t= \"SS-0287\";\r\n\tpublic static final String INSERT_INVALID_LEN \t\t= \"SS-0288\";\r\n\tpublic static final String SUBSTR_INVALID_LEN \t\t= \"SS-0289\";\r\n\r\n\tpublic static final String VALUE_STR_TOOLARGE \t\t= \"SS-0310\";\r\n\tpublic static final String VALUE_BIN_TOOLARGE \t\t= \"SS-0311\";\r\n\tpublic static final String VALUE_NULL_INVALID \t\t= \"SS-0312\";\r\n\tpublic static final String VALUE_CANT_CONVERT \t\t= \"SS-0313\";\r\n\r\n\tpublic static final String BYTEARR_INVALID_SIZE \t= \"SS-0340\";\r\n\tpublic static final String LOB_DELETED \t\t\t\t= \"SS-0341\";\r\n\r\n\tpublic static final String PARAM_CLASS_UNKNOWN \t\t= \"SS-0370\";\r\n\tpublic static final String PARAM_EMPTY \t\t\t\t= \"SS-0371\";\r\n\tpublic static final String PARAM_IDX_OUT_RANGE \t\t= \"SS-0372\";\r\n\r\n\tpublic static final String COL_DUPLICATE \t\t\t= \"SS-0400\";\r\n\tpublic static final String COL_MISSING \t\t\t\t= \"SS-0401\";\r\n\tpublic static final String COL_VAL_UNMATCH \t\t\t= \"SS-0402\";\r\n\tpublic static final String COL_INVALID_SIZE \t\t= \"SS-0403\";\r\n\tpublic static final String COL_WRONG_PREFIX \t\t= \"SS-0404\";\r\n\tpublic static final String COL_READONLY \t\t\t= \"SS-0405\";\r\n\tpublic static final String COL_INVALID_NAME \t\t= \"SS-0406\";\r\n\tpublic static final String COL_IDX_OUT_RANGE \t\t= \"SS-0407\";\r\n\tpublic static final String COL_AMBIGUOUS \t\t\t= \"SS-0408\";\r\n\t\r\n\tpublic static final String GROUP_AGGR_INVALID \t\t= \"SS-0430\";\r\n\tpublic static final String GROUP_AGGR_NOTPART \t\t= \"SS-0431\";\r\n\tpublic static final String ORDERBY_INTERNAL \t\t= \"SS-0432\";\r\n\tpublic static final String UNION_DIFFERENT_COLS \t= \"SS-0433\";\r\n\r\n\tpublic static final String INDEX_EXISTS \t\t\t= \"SS-0460\";\r\n\tpublic static final String INDEX_MISSING \t\t\t= \"SS-0461\";\r\n\tpublic static final String INDEX_FILE_INVALID \t\t= \"SS-0462\";\r\n\tpublic static final String INDEX_CORRUPT \t\t\t= \"SS-0463\";\r\n\tpublic static final String INDEX_TOOMANY_EQUALS \t= \"SS-0464\";\r\n\r\n\tpublic static final String FILE_TOONEW \t\t\t\t= \"SS-0490\";\r\n\tpublic static final String FILE_TOOOLD \t\t\t\t= \"SS-0491\";\r\n    public static final String FILE_CANT_DELETE         = \"SS-0492\";\r\n\r\n\tpublic static final String ROW_0_ABSOLUTE \t\t\t= \"SS-0520\";\r\n\tpublic static final String ROW_NOCURRENT \t\t\t= \"SS-0521\";\r\n\tpublic static final String ROWS_WRONG_MAX \t\t\t= \"SS-0522\";\r\n\tpublic static final String ROW_LOCKED \t\t\t\t= \"SS-0523\";\r\n\tpublic static final String ROW_DELETED \t\t\t\t= \"SS-0524\";\r\n\r\n\tpublic static final String SAVEPT_INVALID_TRANS \t= \"SS-0550\";\r\n\tpublic static final String SAVEPT_INVALID_DRIVER \t= \"SS-0551\";\r\n\r\n\tpublic static final String ALIAS_UNSUPPORTED \t\t= \"SS-0580\";\r\n\tpublic static final String ISOLATION_UNKNOWN \t\t= \"SS-0581\";\r\n\tpublic static final String FLAGVALUE_INVALID \t\t= \"SS-0582\";\r\n\tpublic static final String ARGUMENT_INVALID \t\t= \"SS-0583\";\r\n\tpublic static final String GENER_KEYS_UNREQUIRED \t= \"SS-0584\";\r\n\tpublic static final String SEQUENCE_HEX_INVALID \t= \"SS-0585\";\r\n\tpublic static final String SEQUENCE_HEX_INVALID_STR = \"SS-0586\";\r\n\t\r\n\tpublic static final String SYNTAX_BASE_OFS\t\t\t= \"SS-0610\";\r\n\tpublic static final String SYNTAX_BASE_END\t\t\t= \"SS-0611\";\r\n\tpublic static final String STXADD_ADDITIONAL_TOK\t= \"SS-0612\";\r\n\tpublic static final String STXADD_IDENT_EXPECT\t\t= \"SS-0613\";\r\n\tpublic static final String STXADD_IDENT_EMPTY\t\t= \"SS-0614\";\r\n\tpublic static final String STXADD_IDENT_WRONG\t\t= \"SS-0615\";\r\n\tpublic static final String STXADD_OPER_MINUS\t\t= \"SS-0616\";\t\r\n\tpublic static final String STXADD_FUNC_UNKNOWN\t\t= \"SS-0617\";\t\r\n\tpublic static final String STXADD_PARAM_INVALID_COUNT\t= \"SS-0618\";\r\n\tpublic static final String STXADD_JOIN_INVALID\t\t= \"SS-0619\";\r\n\tpublic static final String STXADD_FROM_PAR_CLOSE\t= \"SS-0620\";\r\n\tpublic static final String STXADD_KEYS_REQUIRED\t\t= \"SS-0621\";\r\n\tpublic static final String STXADD_NOT_NUMBER\t\t= \"SS-0622\";\r\n\tpublic static final String STXADD_COMMENT_OPEN\t\t= \"SS-0623\";\r\n\r\n\t//////////////////////////////////////////////////////////////////////\r\n\t// VARIABLE, CONSTRUCTOR AND NON-RESOURCEBUNDLE METHODS. \r\n\t//////////////////////////////////////////////////////////////////////\r\n\t\r\n\tprivate Map messages;\r\n\tprivate Map sqlStates;\r\n\t\r\n\t/**\r\n\t * Return a Language instance.<br>\r\n\t * Defaults to ENGLISH language.<br>\r\n\t * Warning: there is difference between locale strings like 'en_EN' and\r\n\t * 'en_UK': it's advised to pass only the first two characters.\r\n\t * \r\n\t * @param localeStr\r\n\t *            Locale.toString() value for Language. Nullable, for ENGLISH.\r\n\t * @return Language instance.\r\n\t * @throws InstantiationException\r\n\t *             Error during instantiation, i.e. duplicate entry found.\r\n\t */\r\n\tpublic static Language getLanguage(String localeStr) {\r\n\t\ttry {\r\n\t\t\treturn getFromLocaleTree(localeStr);\r\n\t\t}\r\n\t\tcatch (IllegalArgumentException e) {\r\n\t\t\treturn getDefaultLanguage();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the language for the default locale; if not found, returns the\r\n\t * ENGLISH language.\r\n\t */\r\n\tpublic static Language getDefaultLanguage() {\t\t\r\n\t\tString dfltLocaleStr = Locale.getDefault().toString();\r\n\r\n\t\ttry {\r\n\t\t\treturn getFromLocaleTree(dfltLocaleStr);\r\n\t\t}\r\n\t\tcatch (IllegalArgumentException e) {\r\n\t\t\treturn new Language(); // default to English\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Searches a language in the Locale tree, for example:<br>\r\n\t * first 'en_UK', then 'en'\r\n\t * \r\n\t * @param localeStr\r\n\t *            locale string.\r\n\t * @return Language instance, if found.\r\n\t * @throws IllegalArgumentException\r\n\t *             Language not found in the tree.\r\n\t */\r\n\tprivate static Language getFromLocaleTree(String localeStr) \r\n\tthrows IllegalArgumentException {\r\n\t\tString part = localeStr;\r\n\t\twhile (true) {\r\n\t\t\tString langClassName = Language.class.getName() + '_' + part;\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\treturn (Language) Class.forName(langClassName).newInstance();\r\n\t\t\t}\r\n\t\t\tcatch (IllegalAccessException e) {\r\n\t\t\t\t assert(false): \"Internal error: must never happen.\";\r\n\t\t\t}\r\n\t\t\tcatch (ClassNotFoundException e) { \r\n\t\t\t\t// do nothing\r\n\t\t\t}\r\n\t\t\tcatch (InstantiationException e) { \r\n\t\t\t\tassert(false): \"Error during Language instantiation: \" + e.getMessage();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint lastUndsc = part.lastIndexOf(\"_\");\r\n\t\t\t\r\n\t\t\tif (lastUndsc > -1) part = part.substring(0, lastUndsc);\r\n\t\t\telse break;\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tthrow new IllegalArgumentException(\"Locale not found in the tree: \" + localeStr);\r\n\t}\r\n\r\n\t/**\r\n\t * Base language constructor; fills the internal map with the English\r\n\t * messages\r\n\t */\r\n\tprotected Language() {\r\n\t\tmessages = new HashMap((int)(MESSAGES.length / 0.7)); //avoid rehashing ;-)\r\n\t\tsqlStates = new HashMap((int)(MESSAGES.length / 0.7)); //avoid rehashing ;-)\r\n\t\taddMessages(MESSAGES);\r\n\t\tsetSqlStates();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add entries to message map.<br>\r\n\t * If duplicates entries are found the adding entries, an exception is\r\n\t * thrown.\r\n\t * \r\n\t * @param entries\r\n\t *            adding language entries.\r\n\t * @throws IllegalArgumentException\r\n\t *             if duplicate entry is found.\r\n\t */\r\n\tprotected final void addMessages(String[][] entries) \r\n\tthrows IllegalArgumentException {\r\n\t\tSet inserted = new HashSet(); // for duplicates checking\r\n\t\t\r\n\t\tfor (int i = 0; i < entries.length; i++) {\r\n\t\t\tString key = entries[i][0];\r\n\t\t\t\r\n\t\t\tif (! inserted.add(key)) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Duplicate key: \" + key);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tString value = entries[i][1];\r\n\t\t\t\tmessages.put(key, value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Add entries to sql states map.<br>\r\n\t * If duplicates entries are found the adding entries, an exception is\r\n\t * thrown.\r\n\t * \r\n\t * @param entries\r\n\t *            adding language entries.\r\n\t * @throws IllegalArgumentException\r\n\t *             if duplicate entry is found.\r\n\t */\r\n\tprivate final void setSqlStates() {\r\n\t\tSet inserted = new HashSet(); // for duplicates checking\r\n\t\t\r\n\t\tfor (int i = 0; i < SQL_STATES.length; i++) {\r\n\t\t\tString key = SQL_STATES[i][0];\r\n\t\t\t\r\n\t\t\tif (! inserted.add(key)) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Duplicate key: \" + key);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tString value = SQL_STATES[i][1];\r\n\t\t\t\tsqlStates.put(key, value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic String getMessage(String key) {\r\n\t\tString message = (String) messages.get(key);\r\n\t\tassert(message != null): \"Message code not found: \" + key;\r\n\t\treturn message;\r\n\t}\r\n\r\n\tpublic String getSqlState(String key) {\r\n\t\tString sqlState = (String) sqlStates.get(key);\r\n\t\tassert(sqlState != null): \"SQL State code not found: \" + key;\r\n\t\treturn sqlState;\r\n\t}\r\n\r\n\tpublic String[][] getEntries() {\r\n\t\treturn MESSAGES;\r\n\t}\r\n\t\r\n\t//////////////////////////////////////////////////////////////////////\r\n\t// MESSAGES\r\n\t//////////////////////////////////////////////////////////////////////\r\n\t\r\n\tprivate final String[][] MESSAGES = {\r\n{ CUSTOM_MESSAGE           \t\t  , \"{0}\" },\r\n\r\n{ UNSUPPORTED_OPERATION           , \"Unsupported Operation {0}.\" },\r\n{ CANT_LOCK_FILE                  , \"Can''t lock file ''{0}''. A single SmallSQL Database can only be opened from a single process.\" },\r\n\r\n{ DB_EXISTENT                     , \"Database ''{0}'' already exists.\" },\r\n{ DB_NONEXISTENT                  , \"Database ''{0}'' does not exist.\" },\r\n{ DB_NOT_DIRECTORY                , \"Directory ''{0}'' is not a SmallSQL database.\" },\r\n{ DB_NOTCONNECTED                 , \"You are not connected with a Database.\" },\r\n\r\n{ CONNECTION_CLOSED               , \"Connection is already closed.\" },\r\n\r\n{ VIEW_INSERT                     , \"INSERT is not supported for a view.\" },\r\n{ VIEWDROP_NOT_VIEW               , \"Cannot use DROP VIEW with ''{0}'' because it does not is a view.\" },\r\n{ VIEW_CANTDROP                   , \"View ''{0}'' can''t be dropped.\" },\r\n\r\n{ RSET_NOT_PRODUCED               , \"No ResultSet was produced.\" },\r\n{ RSET_READONLY                   , \"ResultSet is read only.\" },\r\n{ RSET_FWDONLY                    , \"ResultSet is forward only.\" },\r\n{ RSET_CLOSED                     , \"ResultSet is closed.\" },\r\n{ RSET_NOT_INSERT_ROW             , \"Cursor is currently not on the insert row.\" },\r\n{ RSET_ON_INSERT_ROW              , \"Cursor is currently on the insert row.\" },\r\n{ ROWSOURCE_READONLY              , \"Rowsource is read only.\" },\r\n{ STMT_IS_CLOSED                  , \"Statement is already closed.\" },\r\n\r\n{ SUBQUERY_COL_COUNT              , \"Count of columns in subquery must be 1 and not {0}.\" },\r\n{ JOIN_DELETE                     , \"The method deleteRow not supported on joins.\" },\r\n{ JOIN_INSERT                     , \"The method insertRow not supported on joins.\" },\r\n{ DELETE_WO_FROM                  , \"The method deleteRow need a FROM expression.\" },\r\n{ INSERT_WO_FROM                  , \"The method insertRow need a FROM expression.\" },\r\n\r\n{ TABLE_CANT_RENAME               , \"Table ''{0}'' can''t be renamed.\" },\r\n{ TABLE_CANT_DROP                 , \"Table ''{0}'' can''t be dropped.\" },\r\n{ TABLE_CANT_DROP_LOCKED          , \"Table ''{0}'' can''t drop because is locked.\" },\r\n{ TABLE_CORRUPT_PAGE              , \"Corrupt table page at position: {0}.\" },\r\n{ TABLE_MODIFIED                  , \"Table ''{0}'' was modified.\" },\r\n{ TABLE_DEADLOCK                  , \"Deadlock, can not create a lock on table ''{0}''.\" },\r\n{ TABLE_OR_VIEW_MISSING           , \"Table or View ''{0}'' does not exist.\" },\r\n{ TABLE_FILE_INVALID              , \"File ''{0}'' does not include a valid SmallSQL Table.\" },\r\n{ TABLE_OR_VIEW_FILE_INVALID      , \"File ''{0}'' is not a valid Table or View store.\" },\r\n{ TABLE_EXISTENT                  , \"Table or View ''{0}'' already exists.\" },\r\n\r\n{ FK_NOT_TABLE                    , \"''{0}'' is not a table.\" },\r\n{ PK_ONLYONE                      , \"A table can have only one primary key.\" },\r\n{ KEY_DUPLICATE                   , \"Duplicate Key.\" },\r\n\r\n{ MONTH_TOOLARGE                  , \"Months are too large in DATE or TIMESTAMP value ''{0}''.\" },\r\n{ DAYS_TOOLARGE                   , \"Days are too large in DATE or TIMESTAMP value ''{0}''.\" },\r\n{ HOURS_TOOLARGE                  , \"Hours are too large in TIME or TIMESTAMP value ''{0}''.\" },\r\n{ MINUTES_TOOLARGE                , \"Minutes are too large in TIME or TIMESTAMP value ''{0}''.\" },\r\n{ SECS_TOOLARGE                   , \"Seconds are too large in TIME or TIMESTAMP value ''{0}''.\" },\r\n{ MILLIS_TOOLARGE                 , \"Milliseconds are too large in TIMESTAMP value ''{0}''.\" },\r\n{ DATETIME_INVALID                , \"''{0}'' is an invalid DATE, TIME or TIMESTAMP.\" },\r\n\r\n{ UNSUPPORTED_CONVERSION_OPER     , \"Unsupported conversion to data type ''{0}'' from data type ''{1}'' for operation ''{2}''.\" },\r\n{ UNSUPPORTED_DATATYPE_OPER       , \"Unsupported data type ''{0}'' for operation ''{1}''.\" },\r\n{ UNSUPPORTED_DATATYPE_FUNC       , \"Unsupported data type ''{0}'' for function ''{1}''.\" },\r\n{ UNSUPPORTED_CONVERSION_FUNC     , \"Unsupported conversion to data type ''{0}'' for function ''{1}''.\" },\r\n{ UNSUPPORTED_TYPE_CONV           , \"Unsupported type for CONVERT function: {0}.\" },\r\n{ UNSUPPORTED_TYPE_SUM            , \"Unsupported data type ''{0}'' for SUM function.\" },\r\n{ UNSUPPORTED_TYPE_MAX            , \"Unsupported data type ''{0}'' for MAX function.\" },\r\n{ UNSUPPORTED_CONVERSION          , \"Can''t convert ''{0}'' [{1}] to ''{2}''.\" },\r\n{ INSERT_INVALID_LEN              , \"Invalid length ''{0}'' in function INSERT.\" },\r\n{ SUBSTR_INVALID_LEN              , \"Invalid length ''{0}'' in function SUBSTRING.\" },\r\n\r\n{ VALUE_STR_TOOLARGE              , \"String value too large for column.\" },\r\n{ VALUE_BIN_TOOLARGE              , \"Binary value with length {0} to large for column with size {1}.\" },\r\n{ VALUE_NULL_INVALID              , \"Null values are not valid for column ''{0}''.\" },\r\n{ VALUE_CANT_CONVERT              , \"Cannot convert a {0} value to a {1} value.\" },\r\n\r\n{ BYTEARR_INVALID_SIZE            , \"Invalid byte array size {0} for UNIQUEIDENFIER.\" },\r\n{ LOB_DELETED                     , \"Lob Object was deleted.\" },\r\n\r\n{ PARAM_CLASS_UNKNOWN             , \"Unknown parameter class: ''{0}''.\" },\r\n{ PARAM_EMPTY                     , \"Parameter {0} is empty.\" },\r\n{ PARAM_IDX_OUT_RANGE             , \"Parameter index {0} out of range. The value must be between 1 and {1}.\" },\r\n\r\n{ COL_DUPLICATE                \t  , \"There is a duplicated column name: ''{0}''.\" },\r\n{ COL_MISSING                     , \"Column ''{0}'' not found.\" },\r\n{ COL_VAL_UNMATCH                 , \"Columns and Values count is not identical.\" },\r\n{ COL_INVALID_SIZE                , \"Invalid column size {0} for column ''{1}''.\" },\r\n{ COL_WRONG_PREFIX                , \"The column prefix ''{0}'' does not match with a table name or alias name used in this query.\" },\r\n{ COL_READONLY                    , \"Column {0} is read only.\" },\r\n{ COL_INVALID_NAME                , \"Invalid column name ''{0}''.\" },\r\n{ COL_IDX_OUT_RANGE               , \"Column index out of range: {0}.\" },\r\n{ COL_AMBIGUOUS                   , \"Column ''{0}'' is ambiguous.\" },\r\n\r\n{ GROUP_AGGR_INVALID              , \"Aggregate function are not valid in the GROUP BY clause ({0}).\" },\r\n{ GROUP_AGGR_NOTPART              , \"Expression ''{0}'' is not part of a aggregate function or GROUP BY clause.\" },\r\n{ ORDERBY_INTERNAL                , \"Internal Error with ORDER BY.\" },\r\n{ UNION_DIFFERENT_COLS            , \"Different SELECT of the UNION have different column count: {0} and {1}.\" },\r\n\r\n{ INDEX_EXISTS                    , \"Index ''{0}'' already exists.\" },\r\n{ INDEX_MISSING                   , \"Index ''{0}'' does not exist.\" },\r\n{ INDEX_FILE_INVALID              , \"File ''{0}'' is not a valid Index store.\" },\r\n{ INDEX_CORRUPT                   , \"Error in loading Index. Index file is corrupt. ({0}).\" },\r\n{ INDEX_TOOMANY_EQUALS            , \"Too many equals entry in Index.\" },\r\n\r\n{ FILE_TOONEW                     , \"File version ({0}) of file ''{1}'' is too new for this runtime.\" },\r\n{ FILE_TOOOLD                     , \"File version ({0}) of file ''{1}'' is too old for this runtime.\" },\r\n{ FILE_CANT_DELETE                , \"File ''{0}'' can't be deleted.\" },\r\n\r\n{ ROW_0_ABSOLUTE                  , \"Row 0 is invalid for method absolute().\" },\r\n{ ROW_NOCURRENT                   , \"No current row.\" },\r\n{ ROWS_WRONG_MAX                  , \"Wrong max rows value: {0}.\" },\r\n{ ROW_LOCKED                      , \"Row is locked from another Connection.\" },\r\n{ ROW_DELETED                     , \"Row already deleted.\" },\r\n\r\n{ SAVEPT_INVALID_TRANS            , \"Savepoint is not valid for this transaction.\" },\r\n{ SAVEPT_INVALID_DRIVER           , \"Savepoint is not valid for this driver {0}.\" },\r\n\r\n{ ALIAS_UNSUPPORTED               , \"Alias not supported for this type of row source.\" },\r\n{ ISOLATION_UNKNOWN               , \"Unknown Transaction Isolation Level: {0}.\" },\r\n{ FLAGVALUE_INVALID               , \"Invalid flag value in method getMoreResults: {0}.\" },\r\n{ ARGUMENT_INVALID                , \"Invalid argument in method setNeedGenratedKeys: {0}.\" },\r\n{ GENER_KEYS_UNREQUIRED           , \"GeneratedKeys not requested.\" },\r\n{ SEQUENCE_HEX_INVALID            , \"Invalid hex sequence at {0}.\" },\r\n{ SEQUENCE_HEX_INVALID_STR        , \"Invalid hex sequence at position {0} in ''{1}''.\" },\r\n\r\n{ SYNTAX_BASE_OFS            \t  , \"Syntax error at offset {0} on ''{1}''. \" },\r\n{ SYNTAX_BASE_END        \t\t  , \"Syntax error, unexpected end of SQL string. \" },\r\n{ STXADD_ADDITIONAL_TOK\t\t\t  , \"Additional token after end of SQL statement.\" },\r\n{ STXADD_IDENT_EXPECT\t\t\t  , \"Identifier expected.\" },\r\n{ STXADD_IDENT_EMPTY \t\t\t  , \"Empty Identifier.\" },\r\n{ STXADD_IDENT_WRONG \t\t\t  , \"Wrong Identifier ''{0}''.\" },\r\n{ STXADD_OPER_MINUS \t\t\t  , \"Invalid operator minus for data type VARBINARY.\" },\r\n{ STXADD_FUNC_UNKNOWN \t\t\t  , \"Unknown function.\" },\r\n{ STXADD_PARAM_INVALID_COUNT\t  , \"Invalid parameter count.\" },\r\n{ STXADD_JOIN_INVALID\t  \t\t  , \"Invalid Join Syntax.\" },\r\n{ STXADD_FROM_PAR_CLOSE\t  \t\t  , \"Unexpected closing parenthesis in FROM clause.\" },\r\n{ STXADD_KEYS_REQUIRED\t  \t\t  , \"Required keywords are: \" },\r\n{ STXADD_NOT_NUMBER\t  \t\t      , \"Number value required (passed = ''{0}'').\" },\r\n{ STXADD_COMMENT_OPEN\t\t\t  , \"Missing end comment mark (''*/'').\" },\r\n\t};\r\n\r\n\t//////////////////////////////////////////////////////////////////////\r\n\t// SQL_STATES\r\n\t//////////////////////////////////////////////////////////////////////\r\n\t\r\n\tprivate final String[][] SQL_STATES = {\r\n{ CUSTOM_MESSAGE           \t\t  , \"01000\" },\r\n\r\n{ UNSUPPORTED_OPERATION           , \"01000\" },\r\n{ CANT_LOCK_FILE                  , \"01000\" },\r\n\r\n{ DB_EXISTENT                     , \"01000\" },\r\n{ DB_NONEXISTENT                  , \"01000\" },\r\n{ DB_NOT_DIRECTORY                , \"01000\" },\r\n{ DB_NOTCONNECTED                 , \"01000\" },\r\n\r\n{ CONNECTION_CLOSED               , \"01000\" },\r\n\r\n{ VIEW_INSERT                     , \"01000\" },\r\n{ VIEWDROP_NOT_VIEW               , \"01000\" },\r\n{ VIEW_CANTDROP                   , \"01000\" },\r\n\r\n{ RSET_NOT_PRODUCED               , \"01000\" },\r\n{ RSET_READONLY                   , \"01000\" },\r\n{ RSET_FWDONLY                    , \"01000\" },\r\n{ RSET_CLOSED                     , \"01000\" },\r\n{ RSET_NOT_INSERT_ROW             , \"01000\" },\r\n{ RSET_ON_INSERT_ROW              , \"01000\" },\r\n{ ROWSOURCE_READONLY              , \"01000\" },\r\n{ STMT_IS_CLOSED                  , \"HY010\" },\r\n\r\n{ SUBQUERY_COL_COUNT              , \"01000\" },\r\n{ JOIN_DELETE                     , \"01000\" },\r\n{ JOIN_INSERT                     , \"01000\" },\r\n{ DELETE_WO_FROM                  , \"01000\" },\r\n{ INSERT_WO_FROM                  , \"01000\" },\r\n\r\n{ TABLE_CANT_RENAME               , \"01000\" },\r\n{ TABLE_CANT_DROP                 , \"01000\" },\r\n{ TABLE_CANT_DROP_LOCKED          , \"01000\" },\r\n{ TABLE_CORRUPT_PAGE              , \"01000\" },\r\n{ TABLE_MODIFIED                  , \"01000\" },\r\n{ TABLE_DEADLOCK                  , \"01000\" },\r\n{ TABLE_OR_VIEW_MISSING           , \"01000\" },\r\n{ TABLE_FILE_INVALID              , \"01000\" },\r\n{ TABLE_OR_VIEW_FILE_INVALID      , \"01000\" },\r\n{ TABLE_EXISTENT                  , \"01000\" },\r\n\r\n{ FK_NOT_TABLE                    , \"01000\" },\r\n{ PK_ONLYONE                      , \"01000\" },\r\n{ KEY_DUPLICATE                   , \"01000\" },\r\n\r\n{ MONTH_TOOLARGE                  , \"01000\" },\r\n{ DAYS_TOOLARGE                   , \"01000\" },\r\n{ HOURS_TOOLARGE                  , \"01000\" },\r\n{ MINUTES_TOOLARGE                , \"01000\" },\r\n{ SECS_TOOLARGE                   , \"01000\" },\r\n{ MILLIS_TOOLARGE                 , \"01000\" },\r\n{ DATETIME_INVALID                , \"01000\" },\r\n\r\n{ UNSUPPORTED_CONVERSION_OPER     , \"01000\" },\r\n{ UNSUPPORTED_DATATYPE_OPER       , \"01000\" },\r\n{ UNSUPPORTED_DATATYPE_FUNC       , \"01000\" },\r\n{ UNSUPPORTED_CONVERSION_FUNC     , \"01000\" },\r\n{ UNSUPPORTED_TYPE_CONV           , \"01000\" },\r\n{ UNSUPPORTED_TYPE_SUM            , \"01000\" },\r\n{ UNSUPPORTED_TYPE_MAX            , \"01000\" },\r\n{ UNSUPPORTED_CONVERSION          , \"01000\" },\r\n{ INSERT_INVALID_LEN              , \"01000\" },\r\n{ SUBSTR_INVALID_LEN              , \"01000\" },\r\n\r\n{ VALUE_STR_TOOLARGE              , \"01000\" },\r\n{ VALUE_BIN_TOOLARGE              , \"01000\" },\r\n{ VALUE_NULL_INVALID              , \"01000\" },\r\n{ VALUE_CANT_CONVERT              , \"01000\" },\r\n\r\n{ BYTEARR_INVALID_SIZE            , \"01000\" },\r\n{ LOB_DELETED                     , \"01000\" },\r\n\r\n{ PARAM_CLASS_UNKNOWN             , \"01000\" },\r\n{ PARAM_EMPTY                     , \"01000\" },\r\n{ PARAM_IDX_OUT_RANGE             , \"01000\" },\r\n\r\n{ COL_DUPLICATE                \t  , \"01000\" },\r\n{ COL_MISSING                     , \"01000\" },\r\n{ COL_VAL_UNMATCH                 , \"01000\" },\r\n{ COL_INVALID_SIZE                , \"01000\" },\r\n{ COL_WRONG_PREFIX                , \"01000\" },\r\n{ COL_READONLY                    , \"01000\" },\r\n{ COL_INVALID_NAME                , \"01000\" },\r\n{ COL_IDX_OUT_RANGE               , \"01000\" },\r\n{ COL_AMBIGUOUS                   , \"01000\" },\r\n\r\n{ GROUP_AGGR_INVALID              , \"01000\" },\r\n{ GROUP_AGGR_NOTPART              , \"01000\" },\r\n{ ORDERBY_INTERNAL                , \"01000\" },\r\n{ UNION_DIFFERENT_COLS            , \"01000\" },\r\n\r\n{ INDEX_EXISTS                    , \"01000\" },\r\n{ INDEX_MISSING                   , \"01000\" },\r\n{ INDEX_FILE_INVALID              , \"01000\" },\r\n{ INDEX_CORRUPT                   , \"01000\" },\r\n{ INDEX_TOOMANY_EQUALS            , \"01000\" },\r\n\r\n{ FILE_TOONEW                     , \"01000\" },\r\n{ FILE_TOOOLD                     , \"01000\" },\r\n{ FILE_CANT_DELETE                , \"01000\" },\r\n\r\n{ ROW_0_ABSOLUTE                  , \"01000\" },\r\n{ ROW_NOCURRENT                   , \"01000\" },\r\n{ ROWS_WRONG_MAX                  , \"01000\" },\r\n{ ROW_LOCKED                      , \"01000\" },\r\n{ ROW_DELETED                     , \"01000\" },\r\n\r\n{ SAVEPT_INVALID_TRANS            , \"01000\" },\r\n{ SAVEPT_INVALID_DRIVER           , \"01000\" },\r\n\r\n{ ALIAS_UNSUPPORTED               , \"01000\" },\r\n{ ISOLATION_UNKNOWN               , \"01000\" },\r\n{ FLAGVALUE_INVALID               , \"01000\" },\r\n{ ARGUMENT_INVALID                , \"01000\" },\r\n{ GENER_KEYS_UNREQUIRED           , \"01000\" },\r\n{ SEQUENCE_HEX_INVALID            , \"01000\" },\r\n{ SEQUENCE_HEX_INVALID_STR        , \"01000\" },\r\n\r\n{ SYNTAX_BASE_OFS            \t  , \"01000\" },\r\n{ SYNTAX_BASE_END        \t\t  , \"01000\" },\r\n{ STXADD_ADDITIONAL_TOK\t\t\t  , \"01000\" },\r\n{ STXADD_IDENT_EXPECT\t\t\t  , \"01000\" },\r\n{ STXADD_IDENT_EMPTY \t\t\t  , \"01000\" },\r\n{ STXADD_IDENT_WRONG \t\t\t  , \"01000\" },\r\n{ STXADD_OPER_MINUS \t\t\t  , \"01000\" },\r\n{ STXADD_FUNC_UNKNOWN \t\t\t  , \"01000\" },\r\n{ STXADD_PARAM_INVALID_COUNT\t  , \"01000\" },\r\n{ STXADD_JOIN_INVALID\t  \t\t  , \"01000\" },\r\n{ STXADD_FROM_PAR_CLOSE\t  \t\t  , \"01000\" },\r\n{ STXADD_KEYS_REQUIRED\t  \t\t  , \"01000\" },\r\n{ STXADD_NOT_NUMBER\t  \t\t      , \"01000\" },\r\n{ STXADD_COMMENT_OPEN\t\t\t  , \"01000\" },\r\n\t};\r\n}"},{"path":"/src/smallsql/junit/TestScrollable.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * TestScrollable.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 14.08.2004\r\n */\r\npackage smallsql.junit;\r\n\r\nimport java.sql.*;\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\npublic class TestScrollable extends BasicTestCase {\r\n\t\r\n\tpublic void testLastWithWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n\t\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testLastWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Order By v\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}\r\n    \r\n    \r\n    private void testLastWithWhereAssert(ResultSet rs) throws Exception{\r\n        assertFalse( \"There should be no rows:\", rs.last());\r\n        assertFalse( \"isLast\", rs.isLast());\r\n        try{\r\n            rs.getString(\"v\");\r\n            fail(\"SQLException 'No current row' should be throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException( \"01000\", 0, ex );\r\n        }\r\n    }\r\n\t\r\n\r\n\tpublic void testNextWithWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testNextWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}\r\n    \r\n    \r\n    private void testNextWithWhereAssert(ResultSet rs) throws Exception{\r\n        assertFalse(\"There should be no rows:\", rs.next());\r\n        try{\r\n            rs.getString(\"v\");\r\n            fail(\"SQLException 'No current row' should be throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException( \"01000\", 0, ex);\r\n        }\r\n    }\r\n\t\r\n\t\r\n\tpublic void testFirstWithWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}\r\n    \r\n    \r\n    private void testFirstWithWhereAssert(ResultSet rs) throws Exception{\r\n        assertFalse( \"isFirst\", rs.isFirst() );\r\n        assertTrue( rs.isBeforeFirst() );\r\n        assertFalse( \"There should be no rows:\", rs.first());\r\n        assertFalse( \"isFirst\", rs.isFirst() );\r\n        assertTrue( rs.isBeforeFirst() );\r\n        try{\r\n            rs.getString(\"v\");\r\n            fail(\"SQLException 'No current row' should be throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"01000\", 0, ex);\r\n        }\r\n    }\r\n\r\n\r\n\tpublic void testPreviousWithWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testPreviousWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testPreviousWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testPreviousWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );\r\n            testPreviousWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n            testPreviousWithWhereAssert( st.executeQuery(\"Select v from Scrollable Group By v Having 1=0 Order By v\") );\r\n\t\t\t\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}\r\n    \r\n    \r\n    private void testPreviousWithWhereAssert(ResultSet rs) throws Exception{\r\n        assertTrue( rs.isBeforeFirst() );\r\n        assertTrue( rs.isAfterLast() );\r\n        rs.afterLast();\r\n        assertTrue( rs.isAfterLast() );\r\n        assertFalse(\"There should be no rows:\", rs.previous());\r\n        try{\r\n            rs.getString(\"v\");\r\n            fail(\"SQLException 'No current row' should be throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"01000\", 0, ex);\r\n        }\r\n    }\r\n\r\n\r\n\tpublic void testAbsoluteRelative() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert1')\");\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert2')\");\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert3')\");\r\n\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testAbsoluteRelativeAssert( st.executeQuery(\"Select * from Scrollable\") );\r\n            testAbsoluteRelativeAssert( st.executeQuery(\"Select * from Scrollable Order By i\") );\r\n            testAbsoluteRelativeAssert( st.executeQuery(\"Select v from Scrollable Group By v\") );\r\n            testAbsoluteRelativeAssert( st.executeQuery(\"Select v from Scrollable Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}\r\n\r\n    private void testAbsoluteRelativeAssert(ResultSet rs) throws SQLException{\r\n        assertEquals(0, rs.getRow());\r\n        \r\n        assertTrue(rs.absolute(2));\r\n        assertEquals(\"qwert2\", rs.getString(\"v\"));\r\n        assertEquals(2, rs.getRow());\r\n\r\n        assertTrue(rs.relative(-1));\r\n        assertEquals(\"qwert1\", rs.getString(\"v\"));\r\n        assertEquals(1, rs.getRow());\r\n\r\n        assertTrue(rs.absolute(1));\r\n        assertEquals(\"qwert1\", rs.getString(\"v\"));\r\n        assertEquals(1, rs.getRow());\r\n        assertTrue(rs.isFirst());\r\n\r\n        assertTrue(rs.relative(1));\r\n        assertEquals(\"qwert2\", rs.getString(\"v\"));\r\n        assertEquals(2, rs.getRow());\r\n        assertFalse(rs.isLast());\r\n        assertFalse(rs.isFirst());\r\n\r\n        assertTrue(rs.absolute(-1));\r\n        assertEquals(\"qwert3\", rs.getString(\"v\"));\r\n        assertEquals(3, rs.getRow());\r\n        assertTrue(rs.isLast());\r\n        assertFalse(rs.isFirst());\r\n\r\n        assertTrue(rs.relative(0));\r\n        assertEquals(\"qwert3\", rs.getString(\"v\"));\r\n        assertEquals(3, rs.getRow());\r\n        assertTrue(rs.isLast());\r\n        assertFalse(rs.isFirst());\r\n\r\n        assertFalse(rs.absolute(4));\r\n        assertEquals(0, rs.getRow());\r\n        assertFalse(rs.isLast());\r\n        assertFalse(rs.isFirst());\r\n        assertFalse(rs.isBeforeFirst());\r\n        assertTrue(rs.isAfterLast());\r\n\r\n        assertTrue(rs.last());\r\n        assertEquals(3, rs.getRow());\r\n        assertTrue(rs.isLast());\r\n        assertFalse(rs.isFirst());\r\n\r\n        assertFalse(rs.absolute(-4));\r\n        assertEquals(0, rs.getRow());\r\n        assertFalse(rs.isLast());\r\n        assertFalse(rs.isFirst());\r\n        assertTrue(rs.isBeforeFirst());\r\n        assertFalse(rs.isAfterLast());\r\n\r\n        assertFalse(rs.relative(4));\r\n        assertEquals(0, rs.getRow());\r\n        assertFalse(rs.isLast());\r\n        assertFalse(rs.isFirst());\r\n        assertFalse(rs.isBeforeFirst());\r\n        assertTrue(rs.isAfterLast());\r\n\r\n        assertFalse(rs.relative(-4));\r\n        assertEquals(0, rs.getRow());\r\n        assertFalse(rs.isLast());\r\n        assertFalse(rs.isFirst());\r\n        assertTrue(rs.isBeforeFirst());\r\n        assertFalse(rs.isAfterLast());\r\n    }\r\n\r\n    \r\n    public void testUpdatable() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        try{            \r\n            con.createStatement().execute(\"Create Table Scrollable (i int Identity primary key, v varchar(20))\");\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n\r\n            for(int row = 1; row < 4; row++){\r\n                testUpdatableAssert( con, st.executeQuery(\"Select * from Scrollable\"), row );\r\n                testUpdatableAssert( con, st.executeQuery(\"Select * from Scrollable Order By i\"), row );\r\n                testUpdatableAssert( con, st.executeQuery(\"Select * from Scrollable Where 1 = 1\"), row );\r\n                testUpdatableAssert( con, st.executeQuery(\"Select * from Scrollable Where 1 = 1 Order By i\"), row );\r\n                con.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert\" +row + \"')\");\r\n            }\r\n        }finally{\r\n            dropTable( con, \"Scrollable\");\r\n        }\r\n    }\r\n\r\n    private void testUpdatableAssert( Connection con, ResultSet rs, int row) throws Exception{\r\n        con.setAutoCommit(false);\r\n        for(int r=row; r < 4; r++){\r\n            rs.moveToInsertRow();\r\n            rs.updateString( \"v\", \"qwert\" + r);\r\n            rs.insertRow();\r\n        }\r\n        \r\n        assertTrue( rs.last() );\r\n        assertEquals( 3, rs.getRow() );     \r\n        \r\n        rs.beforeFirst();\r\n        assertRowCount( 3, rs );\r\n        \r\n        rs.beforeFirst();\r\n        testAbsoluteRelativeAssert(rs);\r\n        \r\n        con.rollback();\r\n        \r\n        assertRowCount( row - 1, con.createStatement().executeQuery(\"Select * from Scrollable\"));\r\n        \r\n        rs.last();\r\n        assertTrue( rs.rowDeleted() );\r\n        assertTrue( rs.rowInserted() );\r\n        rs.beforeFirst();\r\n        assertRowCount( 3, rs );\r\n        \r\n        con.setAutoCommit(true);\r\n    }\r\n    \r\n}\r\n"},{"path":"/src/smallsql/junit/TestThreads.java","source":"/*\r\n * Created on 13.07.2008\r\n */\r\npackage smallsql.junit;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * Test some thread problems.\r\n * \r\n * @author Volker Berlin\r\n */\r\npublic class TestThreads extends BasicTestCase{\r\n\r\n    volatile Throwable throwable;\r\n\r\n\r\n    /**\r\n     * Test the concurrently read of a table\r\n     * \r\n     * @throws Throwable\r\n     *             if an thread problem occur\r\n     */\r\n    public void testConcurrentRead() throws Throwable{\r\n        ArrayList threadList = new ArrayList();\r\n        throwable = null;\r\n\r\n        // Any table from another test that include rows.\r\n        final String sql = \"Select * From table_OrderBy1\";\r\n\r\n        // calculate the row count of this table\r\n        final Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        ResultSet rs = st.executeQuery(\"Select * From table_OrderBy1\");\r\n        int count = 0;\r\n        while(rs.next()){\r\n            count++;\r\n        }\r\n        final int rowCount = count;\r\n\r\n        // start threads that check the row count\r\n        for(int i = 0; i < 200; i++){\r\n            Thread thread = new Thread(new Runnable(){\r\n\r\n                public void run(){\r\n                    try{\r\n                        assertRowCount(rowCount, sql);\r\n                    }catch(Throwable ex){\r\n                        throwable = ex;\r\n                    }\r\n                }\r\n\r\n            });\r\n            threadList.add(thread);\r\n            thread.start();\r\n        }\r\n\r\n        // wait until all threads are finish\r\n        for(int i = 0; i < threadList.size(); i++){\r\n            Thread thread = (Thread)threadList.get(i);\r\n            thread.join(5000);\r\n        }\r\n\r\n        // throw the exception if one occur\r\n        if(throwable != null){\r\n            throw throwable;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Create a table with a single row. In different threads on the same connection a int value will be increment.\r\n     * \r\n     * @throws Throwable\r\n     *             if an thread problem occur\r\n     */\r\n    public void testConcurrentThreadWrite() throws Throwable{\r\n        ArrayList threadList = new ArrayList();\r\n        throwable = null;\r\n        final Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        try{\r\n            st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");\r\n            st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");\r\n\r\n            // start threads that check the row count\r\n            for(int i = 0; i < 200; i++){\r\n                Thread thread = new Thread(new Runnable(){\r\n\r\n                    public void run(){\r\n                        try{\r\n                            Statement st2 = con.createStatement();\r\n                            int count = st2.executeUpdate(\"UPDATE ConcurrentWrite SET value = value + 1\");\r\n                            assertEquals(\"Update Count\", 1, count);\r\n                        }catch(Throwable ex){\r\n                            throwable = ex;\r\n                        }\r\n                    }\r\n\r\n                });\r\n                threadList.add(thread);\r\n                thread.start();\r\n            }\r\n\r\n            // wait until all threads are finish\r\n            for(int i = 0; i < threadList.size(); i++){\r\n                Thread thread = (Thread)threadList.get(i);\r\n                thread.join(5000);\r\n            }\r\n\r\n            // throw the exception if one occur\r\n            if(throwable != null){\r\n                throw throwable;\r\n            }\r\n\r\n            assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");\r\n        }finally{\r\n            dropTable(con, \"ConcurrentWrite\");\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Create a table with a single row. In different connections a int value will be increment.\r\n     * \r\n     * @throws Throwable\r\n     *             if an thread problem occur\r\n     */\r\n    public void testConcurrentConnectionWrite() throws Throwable{\r\n        ArrayList threadList = new ArrayList();\r\n        throwable = null;\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        try{\r\n            st.execute(\"CREATE TABLE ConcurrentWrite( value int)\");\r\n            st.execute(\"INSERT INTO ConcurrentWrite(value) Values(0)\");\r\n\r\n            // start threads that check the row count\r\n            for(int i = 0; i < 200; i++){\r\n                Thread thread = new Thread(new Runnable(){\r\n\r\n                    public void run(){\r\n                        try{\r\n                            Connection con2 = AllTests.createConnection();\r\n                            Statement st2 = con2.createStatement();\r\n                            int count = st2.executeUpdate(\"UPDATE ConcurrentWrite SET value = value + 1\");\r\n                            assertEquals(\"Update Count\", 1, count);\r\n                            con2.close();\r\n                        }catch(Throwable ex){\r\n                            throwable = ex;\r\n                        }\r\n                    }\r\n\r\n                });\r\n                threadList.add(thread);\r\n                thread.start();\r\n            }\r\n\r\n            // wait until all threads are finish\r\n            for(int i = 0; i < threadList.size(); i++){\r\n                Thread thread = (Thread)threadList.get(i);\r\n                thread.join(5000);\r\n            }\r\n\r\n            // throw the exception if one occur\r\n            if(throwable != null){\r\n                throw throwable;\r\n            }\r\n\r\n            assertEqualsRsValue(new Integer(200), \"SELECT value FROM ConcurrentWrite\");\r\n        }finally{\r\n            dropTable(con, \"ConcurrentWrite\");\r\n        }\r\n    }\r\n\r\n}\r\n"},{"path":"/src/smallsql/database/Table.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2011, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * Table.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\nimport java.io.*;\r\nimport java.nio.ByteBuffer;\r\nimport java.nio.channels.FileChannel;\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport smallsql.database.language.Language;\r\n\r\nclass Table extends TableView{\r\n\t\r\n\tprivate static final int INDEX = 1;\r\n\r\n    final Database database;\r\n    FileChannel raFile; // file handle of the table\r\n\tprivate Lobs lobs; // file handle of lob data for this table\r\n    long firstPage; // offset of the first page\r\n\r\n\tfinal private HashMap locks = new HashMap();\r\n\tprivate SSConnection tabLockConnection; // if set then it is the Connection with a LOCK_TAB\r\n\tprivate int tabLockCount;\r\n\t/** if set then it is the Connection with a LOCK_WRITE_TAB */\r\n\tfinal private ArrayList locksInsert = new ArrayList(); // liste der LOCK_INSERT\r\n\tfinal private HashMap serializeConnections = new HashMap();\r\n\tfinal IndexDescriptions indexes;\r\n\tfinal ForeignKeys references;\r\n\r\n\r\n\t/**\r\n\t * Constructor for read existing tables.\r\n\t */\r\n    Table( Database database, SSConnection con, String name, FileChannel raFile, long offset, int tableFormatVersion) throws Exception{\r\n        super( name, new Columns() );\r\n        this.database = database;\r\n        this.raFile   = raFile;\r\n\t\tthis.firstPage = offset;\r\n\t\tStoreImpl store = getStore(con, firstPage, SQLTokenizer.SELECT);\r\n        if(store == null){\r\n            throw SmallSQLException.create(Language.TABLE_FILE_INVALID, getFile(database));\r\n        }\r\n\t\tint count = store.readInt();\r\n\r\n\t\tfor(int i=0; i<count; i++){\r\n\t\t\tcolumns.add( store.readColumn(tableFormatVersion) );\r\n\t\t}\r\n\t\tindexes = new IndexDescriptions();\r\n        references = new ForeignKeys();\r\n\t\t\r\n\t\t// read additional informations\r\n\t\tint type;\r\n\t\twhile((type = store.readInt()) != 0){\r\n\t\t\tint offsetInPage = store.getCurrentOffsetInPage();\r\n\t\t\tint size = store.readInt();\r\n\t\t\tswitch(type){\r\n\t\t\t\tcase INDEX:\r\n\t\t\t\t\tindexes.add( IndexDescription.load( database, this, store) );\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tstore.setCurrentOffsetInPage(offsetInPage + size);\r\n\t\t}\r\n\t\t\r\n\t\tfirstPage = store.getNextPagePos();\r\n    }\r\n    \r\n\r\n    /**\r\n     * Constructor for creating of new tables.\r\n     */\r\n    Table(Database database, SSConnection con, String name, Columns columns, IndexDescriptions indexes, ForeignKeys foreignKeys) throws Exception{\r\n        this(database, con, name, columns, null, indexes, foreignKeys);\r\n    }\r\n    \r\n    /**\r\n     * Constructor for alter an existing tables.\r\n     */\r\n    Table(Database database, SSConnection con, String name, Columns columns, IndexDescriptions existIndexes, IndexDescriptions newIndexes, ForeignKeys foreignKeys) throws Exception{\r\n        super( name, columns );\r\n        this.database = database;\r\n        this.references = foreignKeys;\r\n        newIndexes.create(con, database, this);\r\n        if(existIndexes == null){\r\n            this.indexes = newIndexes;\r\n        }else{\r\n            this.indexes = existIndexes;\r\n            existIndexes.add(newIndexes);\r\n        }\r\n        \r\n        write(con);\r\n        for(int i=0; i<foreignKeys.size(); i++){\r\n            ForeignKey foreignKey = foreignKeys.get(i);\r\n            Table pkTable = (Table)database.getTableView(con, foreignKey.pkTable);\r\n            pkTable.references.add(foreignKey);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Constructor for extends class Lobs.\r\n     */\r\n    Table(Database database, String name){\r\n    \tsuper( name, null);\r\n    \tthis.database = database;\r\n\t\tindexes = null;\r\n        references = null;\r\n    }\r\n\r\n\t/**\r\n\t * Drop the Table. This method is static that the file does not need to load and also corrupt files can be dropped.\r\n\t */ \r\n    static void drop(Database database, String name) throws Exception{\r\n        boolean ok = new File( Utils.createTableViewFileName( database, name ) ).delete();\r\n        if(!ok) throw SmallSQLException.create(Language.TABLE_CANT_DROP, name);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Drop a loaded table.\r\n     *\r\n     */\r\n    void drop(SSConnection con) throws Exception{\r\n\t\tTableStorePage storePage = requestLock( con, SQLTokenizer.CREATE, -1 );\r\n\t\tif(storePage == null){\r\n\t\t\tthrow SmallSQLException.create(Language.TABLE_CANT_DROP_LOCKED, name);\r\n        }\r\n\t\t// remove the all commits that point to this table\r\n\t\tcon.rollbackFile(raFile);\r\n\t\tclose();\r\n\t\tif(lobs != null)\r\n\t\t\tlobs.drop(con);\r\n\t\tif(indexes != null)\r\n\t\t\tindexes.drop(database);\r\n\t\tboolean ok = getFile(database).delete();\r\n\t\tif(!ok) throw SmallSQLException.create(Language.TABLE_CANT_DROP, name);\r\n    }\r\n    \r\n\r\n    /**\r\n     * Closed the file handle that the object can be garbaged.\r\n     */\r\n    @Override\r\n    void close() throws Exception{\r\n        if(indexes != null)\r\n            indexes.close();\r\n        raFile.close();\r\n        raFile = null;\r\n        if( lobs != null ){\r\n            lobs.close();\r\n            lobs = null;\r\n        }\r\n    }\r\n\r\n\r\n    private void write(SSConnection con) throws Exception{\r\n        raFile = createFile( con, database );\r\n        firstPage = 8;\r\n        StoreImpl store = getStore( con, firstPage, SQLTokenizer.CREATE);\r\n        int count = columns.size();\r\n        store.writeInt( count );\r\n        for(int i=0; i<count; i++){\r\n            store.writeColumn(columns.get(i));\r\n        }\r\n\r\n\t\t// write additional informations\r\n\t\tfor(int i=0; i<indexes.size(); i++){\r\n\t\t\tIndexDescription indexDesc = indexes.get(i);\r\n\t\t\tstore.writeInt( INDEX );\r\n\t\t\tint offsetStart = store.getCurrentOffsetInPage();\r\n\t\t\tstore.setCurrentOffsetInPage( offsetStart + 4 ); // place holder for length\r\n\t\t\t\r\n\t\t\t// write the IndexDescription\r\n\t\t\tindexDesc.save(store);\r\n\t\t\t\r\n\t\t\t// write the length information\r\n\t\t\tint offsetEnd = store.getCurrentOffsetInPage();\r\n\t\t\tstore.setCurrentOffsetInPage( offsetStart );\r\n\t\t\tstore.writeInt( offsetEnd - offsetStart);\r\n\t\t\tstore.setCurrentOffsetInPage( offsetEnd );\r\n\t\t}\r\n\t\tstore.writeInt( 0 ); // no more additional informations\r\n\t\t\r\n\t\tstore.writeFinsh(null); //The connection parameter is null because the table header is written immediately.\r\n        firstPage = store.getNextPagePos();\r\n    }\r\n    \r\n\r\n\t@Override\r\n    void writeMagic(FileChannel raFile) throws Exception{\r\n        ByteBuffer buffer = ByteBuffer.allocate(8);\r\n        buffer.putInt(MAGIC_TABLE);\r\n        buffer.putInt(TABLE_VIEW_VERSION);\r\n        buffer.position(0);\r\n        raFile.write(buffer);\r\n\t}\r\n\t\r\n\r\n    /*StoreImpl getStoreCreate( SSConnection con, long filePos ) throws Exception{\r\n        return StoreImpl.createStore( con, raFile, SQLTokenizer.CREATE, filePos );\r\n    }*/\r\n\r\n    StoreImpl getStore( SSConnection con, long filePos, int pageOperation ) throws Exception{\r\n\t\tTableStorePage storePage = requestLock( con, pageOperation, filePos );\r\n        return StoreImpl.createStore( this, storePage, pageOperation, filePos );\r\n    }\r\n\r\n    \r\n\tStoreImpl getStore( TableStorePage storePage, int pageOperation ) throws Exception{\r\n\t\t// is used for not committed INSERT pages, a new lock is not needed\r\n\t\treturn StoreImpl.recreateStore( this, storePage, pageOperation );\r\n\t}\r\n\t\r\n    /*StoreImpl getStoreUpdate( SSConnection con, long filePos ) throws Exception{\r\n        return StoreImpl.createStore( con, raFile, SQLTokenizer.UPDATE, filePos );\r\n    }\r\n\r\n    StoreImpl getStoreDelete( SSConnection con, long filePos ) throws Exception{\r\n        return StoreImpl.createStore( con, raFile, SQLTokenizer.DELETE, filePos );\r\n    }*/\r\n\t\r\n\r\n    StoreImpl getStoreInsert( SSConnection con ) throws Exception{\r\n\t\tTableStorePage storePage = requestLock( con, SQLTokenizer.INSERT, -1 );\r\n        return StoreImpl.createStore( this, storePage, SQLTokenizer.INSERT, -1 );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Create a Store that is not invoke in a transaction for copy of data.\r\n     */\r\n\tStoreImpl getStoreTemp( SSConnection con ) throws Exception{\r\n\t\tTableStorePage storePage = new TableStorePage( con, this, LOCK_NONE, -2);\r\n\t\treturn StoreImpl.createStore( this, storePage, SQLTokenizer.INSERT, -2 );\r\n\t}\r\n        \r\n\r\n\tStoreImpl getLobStore(SSConnection con, long filePos, int pageOperation) throws Exception{\r\n\t\tif(lobs == null){\r\n\t\t\tlobs = new Lobs( this );\r\n\t\t}\r\n\t\treturn lobs.getStore( con, filePos, pageOperation );\r\n\t}\r\n    \r\n\r\n\t\r\n\t/**\r\n\t * Return the file offset of the first page with data after the table declaration.\r\n\t * This is equals to the first row.\r\n\t */\r\n    final long getFirstPage(){\r\n        return firstPage;\r\n    }\r\n\r\n\r\n    /**\r\n     * Return a list of Links to not commited rows. The list include only the rows that are visible for \r\n     * the current isolation level.\r\n     */\r\n    List getInserts(SSConnection con){\r\n\t\tsynchronized(locks){\r\n\t\t\tArrayList inserts = new ArrayList();\r\n\t\t\tif(con.isolationLevel <= Connection.TRANSACTION_READ_UNCOMMITTED){\r\n\t\t\t\tfor(int i=0; i<locksInsert.size(); i++){\r\n\t\t\t\t\tTableStorePageInsert lock = (TableStorePageInsert)locksInsert.get(i);\r\n\t\t\t\t\tinserts.add(lock.getLink());\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tfor(int i=0; i<locksInsert.size(); i++){\r\n\t\t\t\t\tTableStorePageInsert lock = (TableStorePageInsert)locksInsert.get(i);\r\n\t\t\t\t\tif(lock.con == con)\r\n\t\t\t\t\t\tinserts.add(lock.getLink());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn inserts;\r\n\t\t}    \t\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Request a page lock. If the request is valid then it return the StorePage. \r\n     * If the lock can not be created within 5 seconds then it throw an exception.\r\n     * @param con The connection that request the lock\r\n     * @param pageOperation The operation that should be perform\r\n     * @param page The offset of the page\r\n     * @return a valid StorePage\r\n     * @throws Exception if a timeout occurs\r\n     */\r\n    final TableStorePage requestLock(SSConnection con, int pageOperation, long page) throws Exception{\r\n    \tsynchronized(locks){\r\n            if(raFile == null){\r\n                throw SmallSQLException.create(Language.TABLE_MODIFIED, name);\r\n            }\r\n\t\t\tlong endTime = 0;\r\n\t\t\twhile(true){\r\n\t\t\t\tTableStorePage storePage = requestLockImpl( con, pageOperation, page);\r\n\t\t\t\tif(storePage != null) \r\n\t\t\t\t\treturn storePage; // the normal case should be the fasted\r\n\t\t\t\tif(endTime == 0)\r\n\t\t\t\t\tendTime = System.currentTimeMillis() + 5000;\r\n\t\t\t\tlong waitTime = endTime - System.currentTimeMillis();\r\n\t\t\t\tif(waitTime <= 0)\r\n\t\t\t\t\tthrow SmallSQLException.create(Language.TABLE_DEADLOCK, name);\r\n\t\t\t\tlocks.wait(waitTime);\r\n\t\t\t}\r\n    \t}\r\n    }\r\n    \r\n    /**\r\n     * Request a page lock. If the request is valid then it return the StorePage. \r\n     * In the other case it return null.\r\n     * @param page The fileOffset or -1 for a new page\r\n     * @throws SQLException \r\n     */\r\n\tfinal private TableStorePage requestLockImpl(SSConnection con, int pageOperation, long page) throws SQLException{\r\n\t\tsynchronized(locks){\r\n\t\t\tif(tabLockConnection != null && tabLockConnection != con) return null;\r\n\t\t\tswitch(con.isolationLevel){\r\n\t\t\t\tcase Connection.TRANSACTION_SERIALIZABLE:\r\n\t\t\t\t\tserializeConnections.put( con, con);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tswitch(pageOperation){\r\n\t\t\t\tcase SQLTokenizer.CREATE:{\r\n\t\t\t\t\t\t// first check if another connection has a lock before creating a table lock\r\n\t\t\t\t\t\tif(locks.size() > 0){\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor(int i=0; i<locksInsert.size(); i++){\r\n\t\t\t\t\t\t\t//the first StorePage in the linked list must be ever TableStorePageInsert\r\n\t\t\t\t\t\t\tTableStorePageInsert lock = (TableStorePageInsert)locksInsert.get(i);\r\n\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(serializeConnections.size() > 0){\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttabLockConnection = con;\r\n\t\t\t\t\t\ttabLockCount++;\r\n\t\t\t\t\t\tTableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);\r\n\t\t\t\t\t\tcon.add(lock);\r\n\t\t\t\t\t\treturn lock;\r\n\t\t\t\t\t}\r\n                case SQLTokenizer.ALTER:{\r\n                    // first check if there is any lock before creating a table lock\r\n                    if(locks.size() > 0 || locksInsert.size() > 0){\r\n                        return null;\r\n                    }\r\n                    if(serializeConnections.size() > 0){\r\n                        Iterator values = locks.values().iterator();\r\n                        while(values.hasNext()){\r\n                            TableStorePage lock = (TableStorePage)values.next();\r\n                            if(lock.con != con) return null;\r\n                        }\r\n                    }\r\n                    tabLockConnection = con;\r\n                    tabLockCount++;\r\n                    TableStorePage lock = new TableStorePage(con, this, LOCK_TAB, page);\r\n                    lock.rollback();\r\n                    return lock;\r\n                }\r\n\t\t\t\tcase SQLTokenizer.INSERT:{\r\n\t\t\t\t\t\t// if there are more as one Connection with a serializable lock then an INSERT is not valid\r\n\t\t\t\t\t\tif(serializeConnections.size() > 1) return null;\r\n\t\t\t\t\t\tif(serializeConnections.size() == 1 && serializeConnections.get(con) == null) return null;\r\n\t\t\t\t\t\tTableStorePageInsert lock = new TableStorePageInsert(con, this, LOCK_INSERT);\r\n\t\t\t\t\t\tlocksInsert.add( lock );\r\n\t\t\t\t\t\tcon.add(lock);\r\n\t\t\t\t\t\treturn lock;\r\n\t\t\t\t\t}\r\n\t\t\t\tcase SQLTokenizer.SELECT:\r\n\t\t\t\tcase SQLTokenizer.UPDATE:{\r\n\t\t\t\t\t\tLong pageKey = new Long(page); //TODO performance\r\n\t\t\t\t\t\tTableStorePage prevLock = null;\r\n\t\t\t\t\t\tTableStorePage lock = (TableStorePage)locks.get( pageKey );\r\n\t\t\t\t\t\tTableStorePage usableLock = null;\r\n\t\t\t\t\t\twhile(lock != null){\r\n\t\t\t\t\t\t\tif(lock.con == con || \r\n\t\t\t\t\t\t\t   con.isolationLevel <= Connection.TRANSACTION_READ_UNCOMMITTED){\r\n\t\t\t\t\t\t\t    usableLock = lock;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t    if(lock.lockType == LOCK_WRITE){\r\n\t\t\t\t\t\t\t        return null; // write lock of another Connection\r\n\t\t\t\t\t\t\t    }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tprevLock = lock;\r\n\t\t\t\t\t\t\tlock = lock.nextLock;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(usableLock != null){\r\n\t\t\t\t\t\t    return usableLock;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlock = new TableStorePage( con, this, LOCK_NONE, page);\r\n\t\t\t\t\t\tif(con.isolationLevel >= Connection.TRANSACTION_REPEATABLE_READ || pageOperation == SQLTokenizer.UPDATE){\r\n\t\t\t\t\t\t\tlock.lockType = pageOperation == SQLTokenizer.UPDATE ? LOCK_WRITE : LOCK_READ;\r\n\t\t\t\t\t\t\tif(prevLock != null){\r\n\t\t\t\t\t\t\t    prevLock.nextLock = lock.nextLock;\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t    locks.put( pageKey, lock );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcon.add(lock);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn lock;\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\tcase SQLTokenizer.LONGVARBINARY:\r\n\t\t\t\t\t// is used for written BLOB and CLOB\r\n\t\t\t\t\t// the difference to INSERT is that page described the size of the byte buffer\r\n\t\t\t\t\treturn new TableStorePage( con, this, LOCK_INSERT, -1);\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"pageOperation:\"+pageOperation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Request a write lock for a page that is read. It add the resulting StorePage to the list of commits.\r\n     * @throws SQLException\r\n     *             if the connection was closed.\r\n\t */\r\n\tTableStorePage requestWriteLock(SSConnection con, TableStorePage readlock) throws SQLException{\r\n\t\tif(readlock.lockType == LOCK_INSERT){\r\n\t\t\tTableStorePage lock = new TableStorePage( con, this, LOCK_INSERT, -1);\r\n\t\t\treadlock.nextLock = lock;\r\n\t\t\tcon.add(lock);\r\n\t\t\treturn lock;\t\t\t\t\t\t\t\t\t\r\n\t\t}\r\n\t\tLong pageKey = new Long(readlock.fileOffset); //TODO performance\r\n\t\tTableStorePage prevLock = null;\r\n\t\tTableStorePage lock = (TableStorePage)locks.get( pageKey );\r\n\t\twhile(lock != null){\r\n\t\t\tif(lock.con != con) return null; // there is already any lock from another connection, we can not start write\r\n\t\t\tif(lock.lockType < LOCK_WRITE){\r\n\t\t\t\t// if there is only a read lock we can transfer it\r\n\t\t\t\t// this is required for rollback to a savepoint\r\n\t\t\t\tlock.lockType = LOCK_WRITE;\r\n\t\t\t\treturn lock;\r\n\t\t\t}\r\n\t\t\tprevLock = lock;\r\n\t\t\tlock = lock.nextLock;\r\n\t\t}\r\n\t\tlock = new TableStorePage( con, this, LOCK_WRITE, readlock.fileOffset);\r\n\t\tif(prevLock != null){\r\n\t\t    prevLock.nextLock = lock;\r\n\t\t} else {\r\n\t\t    locks.put( pageKey, lock );\r\n\t\t}\r\n\t\tcon.add(lock);\r\n\t\treturn lock;\t\t\t\t\t\t\t\t\t\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Remove the lock from this table.\r\n\t */\r\n\tvoid freeLock(TableStorePage storePage){\r\n\t\tfinal int lockType = storePage.lockType;\r\n\t\tfinal long fileOffset = storePage.fileOffset;\r\n\t\tsynchronized(locks){\r\n\t\t\ttry{\r\n\t\t\t\tTableStorePage lock;\r\n\t\t\t\tTableStorePage prev;\r\n\t\t\t\tswitch(lockType){\r\n\t\t\t\t\tcase LOCK_INSERT:\r\n\t\t\t\t\t\tfor(int i=0; i<locksInsert.size(); i++){\r\n\t\t\t\t\t\t\tprev = lock = (TableStorePage)locksInsert.get(i);\r\n\t\t\t\t\t\t\twhile(lock != null){\r\n\t\t\t\t\t\t\t\tif(lock == storePage){\r\n\t\t\t\t\t\t\t\t\t//remove lock\r\n\t\t\t\t\t\t\t\t\tif(lock == prev){\r\n\t\t\t\t\t\t\t\t\t\tif(lock.nextLock == null){\r\n\t\t\t\t\t\t\t\t\t\t\t// the first lock is the only lock in the list\r\n\t\t\t\t\t\t\t\t\t\t\tlocksInsert.remove(i--);\r\n\t\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\t\t// only the first lock of the list is remove\r\n\t\t\t\t\t\t\t\t\t\t\tlocksInsert.set( i, lock.nextLock );\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\t// a lock in the mid or end is removed\r\n\t\t\t\t\t\t\t\t\t\tprev.nextLock = lock.nextLock;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tprev = lock;\r\n\t\t\t\t\t\t\t\tlock = lock.nextLock;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase LOCK_READ:\r\n\t\t\t\t\tcase LOCK_WRITE:\r\n\t\t\t\t\t\tLong pageKey = new Long(fileOffset); //TODO performance\r\n\t\t\t\t\t\tlock = (TableStorePage)locks.get( pageKey );\r\n\t\t\t\t\t\tprev = lock;\r\n\t\t\t\t\t\twhile(lock != null){\r\n\t\t\t\t\t\t\tif(lock == storePage){\r\n\t\t\t\t\t\t\t\t//lock entfernen\r\n\t\t\t\t\t\t\t\tif(lock == prev){\r\n\t\t\t\t\t\t\t\t\tif(lock.nextLock == null){\r\n\t\t\t\t\t\t\t\t\t\t// erste und einzige Lock in Liste\r\n\t\t\t\t\t\t\t\t\t\tlocks.remove(pageKey);\r\n\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\t// the first lock in the list is removed\r\n\t\t\t\t\t\t\t\t\t\tlocks.put( pageKey, lock.nextLock );\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t// a lock in the middle or end of the list is removed\r\n\t\t\t\t\t\t\t\t\tprev.nextLock = lock.nextLock;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tprev = lock;\r\n\t\t\t\t\t\t\tlock = lock.nextLock;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// a run through can occur if a lock was step high and the type does not compare\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase LOCK_TAB:\r\n\t\t\t\t\t\tassert storePage.con == tabLockConnection : \"Internal Error with TabLock\";\r\n\t\t\t\t\t\tif(--tabLockCount == 0) tabLockConnection = null;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new Error();\r\n\t\t\t\t}\r\n\t\t\t}finally{\r\n\t\t\t\tlocks.notifyAll();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n"},{"path":"/src/smallsql/database/ExpressionArithmetic.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionArithmethic.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\nimport java.sql.*;\r\nimport smallsql.database.language.Language;\r\n\r\n\r\npublic class ExpressionArithmetic extends Expression {\r\n\r\n    private Expression left;\r\n    private Expression right;\r\n    private Expression right2;\r\n    private Expression[] inList;\r\n    final private int operation;\r\n\r\n    /**\r\n     * Constructor for NOT, NEGATIVE, BIT_NOT, ISNULL and ISNOTNULL\r\n     */\r\n    ExpressionArithmetic( Expression left, int operation){\r\n    \tsuper(FUNCTION);\r\n        this.left  = left;\r\n        this.operation = operation;\r\n        super.setParams( new Expression[]{ left });\r\n    }\r\n\r\n    ExpressionArithmetic( Expression left, Expression right, int operation){\r\n\t\tsuper(FUNCTION);\r\n        this.left   = left;\r\n        this.right  = right;\r\n        this.operation = operation;\r\n        super.setParams( new Expression[]{ left, right });\r\n    }\r\n\r\n    /**\r\n     * Constructor for BETWEEN\r\n     */\r\n    ExpressionArithmetic( Expression left, Expression right, Expression right2, int operation){\r\n\t\tsuper(FUNCTION);\r\n        this.left   = left;\r\n        this.right  = right;\r\n        this.right2 = right2;\r\n        this.operation = operation;\r\n        super.setParams( new Expression[]{ left, right, right2 });\r\n    }\r\n    \r\n    /**\r\n     * Constructor for IN\r\n     */\r\n    ExpressionArithmetic( Expression left, Expressions inList, int operation){\r\n\t\tsuper(FUNCTION);\r\n        this.left   = left;\r\n        this.operation = operation;\r\n\t\tExpression[] params;\r\n        if(inList != null){\r\n\t        this.inList = inList.toArray();\r\n\t        params = new Expression[this.inList.length+1];\r\n\t        params[0] = left;\r\n\t        System.arraycopy(this.inList, 0, params, 1, this.inList.length);\r\n        }else{\r\n            //Occur with ExpressionInSelect, in this case the method isInList() is overridden\r\n\t\t\tparams = new Expression[]{ left };\r\n        }\r\n        super.setParams( params );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get the arithmetic operation of this expression.\r\n     * @return\r\n     */\r\n    int getOperation(){\r\n        return operation;\r\n    }\r\n      \r\n    \r\n    private Expression convertExpressionIfNeeded( Expression expr, Expression other ){\r\n        if(expr == null || other == null){\r\n            return expr;\r\n        }\r\n        switch(expr.getDataType()){\r\n        case SQLTokenizer.CHAR:\r\n        case SQLTokenizer.NCHAR:\r\n        case SQLTokenizer.BINARY:\r\n            switch(other.getDataType()){\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n            case SQLTokenizer.CLOB:\r\n            case SQLTokenizer.NCLOB:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n            case SQLTokenizer.VARBINARY:\r\n                ExpressionFunctionRTrim trim = new ExpressionFunctionRTrim();\r\n                trim.setParams(new Expression[]{expr});\r\n                return trim;\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.BINARY:\r\n                if(other.getPrecision() > expr.getPrecision()){\r\n                    return new ExpressionFunctionConvert(new ColumnExpression(other), expr, null );\r\n                }\r\n                break; \r\n            }\r\n            break;\r\n        }\r\n        return expr;\r\n    }\r\n    \r\n\r\n\tfinal void setParamAt( Expression param, int idx){\r\n\t\tswitch(idx){\r\n\t\t\tcase 0:\r\n\t\t\t\tleft = param;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n                if(right != null){\r\n                    right = param;\r\n                }\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n                if(right != null){\r\n                    right2 = param;\r\n                }\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tif(inList != null && idx>0 && idx<=inList.length){\r\n\t\t\tinList[idx-1] = param;\r\n\t\t}\r\n\t\tsuper.setParamAt( param, idx );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Is used in GroupResult.\r\n\t */\r\n\tpublic boolean equals(Object expr){\r\n\t\tif(!super.equals(expr)) return false;\r\n\t\tif(!(expr instanceof ExpressionArithmetic)) return false;\r\n\t\tif( ((ExpressionArithmetic)expr).operation != operation) return false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t\r\n    int getInt() throws java.lang.Exception {\r\n        if(isNull()) return 0;\r\n        int dataType = getDataType();\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n\t\t\t\treturn getBoolean() ? 1 : 0;\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n\t\t\t\treturn getIntImpl();\r\n            case SQLTokenizer.BIGINT:\r\n                return (int)getLongImpl();\r\n\t\t\tcase SQLTokenizer.REAL:\r\n                return (int)getFloatImpl();\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\tcase SQLTokenizer.DOUBLE:\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n            \t// FIXME: bug! if get returns a number outside of\r\n            \t// integer interval, it's not rounded to max/min, \r\n            \t// instead it returns a wrong value\r\n                return (int)getDoubleImpl();\r\n        }\r\n        throw createUnspportedConversion( SQLTokenizer.INT);\r\n    }\r\n    \r\n    \r\n    private int getIntImpl() throws java.lang.Exception {\r\n        switch(operation){\r\n            case ADD:       return left.getInt() + right.getInt();\r\n            case SUB:       return left.getInt() - right.getInt();\r\n            case MUL:       return left.getInt() * right.getInt();\r\n            case DIV:       return left.getInt() / right.getInt();\r\n            case NEGATIVE:  return               - left.getInt();\r\n            case MOD:\t\treturn left.getInt() % right.getInt();\r\n            case BIT_NOT:   return               ~ left.getInt();\r\n        }\r\n        throw createUnspportedConversion( SQLTokenizer.INT);\r\n    }\r\n    \r\n    \r\n\tlong getLong() throws java.lang.Exception {\r\n        if(isNull()) return 0;\r\n        int dataType = getDataType();\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n\t\t\t\treturn getBoolean() ? 1 : 0;\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n\t\t\t\treturn getIntImpl();\r\n            case SQLTokenizer.BIGINT:\r\n                return getLongImpl();\r\n\t\t\tcase SQLTokenizer.REAL:\r\n                return (long)getFloatImpl();\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\tcase SQLTokenizer.DOUBLE:\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                return (long)getDoubleImpl();\r\n        }\r\n\t\tthrow createUnspportedConversion( SQLTokenizer.LONG);\r\n    }\r\n\t\r\n\t\r\n\tprivate long getLongImpl() throws java.lang.Exception {\r\n        if(isNull()) return 0;\r\n        switch(operation){\r\n            case ADD: return left.getLong() + right.getLong();\r\n            case SUB: return left.getLong() - right.getLong();\r\n            case MUL: return left.getLong() * right.getLong();\r\n            case DIV: return left.getLong() / right.getLong();\r\n            case NEGATIVE:  return          - left.getLong();\r\n            case MOD:\t\treturn left.getLong() % right.getLong();\r\n            case BIT_NOT:   return          ~ right.getInt();\r\n        }\r\n\t\tthrow createUnspportedConversion( SQLTokenizer.LONG);\r\n    }\r\n\t\r\n\t\r\n    double getDouble() throws java.lang.Exception {\r\n        if(isNull()) return 0;\r\n        int dataType = getDataType();\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n\t\t\t\treturn getBoolean() ? 1 : 0;\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n\t\t\t\treturn getIntImpl();\r\n            case SQLTokenizer.BIGINT:\r\n                return getLongImpl();\r\n\t\t\tcase SQLTokenizer.REAL:\r\n                return getFloatImpl();\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\tcase SQLTokenizer.DOUBLE:\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                return getDoubleImpl();\r\n        }\r\n\t\tthrow createUnspportedConversion( SQLTokenizer.DOUBLE);\r\n    }\r\n\t\r\n\t\r\n    private double getDoubleImpl() throws java.lang.Exception{\r\n\t\tif(operation == NEGATIVE)\r\n\t\t\treturn getDoubleImpl(0, left.getDouble());\r\n\t\treturn getDoubleImpl(left.getDouble(), right.getDouble());\r\n\t}\r\n\t\r\n\t\r\n    private double getDoubleImpl( double lVal, double rVal) throws java.lang.Exception{\r\n        switch(operation){\r\n            case ADD: return lVal + rVal;\r\n            case SUB: return lVal - rVal;\r\n            case MUL: return lVal * rVal;\r\n            case DIV: return lVal / rVal;\r\n            case NEGATIVE: return - rVal;\r\n            case MOD:\t\treturn lVal % rVal;\r\n        }\r\n        throw createUnspportedConversion( SQLTokenizer.DOUBLE);\r\n    }\r\n\t\r\n\r\n    float getFloat() throws java.lang.Exception {\r\n        if(isNull()) return 0;\r\n        int dataType = getDataType();\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n\t\t\t\treturn getBoolean() ? 1 : 0;\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n\t\t\t\treturn getIntImpl();\r\n            case SQLTokenizer.BIGINT:\r\n                return getLongImpl();\r\n\t\t\tcase SQLTokenizer.REAL:\r\n                return getFloatImpl();\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\tcase SQLTokenizer.DOUBLE:\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                return (float)getDoubleImpl();\r\n        }\r\n\t\tthrow createUnspportedConversion( SQLTokenizer.DOUBLE);\r\n    }\r\n    \r\n    \r\n    private float getFloatImpl() throws java.lang.Exception {\r\n        switch(operation){\r\n            case ADD: return left.getFloat() + right.getFloat();\r\n            case SUB: return left.getFloat() - right.getFloat();\r\n            case MUL: return left.getFloat() * right.getFloat();\r\n            case DIV: return left.getFloat() / right.getFloat();\r\n            case NEGATIVE:  return           - left.getFloat();\r\n            case MOD:\t\treturn left.getFloat() % right.getFloat();\r\n        }\r\n        throw createUnspportedConversion( SQLTokenizer.REAL );\r\n    }\r\n    \r\n    \r\n    long getMoney() throws java.lang.Exception {\r\n        if(isNull()) return 0;\r\n        int dataType = getDataType();\t\t\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n\t\t\t\treturn getBoolean() ? 10000 : 0;\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n\t\t\t\treturn getIntImpl() * 10000;\r\n            case SQLTokenizer.BIGINT:\r\n                return getLongImpl() * 10000;\r\n\t\t\tcase SQLTokenizer.REAL:\r\n                return Utils.doubleToMoney( getFloatImpl() );\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\tcase SQLTokenizer.DOUBLE:\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                return Utils.doubleToMoney( getDoubleImpl() );\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n\t\t\t\treturn getMoneyImpl();\r\n        }\r\n\t\tthrow createUnspportedConversion( SQLTokenizer.DOUBLE);\r\n    }\r\n    \r\n\r\n    private long getMoneyImpl() throws java.lang.Exception {\r\n        switch(operation){\r\n            case ADD: return left.getMoney() + right.getMoney();\r\n            case SUB: return left.getMoney() - right.getMoney();\r\n            case MUL: return left.getMoney() * right.getMoney() / 10000;\r\n            case DIV: return left.getMoney() * 10000 / right.getMoney();\t\t\t\t\t\r\n            case NEGATIVE: return \t\t\t - left.getMoney();\r\n        }\r\n        throw createUnspportedConversion( SQLTokenizer.MONEY );\r\n    }\r\n    \r\n\r\n    MutableNumeric getNumeric() throws java.lang.Exception {\r\n        if(isNull()) return null;\r\n        int dataType = getDataType();\t\t\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n\t\t\t\treturn new MutableNumeric(getBoolean() ? 1 : 0);\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n\t\t\t\treturn new MutableNumeric(getIntImpl());\r\n            case SQLTokenizer.BIGINT:\r\n                return new MutableNumeric(getLongImpl());\r\n\t\t\tcase SQLTokenizer.REAL:\r\n                return new MutableNumeric(getFloatImpl());\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\tcase SQLTokenizer.DOUBLE:\r\n                return new MutableNumeric( getDoubleImpl() );\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                return getNumericImpl();\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n\t\t\t\treturn new MutableNumeric(getMoneyImpl(),4);\r\n        }\r\n\t\tthrow createUnspportedConversion( SQLTokenizer.DOUBLE);\r\n    }\r\n    \r\n    \r\n    private MutableNumeric getNumericImpl() throws java.lang.Exception {\r\n        switch(operation){\r\n            case ADD: \r\n            \t{\r\n\t\t\t\t\tMutableNumeric num = left.getNumeric();\r\n            \t\tnum.add( right.getNumeric() );\r\n            \t\treturn num;\r\n            \t}\r\n            case SUB:\r\n\t\t\t\t{\r\n\t\t\t\t\tMutableNumeric num = left.getNumeric();\r\n\t\t\t\t\tnum.sub( right.getNumeric() );\r\n\t\t\t\t\treturn num;\r\n\t\t\t\t}\r\n            case MUL: \r\n            \tif(getDataType(right.getDataType(), SQLTokenizer.INT) == SQLTokenizer.INT){\r\n            \t\tMutableNumeric num = left.getNumeric();\r\n            \t\tnum.mul(right.getInt());\r\n            \t\treturn num;\r\n            \t}else\r\n            \tif(getDataType(left.getDataType(), SQLTokenizer.INT) == SQLTokenizer.INT){\r\n\t\t\t\t\tMutableNumeric num = right.getNumeric();\r\n\t\t\t\t\tnum.mul(left.getInt());\r\n\t\t\t\t\treturn num;\r\n            \t}else{\r\n\t\t\t\t\tMutableNumeric num = left.getNumeric();\r\n\t\t\t\t\tnum.mul( right.getNumeric() );\r\n\t\t\t\t\treturn num;\r\n            \t}\r\n            case DIV:\r\n            \t{\r\n\t\t\t\t\tMutableNumeric num = left.getNumeric();\r\n            \t\tif(getDataType(right.getDataType(), SQLTokenizer.INT) == SQLTokenizer.INT)\r\n            \t\t\tnum.div( right.getInt() );\r\n            \t\telse\r\n            \t\t\tnum.div( right.getNumeric() ); \r\n            \t\treturn num;\r\n            \t}\r\n            case NEGATIVE:\r\n            \t{\r\n\t\t\t\t\tMutableNumeric num = left.getNumeric();\r\n\t\t\t\t\tnum.setSignum(-num.getSignum());\r\n\t\t\t\t\treturn num;\r\n            \t}\r\n            case MOD:\r\n\t\t\t\t{\r\n\t\t\t\t\tif(getDataType(getDataType(), SQLTokenizer.INT) == SQLTokenizer.INT)\r\n\t\t\t\t\t\treturn new MutableNumeric(getInt());\r\n\t\t\t\t\tMutableNumeric num = left.getNumeric();\r\n\t\t\t\t\tnum.mod( right.getNumeric() );\r\n\t\t\t\t\treturn num;\r\n\t\t\t\t}\r\n            default:    throw createUnspportedConversion( SQLTokenizer.NUMERIC );\r\n        }\r\n    }\r\n    \r\n    \r\n    Object getObject() throws java.lang.Exception {\r\n        if(isNull()) return null;\r\n        int dataType = getDataType();\r\n        switch(dataType){\r\n            case SQLTokenizer.BIT:\r\n            case SQLTokenizer.BOOLEAN:\r\n                    return getBoolean() ? Boolean.TRUE : Boolean.FALSE;\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n                    return getBytes();\r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n                    return new Integer( getInt() );\r\n            case SQLTokenizer.BIGINT:\r\n                    return new Long( getLong() );\r\n            case SQLTokenizer.REAL:\r\n                    return new Float( getFloat() );\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    return new Double( getDouble() );\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    return Money.createFromUnscaledValue( getMoney() );\r\n            case SQLTokenizer.NUMERIC:\r\n            case SQLTokenizer.DECIMAL:\r\n                    return getNumeric();\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n            \t\treturn getString( left.getString(), right.getString() );\r\n            case SQLTokenizer.JAVA_OBJECT:\r\n                    Object lObj = left.getObject();\r\n                    //FIXME NullPointerException bei NEGATIVE\r\n                    Object rObj = right.getObject();\r\n                    if(lObj instanceof Number && rObj instanceof Number)\r\n                        return new Double( getDoubleImpl( ((Number)lObj).doubleValue(), ((Number)rObj).doubleValue() ) );\r\n                    else\r\n                        return getString( lObj.toString(), rObj.toString() );\r\n            case SQLTokenizer.LONGVARBINARY:\r\n                    return getBytes();\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\treturn new DateTime( getLong(), dataType );\r\n            case SQLTokenizer.UNIQUEIDENTIFIER:\r\n                    return getBytes();\r\n            default: throw createUnspportedDataType();\r\n        }\r\n    }\r\n    \r\n    \r\n    boolean getBoolean() throws java.lang.Exception {\r\n        switch(operation){\r\n        \tcase OR:    return left.getBoolean() || right.getBoolean();\r\n            case AND:   return left.getBoolean() && right.getBoolean();\r\n            case NOT:   return                      !left.getBoolean();\r\n            case LIKE:  return Utils.like( left.getString(), right.getString());\r\n            case ISNULL:return \t\t\t\t\t\tleft.isNull();\r\n\t\t\tcase ISNOTNULL:\treturn \t\t\t\t\t!left.isNull();\r\n\t\t\tcase IN:\tif(right == null)\r\n\t\t\t\t\t\t\treturn isInList();\r\n\t\t\t\t\t\tbreak;\r\n        }\r\n        final boolean leftIsNull = left.isNull();\r\n        int dataType;\r\n        if(operation == NEGATIVE || operation == BIT_NOT){\r\n        \tif(leftIsNull) return false;\r\n        \tdataType = left.getDataType();\r\n        }else{\r\n            final boolean rightIsNull = right.isNull();\r\n        \tif(operation == EQUALS_NULL && leftIsNull && rightIsNull) return true;\r\n        \tif(leftIsNull || rightIsNull) return false;\r\n        \tdataType = getDataType(left, right);\r\n        }\r\n        switch(dataType){\r\n\t\t\tcase SQLTokenizer.BOOLEAN:\r\n\t\t\t\t\tswitch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n\t\t\t\t\t\tcase EQUALS:    return left.getBoolean() == right.getBoolean();\r\n\t\t\t\t\t\tcase UNEQUALS:  return left.getBoolean() != right.getBoolean();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//break; interpret it as BIT \r\n            case SQLTokenizer.TINYINT:\r\n            case SQLTokenizer.SMALLINT:\r\n            case SQLTokenizer.INT:\r\n            case SQLTokenizer.BIT:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getInt() == right.getInt();\r\n                        case GREATER:   return left.getInt() >  right.getInt();\r\n                        case GRE_EQU:   return left.getInt() >= right.getInt();\r\n                        case LESSER:    return left.getInt() <  right.getInt();\r\n                        case LES_EQU:   return left.getInt() <= right.getInt();\r\n                        case UNEQUALS:  return left.getInt() != right.getInt();\r\n                        case BETWEEN:\r\n                                        int _left = left.getInt();\r\n                                        return _left >= right.getInt() && right2.getInt() >= _left;\r\n                        default:\r\n                        \treturn getInt() != 0;\r\n                    }\r\n            case SQLTokenizer.BIGINT:\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getLong() == right.getLong();\r\n                        case GREATER:   return left.getLong() >  right.getLong();\r\n                        case GRE_EQU:   return left.getLong() >= right.getLong();\r\n                        case LESSER:    return left.getLong() <  right.getLong();\r\n                        case LES_EQU:   return left.getLong() <= right.getLong();\r\n                        case UNEQUALS:  return left.getLong() != right.getLong();\r\n                        case BETWEEN:\r\n                                        long _left = left.getLong();\r\n                                        return _left >= right.getLong() && right2.getLong() >= _left;\r\n                        default:\r\n                        \treturn getLong() != 0;\r\n                    }\r\n            case SQLTokenizer.REAL:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getFloat() == right.getFloat();\r\n                        case GREATER:   return left.getFloat() >  right.getFloat();\r\n                        case GRE_EQU:   return left.getFloat() >= right.getFloat();\r\n                        case LESSER:    return left.getFloat() <  right.getFloat();\r\n                        case LES_EQU:   return left.getFloat() <= right.getFloat();\r\n                        case UNEQUALS:  return left.getFloat() != right.getFloat();\r\n                        case BETWEEN:\r\n                                        float _left = left.getFloat();\r\n                                        return _left >= right.getFloat() && right2.getFloat() >= _left;\r\n                        default:\r\n                        \treturn getFloat() != 0;\r\n                    }\r\n            case SQLTokenizer.FLOAT:\r\n            case SQLTokenizer.DOUBLE:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getDouble() == right.getDouble();\r\n                        case GREATER:   return left.getDouble() >  right.getDouble();\r\n                        case GRE_EQU:   return left.getDouble() >= right.getDouble();\r\n                        case LESSER:    return left.getDouble() <  right.getDouble();\r\n                        case LES_EQU:   return left.getDouble() <= right.getDouble();\r\n                        case UNEQUALS:  return left.getDouble() != right.getDouble();\r\n                        case BETWEEN:\r\n                                        double _left = left.getDouble();\r\n                                        return _left >= right.getDouble() && right2.getDouble() >= _left;\r\n                        default:\r\n                        \treturn getDouble() != 0;\r\n                    }\r\n            case SQLTokenizer.MONEY:\r\n            case SQLTokenizer.SMALLMONEY:\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return left.getMoney() == right.getMoney();\r\n                        case GREATER:   return left.getMoney() >  right.getMoney();\r\n                        case GRE_EQU:   return left.getMoney() >= right.getMoney();\r\n                        case LESSER:    return left.getMoney() <  right.getMoney();\r\n                        case LES_EQU:   return left.getMoney() <= right.getMoney();\r\n                        case UNEQUALS:  return left.getMoney() != right.getMoney();\r\n                        case BETWEEN:\r\n                                        long _left = left.getMoney();\r\n                                        return _left >= right.getMoney() && right2.getMoney() >= _left;\r\n                        default:\r\n                        \treturn getMoney() != 0;\r\n                    }\r\n            case SQLTokenizer.DECIMAL:\r\n\t\t\tcase SQLTokenizer.NUMERIC:{\r\n\t\t\t\t\tif(operation == NEGATIVE)\r\n\t\t\t\t\t\treturn left.getNumeric().getSignum() != 0;\r\n\t\t\t\t\tint comp = left.getNumeric().compareTo( right.getNumeric() );\r\n\t\t\t\t\tswitch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n\t\t\t\t\t\tcase EQUALS:    return comp == 0;\r\n\t\t\t\t\t\tcase GREATER:   return comp >  0;\r\n\t\t\t\t\t\tcase GRE_EQU:   return comp >= 0;\r\n\t\t\t\t\t\tcase LESSER:    return comp <  0;\r\n\t\t\t\t\t\tcase LES_EQU:   return comp <= 0;\r\n\t\t\t\t\t\tcase UNEQUALS:  return comp != 0;\r\n\t\t\t\t\t\tcase BETWEEN:\r\n\t\t\t\t\t\t\t\t\t\treturn comp >= 0 && 0 >= left.getNumeric().compareTo( right2.getNumeric() );\r\n                        default:\r\n                        \treturn getNumeric().getSignum() != 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n            case SQLTokenizer.VARCHAR:\r\n            case SQLTokenizer.NVARCHAR:\r\n            case SQLTokenizer.CHAR:\r\n            case SQLTokenizer.NCHAR:\r\n            case SQLTokenizer.LONGVARCHAR:\r\n            case SQLTokenizer.LONGNVARCHAR:\r\n            case SQLTokenizer.CLOB:{\r\n                    final String leftStr = left.getString();\r\n                    final String rightStr = right.getString();\r\n                    int comp = String.CASE_INSENSITIVE_ORDER.compare( leftStr, rightStr );\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return comp == 0;\r\n                        case GREATER:   return comp >  0;\r\n                        case GRE_EQU:   return comp >= 0;\r\n                        case LESSER:    return comp <  0;\r\n                        case LES_EQU:   return comp <= 0;\r\n                        case UNEQUALS:  return comp != 0;\r\n                        case BETWEEN:\r\n                                        return comp >= 0 && 0 >= String.CASE_INSENSITIVE_ORDER.compare( leftStr, right2.getString() );\r\n                        case ADD:       return Utils.string2boolean(leftStr + rightStr);\r\n                    }\r\n                    break;}\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n            case SQLTokenizer.LONGVARBINARY:\r\n            case SQLTokenizer.BLOB:\r\n\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:{\r\n                    byte[] leftBytes = left.getBytes();\r\n                    byte[] rightBytes= right.getBytes();\r\n                    int comp = Utils.compareBytes( leftBytes, rightBytes);\r\n                    switch(operation){\r\n\t\t\t\t\t\tcase IN:\r\n\t\t\t\t\t\tcase EQUALS_NULL:\r\n                        case EQUALS:    return comp == 0;\r\n                        case GREATER:   return comp >  0;\r\n                        case GRE_EQU:   return comp >= 0;\r\n                        case LESSER:    return comp <  0;\r\n                        case LES_EQU:   return comp <= 0;\r\n                        case UNEQUALS:  return comp != 0;\r\n                        case BETWEEN:\r\n                                        return comp >= 0 && 0 >= Utils.compareBytes( leftBytes, right2.getBytes() );\r\n                    }\r\n                    break;}\r\n        }\r\n        throw createUnspportedDataType();\r\n    }\r\n    \r\n    \r\n    String getString() throws java.lang.Exception {\r\n        if(isNull()) return null;\r\n        return getObject().toString();\r\n    }\r\n    \r\n    \r\n    final private String getString( String lVal, String rVal ) throws java.lang.Exception {\r\n        switch(operation){\r\n            case ADD: return lVal + rVal;\r\n        }\r\n        throw createUnspportedConversion( SQLTokenizer.VARCHAR );\r\n    }\r\n\r\n    \r\n    int getDataType() {\r\n        switch(operation){\r\n            case NEGATIVE:\r\n            case BIT_NOT:\r\n            \treturn left.getDataType();\r\n\t\t\tcase EQUALS:\r\n\t\t\tcase EQUALS_NULL:\r\n\t\t\tcase GREATER:\r\n\t\t\tcase GRE_EQU:\r\n\t\t\tcase LESSER:\r\n\t\t\tcase LES_EQU:\r\n\t\t\tcase UNEQUALS:\r\n\t\t\tcase BETWEEN:\r\n\t\t\tcase OR:\r\n\t\t\tcase AND:\r\n\t\t\tcase NOT:\r\n\t\t\tcase LIKE:\r\n\t\t\tcase ISNULL:\r\n\t\t\tcase ISNOTNULL:\r\n\t\t\t \treturn SQLTokenizer.BOOLEAN;\r\n            default:\r\n            \treturn getDataType(left, right);\r\n        }\r\n    }\r\n\t\r\n\t\r\n\tint getScale(){\r\n\t\tint dataType = getDataType();\r\n\t\tswitch(dataType){\r\n\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\t\tswitch(operation){\r\n\t\t\t\t\tcase ADD:\r\n\t\t\t\t\tcase SUB:\r\n\t\t\t\t\t\treturn Math.max(left.getScale(), right.getScale());\r\n\t\t\t\t\tcase MUL:\r\n\t\t\t\t\t\treturn left.getScale() + right.getScale();\r\n\t\t\t\t\tcase DIV:\r\n\t\t\t\t\t\treturn Math.max(left.getScale()+5, right.getScale()+4);\r\n\t\t\t\t\tcase NEGATIVE:\r\n\t\t\t\t\t\treturn left.getScale();\r\n\t\t\t\t\tcase MOD:\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t}\r\n\t\treturn getScale(dataType);\r\n\t}\r\n\r\n    \r\n    boolean isNull() throws Exception{\r\n        switch(operation){\r\n\t        case OR:\r\n\t        case AND:\r\n\t        case NOT:\r\n\t        case LIKE:\r\n\t        case ISNULL:\r\n\t\t\tcase ISNOTNULL:\r\n\t\t\tcase IN:\r\n\t\t\t\t\t\t\treturn false; //Boolean operations return ever a result ???, but at least ISNULL and ISNOTNULL\r\n            case NEGATIVE: \r\n            case BIT_NOT:\r\n                           return                  left.isNull();\r\n            default:       return left.isNull() || right.isNull();\r\n        }\r\n    }\r\n\r\n\r\n    byte[] getBytes() throws java.lang.Exception {\r\n        throw createUnspportedConversion( SQLTokenizer.BINARY );\r\n    }\r\n    \r\n    \r\n    boolean isInList() throws Exception{\r\n    \tif(left.isNull()) return false;\r\n    \ttry{\r\n\t    \tfor(int i=0; i<inList.length; i++){\r\n\t    \t\tright = inList[i];\r\n\t    \t\tif(getBoolean()) return true;\r\n\t    \t}\r\n    \t}finally{\r\n    \t\tright = null;\r\n    \t}\r\n    \treturn false;\r\n    }\r\n\r\n    \r\n    SQLException createUnspportedDataType(){\r\n    \tObject[] params = {\r\n    \t\t\tSQLTokenizer.getKeyWord(getDataType(left, right)),\r\n    \t\t\tgetKeywordFromOperation(operation)\r\n    \t};\r\n        return SmallSQLException.create(Language.UNSUPPORTED_DATATYPE_OPER, params);\r\n    }\r\n\r\n    \r\n    SQLException createUnspportedConversion( int dataType ){\r\n        int type = left == null ? right.getDataType() : getDataType(left, right);\r\n        Object[] params = new Object[] {\r\n        \t\tSQLTokenizer.getKeyWord(dataType),\r\n        \t\tSQLTokenizer.getKeyWord(type),\r\n        \t\tgetKeywordFromOperation(operation)\r\n        };\r\n        return SmallSQLException.create(Language.UNSUPPORTED_CONVERSION_OPER, params);\r\n    }\r\n    \r\n    \r\n    void optimize() throws SQLException{\r\n        super.optimize();\r\n        Expression[] params = getParams();\r\n        if(params.length == 1){\r\n            return;\r\n        }\r\n        setParamAt( convertExpressionIfNeeded( params[0], params[1] ), 0 );\r\n        \r\n        for(int p=1; p<params.length; p++){\r\n            setParamAt( convertExpressionIfNeeded( params[p], left ), p );\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * This method only for creating an error message. Thats there is no optimizing.\r\n     * @param value\r\n     * @return\r\n     */\r\n    private static String getKeywordFromOperation(int operation){\r\n    \tint token = 0;\r\n    \tfor(int i=1; i<1000; i++){\r\n    \t\tif(getOperationFromToken(i) == operation){\r\n\t\t\t\ttoken = i;\r\n\t\t\t\tbreak;\r\n    \t\t}\r\n    \t}\r\n    \tif(operation == NEGATIVE)  token = SQLTokenizer.MINUS;\r\n    \tif(operation == ISNOTNULL) token =  SQLTokenizer.IS;\r\n    \tString keyword = SQLTokenizer.getKeyWord(token);\r\n    \tif(keyword == null) keyword = \"\" + (char)token;\r\n    \treturn keyword;\r\n    }\r\n\r\n    \r\n    static int getOperationFromToken( int value ){\r\n        switch(value){\r\n            case SQLTokenizer.PLUS:         return ADD;\r\n            case SQLTokenizer.MINUS:        return SUB;\r\n            case SQLTokenizer.ASTERISK:     return MUL;\r\n            case SQLTokenizer.SLACH:        return DIV;\r\n            case SQLTokenizer.PERCENT:      return MOD;\r\n            case SQLTokenizer.EQUALS:       return EQUALS;\r\n            case SQLTokenizer.GREATER:      return GREATER;\r\n            case SQLTokenizer.GREATER_EQU:  return GRE_EQU;\r\n            case SQLTokenizer.LESSER:       return LESSER;\r\n            case SQLTokenizer.LESSER_EQU:   return LES_EQU;\r\n            case SQLTokenizer.UNEQUALS:     return UNEQUALS;\r\n            case SQLTokenizer.BETWEEN:      return BETWEEN;\r\n            case SQLTokenizer.LIKE:         return LIKE;\r\n            case SQLTokenizer.IN:           return IN;\r\n\t\t\tcase SQLTokenizer.IS:           return ISNULL;\r\n            case SQLTokenizer.OR:           return OR;\r\n            case SQLTokenizer.AND:          return AND;\r\n            case SQLTokenizer.NOT:          return NOT;\r\n            case SQLTokenizer.BIT_OR:       return BIT_OR;\r\n            case SQLTokenizer.BIT_AND:      return BIT_AND;\r\n            case SQLTokenizer.BIT_XOR:      return BIT_XOR;\r\n            case SQLTokenizer.TILDE:        return BIT_NOT;\r\n            default:                        return 0;\r\n        }\r\n    }\r\n    \r\n    \r\n\t/**\r\n\t * Returns the higher level data type from 2 expressions. \r\n\t */\r\n    static int getDataType(Expression left, Expression right){\r\n\t\tint typeLeft  = left.getDataType();\r\n\t\tint typeRight = right.getDataType();\r\n\t\treturn getDataType( typeLeft, typeRight);\r\n    }\r\n    \r\n\r\n\t/**\r\n\t * Return the best data type for a complex number operation. This method return only \r\n\t * SQLTokenizer.INT,\r\n\t * SQLTokenizer.BIGINT,\r\n\t * SQLTokenizer.MONEY,\r\n\t * SQLTokenizer.DECIMAL or\r\n\t * SQLTokenizer.DOUBLE.\r\n\t * @param paramDataType\r\n\t */\r\n\tstatic int getBestNumberDataType(int paramDataType){\r\n\t\tint dataTypeIdx = Utils.indexOf( paramDataType, DatatypeRange);\r\n\t\tif(dataTypeIdx >= NVARCHAR_IDX)\r\n\t\t\treturn SQLTokenizer.DOUBLE;\r\n\t\tif(dataTypeIdx >= INT_IDX)\r\n\t\t\treturn SQLTokenizer.INT;\r\n\t\tif(dataTypeIdx >= BIGINT_IDX)\r\n\t\t\treturn SQLTokenizer.BIGINT;\r\n\t\tif(dataTypeIdx >= MONEY_IDX)\r\n\t\t\treturn SQLTokenizer.MONEY;\r\n\t\tif(dataTypeIdx >= DECIMAL_IDX)\r\n\t\t\treturn SQLTokenizer.DECIMAL;\r\n\t\treturn SQLTokenizer.DOUBLE;\r\n\t}\r\n\t\r\n    /**\r\n     * Returns the higher level data type from 2 data types. \r\n     */\r\n\tstatic int getDataType(int typeLeft, int typeRight){\r\n\t\tif(typeLeft == typeRight) return typeLeft;\r\n\r\n\t\tint dataTypeIdx = Math.min( Utils.indexOf( typeLeft, DatatypeRange), Utils.indexOf( typeRight, DatatypeRange) );\r\n\t\tif(dataTypeIdx < 0) throw new Error(\"getDataType(): \"+typeLeft+\", \"+typeRight);\r\n\t\treturn DatatypeRange[ dataTypeIdx ];\r\n    }\r\n\t\r\n\r\n    // value decade is the operation order\r\n    static final int OR         = 11; // OR\r\n    static final int AND        = 21; // AND\r\n    static final int NOT        = 31; // NOT\r\n    static final int BIT_OR     = 41; // |\r\n    static final int BIT_AND    = 42; // &\r\n    static final int BIT_XOR    = 43; // ^\r\n    static final int EQUALS     = 51; // =\r\n\tstatic final int EQUALS_NULL= 52; // like Equals but (null = null) --> true \r\n    static final int GREATER    = 53; // >\r\n    static final int GRE_EQU    = 54; // >=\r\n    static final int LESSER     = 55; // <\r\n    static final int LES_EQU    = 56; // <=\r\n    static final int UNEQUALS   = 57; // <>\r\n\tstatic final int IN         = 61; // IN\r\n\tstatic final int BETWEEN    = 62; // BETWEEN\r\n\tstatic final int LIKE       = 63; // LIKE\r\n\tstatic final int ISNULL     = 64; // IS NULL\r\n\tstatic final int ISNOTNULL  = ISNULL+1; // IS NOT NULL \r\n    static final int ADD        = 71; // +\r\n    static final int SUB        = 72; // -\r\n    static final int MUL        = 81; // *\r\n    static final int DIV        = 82; // /\r\n    static final int MOD        = 83; // %\r\n    static final int BIT_NOT    = 91; // ~\r\n    static final int NEGATIVE   =101; // -\r\n\r\n    private static final int[] DatatypeRange = {\r\n        SQLTokenizer.TIMESTAMP,\r\n        SQLTokenizer.SMALLDATETIME,\r\n\t\tSQLTokenizer.DATE,\r\n\t\tSQLTokenizer.TIME,\r\n        SQLTokenizer.DOUBLE,\r\n        SQLTokenizer.FLOAT,\r\n        SQLTokenizer.REAL,\r\n        SQLTokenizer.DECIMAL,\r\n        SQLTokenizer.NUMERIC,\r\n        SQLTokenizer.MONEY,\r\n        SQLTokenizer.SMALLMONEY,\r\n        SQLTokenizer.BIGINT,\r\n        SQLTokenizer.INT,\r\n        SQLTokenizer.SMALLINT,\r\n        SQLTokenizer.TINYINT,\r\n        SQLTokenizer.BIT,\r\n        SQLTokenizer.BOOLEAN,\r\n        SQLTokenizer.LONGNVARCHAR,\r\n        SQLTokenizer.UNIQUEIDENTIFIER,\r\n        SQLTokenizer.NVARCHAR,\r\n        SQLTokenizer.NCHAR,\r\n        SQLTokenizer.VARCHAR,\r\n        SQLTokenizer.CHAR,\r\n\t\tSQLTokenizer.LONGVARCHAR,\r\n        SQLTokenizer.CLOB,\r\n        SQLTokenizer.VARBINARY,\r\n        SQLTokenizer.BINARY,\r\n        SQLTokenizer.LONGVARBINARY,\r\n        SQLTokenizer.BLOB,\r\n    \tSQLTokenizer.NULL};\r\n\r\n\t\r\n\tprivate static int NVARCHAR_IDX = Utils.indexOf( SQLTokenizer.NVARCHAR, DatatypeRange);\r\n\tprivate static int INT_IDX = Utils.indexOf( SQLTokenizer.INT, DatatypeRange);\r\n\tprivate static int BIGINT_IDX = Utils.indexOf( SQLTokenizer.BIGINT, DatatypeRange);\r\n\tprivate static int MONEY_IDX = Utils.indexOf( SQLTokenizer.MONEY, DatatypeRange);\r\n\tprivate static int DECIMAL_IDX = Utils.indexOf( SQLTokenizer.DECIMAL, DatatypeRange);\r\n}"},{"path":"/src/smallsql/database/MemoryStream.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2011, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * MemoryStream.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\nimport java.io.*;\r\nimport java.nio.ByteBuffer;\r\nimport java.nio.channels.FileChannel;\r\n\r\n/**\r\n * @author Volker Berlin\r\n *\r\n */\r\nclass MemoryStream {\r\n\tprivate byte[] puffer;\r\n\tprivate int offset;\r\n\t\r\n\tMemoryStream(){\r\n\t\tpuffer = new byte[256];\r\n\t}\r\n\t\r\n\tvoid writeTo(FileChannel file) throws IOException{\r\n\t    ByteBuffer buffer = ByteBuffer.wrap( puffer, 0, offset );\r\n\t\tfile.write(buffer);\r\n\t}\r\n\t\r\n\tvoid writeByte(int value){\r\n\t\tverifyFreePufferSize(1);\r\n\t\tpuffer[ offset++ ] = (byte)(value);\r\n\t}\r\n\t\r\n\tvoid writeShort(int value){\r\n\t\tverifyFreePufferSize(2);\r\n\t\tpuffer[ offset++ ] = (byte)(value >> 8);\r\n\t\tpuffer[ offset++ ] = (byte)(value);\r\n\t}\r\n\t\r\n\tvoid writeInt(int value){\r\n\t\tverifyFreePufferSize(4);\r\n\t\tpuffer[ offset++ ] = (byte)(value >> 24);\r\n\t\tpuffer[ offset++ ] = (byte)(value >> 16);\r\n\t\tpuffer[ offset++ ] = (byte)(value >> 8);\r\n\t\tpuffer[ offset++ ] = (byte)(value);\r\n\t}\r\n\t\r\n\tvoid writeLong(long value){\r\n\t\tverifyFreePufferSize(8);\r\n\t\tpuffer[ offset++ ] = (byte)(value >> 56);\r\n\t\tpuffer[ offset++ ] = (byte)(value >> 48);\r\n\t\tpuffer[ offset++ ] = (byte)(value >> 40);\r\n\t\tpuffer[ offset++ ] = (byte)(value >> 32);\r\n\t\tpuffer[ offset++ ] = (byte)(value >> 24);\r\n\t\tpuffer[ offset++ ] = (byte)(value >> 16);\r\n\t\tpuffer[ offset++ ] = (byte)(value >> 8);\r\n\t\tpuffer[ offset++ ] = (byte)(value);\r\n\t}\r\n\t\r\n\tvoid writeChars(char[] value){\r\n\t\tverifyFreePufferSize(2*value.length);\r\n\t\tfor(int i=0; i<value.length; i++){\r\n\t\t\tchar c = value[i];\r\n\t\t\tpuffer[ offset++ ] = (byte)(c >> 8);\r\n\t\t\tpuffer[ offset++ ] = (byte)(c);\r\n\t\t}\r\n\t}\r\n\t\r\n\tvoid writeBytes(byte[] value, int off, int length){\r\n\t\tverifyFreePufferSize(length);\r\n\t\tSystem.arraycopy(value, off, puffer, offset, length);\r\n\t\toffset += length;\r\n\t}\r\n\t\r\n\tprivate void verifyFreePufferSize(int freeSize){\r\n\t\tint minSize = offset+freeSize;\r\n\t\tif(minSize < puffer.length){\r\n\t\t\tint newSize = puffer.length << 1;\r\n\t\t\tif(newSize < minSize) newSize = minSize;\r\n\t\t\tbyte[] temp = new byte[newSize];\r\n\t\t\tSystem.arraycopy(puffer, 0, temp, 0, offset);\r\n\t\t\tpuffer = temp;\r\n\t\t}\r\n\t}\r\n    \r\n    \r\n    void skip(int count){\r\n        offset += count;\r\n    }\r\n\t\r\n\t\r\n\tint readByte(){\r\n\t\treturn puffer[ offset++ ];\r\n\t}\r\n\t\r\n\r\n\tint readShort(){\r\n\t\treturn ((puffer[ offset++ ] & 0xFF) << 8) | (puffer[ offset++ ] & 0xFF);\r\n\t}\r\n\t\r\n\r\n\tint readInt(){\r\n\t\treturn ((puffer[ offset++ ] & 0xFF) << 24)\r\n\t\t\t | ((puffer[ offset++ ] & 0xFF) << 16)\r\n\t\t\t | ((puffer[ offset++ ] & 0xFF) << 8)\r\n\t\t\t |  (puffer[ offset++ ] & 0xFF);\r\n\t}\r\n\t\r\n\r\n\tlong readLong(){\r\n\t\treturn (((long)(puffer[ offset++ ] & 0xFF)) << 56)\r\n\t\t\t | (((long)(puffer[ offset++ ] & 0xFF)) << 48)\r\n\t\t\t | (((long)(puffer[ offset++ ] & 0xFF)) << 40)\r\n\t\t\t | (((long)(puffer[ offset++ ] & 0xFF)) << 32)\r\n\t\t\t | ((puffer[ offset++ ] & 0xFF) << 24)\r\n\t\t\t | ((puffer[ offset++ ] & 0xFF) << 16)\r\n\t\t\t | ((puffer[ offset++ ] & 0xFF) << 8)\r\n\t\t\t |  (puffer[ offset++ ] & 0xFF);\r\n\t}\r\n\t\r\n\r\n\tchar[] readChars(int length){\r\n\t\tchar[] chars = new char[length];\r\n\t\tfor(int i=0; i<length; i++){\r\n\t\t\tchars[i] = (char)readShort();\r\n\t\t}\r\n\t\treturn chars;\r\n\t}\r\n\t\r\n\tbyte[] readBytes(int length){\r\n\t\tbyte[] bytes = new byte[length];\r\n\t\tSystem.arraycopy(puffer, offset, bytes, 0, length);\r\n\t\toffset += length;\r\n\t\treturn bytes;\r\n\t}\r\n}\r\n"},{"path":"/src/smallsql/database/SQLParser.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * SQLParser.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\nimport java.util.List;\r\nimport java.sql.*;\r\nimport smallsql.database.language.Language;\r\n\r\nfinal class SQLParser {\r\n\r\n\tSSConnection con;\r\n\tprivate char[] sql;\r\n    private List tokens;\r\n    private int tokenIdx;\r\n\r\n    Command parse(SSConnection con, String sqlString) throws SQLException{\r\n    \tthis.con = con;\r\n        Command cmd = parse( sqlString.toCharArray() );\r\n        SQLToken token = nextToken();\r\n        if(token != null){\r\n        \tthrow createSyntaxError(token, Language.STXADD_ADDITIONAL_TOK);\r\n        }\r\n        return cmd;\r\n    }\r\n    \r\n    final private Command parse(char[] sql) throws SQLException{\r\n        this.sql = sql;\r\n        this.tokens = SQLTokenizer.parseSQL( sql );\r\n        tokenIdx = 0;\r\n\r\n        SQLToken token = nextToken(COMMANDS);\r\n        switch (token.value){\r\n            case SQLTokenizer.SELECT:\r\n                    return select();\r\n            case SQLTokenizer.DELETE:\r\n                    return delete();\r\n            case SQLTokenizer.INSERT:\r\n                    return insert();\r\n            case SQLTokenizer.UPDATE:\r\n                    return update();\r\n            case SQLTokenizer.CREATE:\r\n                    return create();\r\n            case SQLTokenizer.DROP:\r\n                    return drop();\r\n            case SQLTokenizer.ALTER:\r\n                    return alter();\r\n            case SQLTokenizer.SET:\r\n                    return set();\r\n\t\t\tcase SQLTokenizer.USE:\r\n\t\t\t\t\ttoken = nextToken(MISSING_EXPRESSION);\r\n\t\t\t\t\tString name = token.getName( sql );\r\n\t\t\t\t\tcheckValidIdentifier( name, token );\r\n\t\t\t\t\tCommandSet set = new CommandSet( con.log, SQLTokenizer.USE);\r\n\t\t\t\t\tset.name = name;\r\n\t\t\t\t\treturn set;\r\n            case SQLTokenizer.EXECUTE:\r\n                    return execute();\r\n            case SQLTokenizer.TRUNCATE:\r\n            \t\treturn truncate();\r\n            default:\r\n                    throw new Error();\r\n        }\r\n    }\r\n    \r\n    \r\n    Expression parseExpression(String expr) throws SQLException{\r\n\t\tthis.sql = expr.toCharArray();\r\n\t\tthis.tokens = SQLTokenizer.parseSQL( sql );\r\n\t\ttokenIdx = 0;\r\n    \treturn expression( null, 0);\r\n    }\r\n\r\n    /**\r\n\t * Create a syntax error message, using a custom message.\r\n\t * \r\n\t * @param token\r\n\t *            token object; if not null, generates a SYNTAX_BASE_OFS,\r\n\t *            otherwise a SYNTAX_BASE_END.\r\n\t * @param addMessage\r\n\t *            additional message object to append.\r\n\t */\r\n    private SQLException createSyntaxError(SQLToken token, String addMessageCode) {\r\n    \tString message = getErrorString(token, addMessageCode, null);\r\n    \treturn SmallSQLException.create(Language.CUSTOM_MESSAGE, message);\r\n    }\r\n    \r\n    /**\r\n\t * Create a syntax error message, using a message with a parameter.\r\n\t * \r\n\t * @param token\r\n\t *            token object; if not null, generates a SYNTAX_BASE_OFS,\r\n\t *            otherwise a SYNTAX_BASE_END.\r\n\t * @param addMessageCode\r\n\t *            additional message[Code] to append.\r\n\t * @param param0\r\n\t *            parameter.\r\n\t */\r\n    private SQLException createSyntaxError(SQLToken token, String addMessageCode, \r\n    \t\tObject param0) {\r\n    \tString message = getErrorString(token, addMessageCode, param0);\r\n    \treturn SmallSQLException.create(Language.CUSTOM_MESSAGE, message);\r\n    }\r\n    \r\n    /**\r\n\t * Create an \"Additional keyword required\" syntax error.\r\n\t * \r\n\t * @param token\r\n\t *            token object.\r\n\t * @param validValues\r\n\t *            valid values.\r\n\t * @return Exception.\r\n\t */\r\n    private SQLException createSyntaxError(SQLToken token, int[] validValues){\r\n    \tString msgStr = SmallSQLException.translateMsg(\r\n    \t\t\tLanguage.STXADD_KEYS_REQUIRED, new Object[] { });\r\n    \t\r\n    \tStringBuffer msgBuf = new StringBuffer( msgStr );\r\n\r\n        for(int i=0; i<validValues.length; i++){\r\n            String name = SQLTokenizer.getKeyWord(validValues[i]);\r\n            if(name == null) name = String.valueOf( (char)validValues[i] );\r\n            msgBuf.append( name );\r\n            if (i < validValues.length - 2)\r\n                msgBuf.append( \", \");\r\n            else\r\n            if ( i == validValues.length - 2 )\r\n                msgBuf.append( \" or \");\r\n        }\r\n\r\n    \tString message = getErrorString(\r\n    \t\t\ttoken, Language.CUSTOM_MESSAGE, msgBuf);\r\n    \treturn SmallSQLException.create(Language.CUSTOM_MESSAGE, message);\r\n    }\r\n\r\n    /**\r\n\t * Create the complete error string (begin + middle + end).\r\n\t * \r\n\t * @param token\r\n\t *            token object.\r\n\t * @param middleMsgCode\r\n\t *            middle message[code].\r\n\t * @param middleMsgParam\r\n\t *            middle message[code] parameter.\r\n\t * @return complete error message string.\r\n\t */\r\n    private String getErrorString(SQLToken token, String middleMsgCode, \r\n    \t\tObject middleMsgParam) {\r\n    \tStringBuffer buffer = new StringBuffer(1024);\r\n\r\n    \t/* begin */\r\n    \t\r\n        if(token != null){\r\n        \tObject[] params = { String.valueOf(token.offset),\r\n        \t\t\t\t\t\tString.valueOf(sql, token.offset, token.length) };\r\n        \tString begin = SmallSQLException.translateMsg(Language.SYNTAX_BASE_OFS, params);\r\n        \tbuffer.append(begin);\r\n        }\r\n        else{\r\n        \tString begin = SmallSQLException.translateMsg(\r\n        \t\t\tLanguage.SYNTAX_BASE_END, new Object[] { });\r\n        \tbuffer.append(begin);\r\n        }\r\n    \t\r\n    \t/* middle */\r\n    \t\r\n    \tString middle = SmallSQLException.translateMsg(\r\n    \t\t\tmiddleMsgCode, new Object[] { middleMsgParam });\r\n    \t\r\n    \tbuffer.append(middle);\r\n    \t\r\n    \t/* end */\r\n    \t\r\n        int valOffset = (token != null) ? token.offset : sql.length;\r\n        int valBegin = Math.max( 0, valOffset-40);\r\n        int valEnd   = Math.min( valOffset+20, sql.length );\r\n        String lineSeparator = System.getProperty( \"line.separator\" );\r\n        buffer.append( lineSeparator );\r\n        buffer.append( sql, valBegin, valEnd-valBegin);\r\n        buffer.append( lineSeparator );\r\n        for(; valBegin<valOffset; valBegin++) buffer.append(' ');\r\n        buffer.append('^');\r\n    \t\r\n    \treturn buffer.toString();    \t\r\n    }\r\n    \r\n    private void checkValidIdentifier(String name, SQLToken token) throws SQLException{\r\n        if(token.value == SQLTokenizer.ASTERISK) return;\r\n        if(token.value != SQLTokenizer.VALUE &&\r\n\t\t   token.value != SQLTokenizer.IDENTIFIER &&\r\n           token.value < 200){\r\n            throw createSyntaxError( token, Language.STXADD_IDENT_EXPECT);\r\n        }\r\n        if(name.length() == 0) {\r\n            throw createSyntaxError( token, Language.STXADD_IDENT_EMPTY, name);\r\n        }\r\n        char firstChar = name.charAt(0);\r\n\t\tif(firstChar != '#' && firstChar < '@') {\r\n\t\t\tthrow createSyntaxError( token, Language.STXADD_IDENT_WRONG, name );\r\n\t\t}\r\n    }\r\n    \r\n\t/**\r\n     * Returns a valid identifier from this token.\r\n     * @param token the token of the identifier\r\n     * @return the string with the name\r\n     * @throws SQLException if the identifier is invalid\r\n     */\r\n    private String getIdentifier(SQLToken token) throws SQLException{\r\n    \tString name = token.getName(sql);\r\n    \tcheckValidIdentifier( name, token );\r\n    \treturn name;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Returns a valid identifier from the next token from token stack.\r\n     * @return the string with the name\r\n     * @throws SQLException if the identifier is invalid\r\n     */\r\n    private String nextIdentifier() throws SQLException{\r\n    \treturn getIdentifier( nextToken( MISSING_IDENTIFIER ) );\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Check if the identifier is a 2 part name with a point in the middle like FIRST.SECOND\r\n     * @param name the name of the first part\r\n     * @return the second part if exist else returns the first part\r\n     * @throws SQLException \r\n     */\r\n    private String nextIdentiferPart(String name) throws SQLException{\r\n        SQLToken token = nextToken();\r\n        //check if the object name include a database name\r\n        if(token != null && token.value == SQLTokenizer.POINT){\r\n            return nextIdentifier();\r\n        }else{\r\n            previousToken();\r\n        }\r\n        return name;\r\n    }\r\n    \r\n    \r\n    final private boolean isKeyword(SQLToken token){\r\n    \tif(token == null) return false;\r\n    \tswitch(token.value){\r\n    \t\tcase SQLTokenizer.SELECT:\r\n    \t\tcase SQLTokenizer.INSERT:\r\n    \t\tcase SQLTokenizer.UPDATE:\r\n    \t\tcase SQLTokenizer.UNION:\r\n    \t\tcase SQLTokenizer.FROM:\r\n    \t\tcase SQLTokenizer.WHERE:\r\n    \t\tcase SQLTokenizer.GROUP:\r\n    \t\tcase SQLTokenizer.HAVING:\r\n\t\t\tcase SQLTokenizer.ORDER:\r\n    \t\tcase SQLTokenizer.COMMA:\r\n\t\t\tcase SQLTokenizer.SET:\r\n            case SQLTokenizer.JOIN:\r\n            case SQLTokenizer.LIMIT:\r\n    \t\t\treturn true;\r\n    \t}\r\n    \treturn false;\r\n    }\r\n    \r\n\t/** \r\n\t * Return the last token that the method nextToken has return\r\n\t */\r\n\tprivate SQLToken lastToken(){\r\n\t\tif(tokenIdx > tokens.size()){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn (SQLToken)tokens.get( tokenIdx-1 );\r\n\t}\r\n    private void previousToken(){\r\n        tokenIdx--;\r\n    }\r\n\r\n    private SQLToken nextToken(){\r\n        if(tokenIdx >= tokens.size()){\r\n            tokenIdx++; // must be ever increment that the method previousToken() is working\r\n            return null;\r\n        }\r\n        return (SQLToken)tokens.get( tokenIdx++ );\r\n    }\r\n\r\n    private SQLToken nextToken( int[] validValues) throws SQLException{\r\n        SQLToken token = nextToken();\r\n        if(token == null) throw createSyntaxError( token, validValues);\r\n        if(validValues == MISSING_EXPRESSION){\r\n            return token; // an expression can be contained in every token.\r\n        }\r\n        if(validValues == MISSING_IDENTIFIER){\r\n            // the follow token are not valid identifier\r\n            switch(token.value){\r\n                case SQLTokenizer.PARENTHESIS_L:\r\n                case SQLTokenizer.PARENTHESIS_R:\r\n                case SQLTokenizer.COMMA:\r\n                    throw createSyntaxError( token, validValues);\r\n            }\r\n            return token;\r\n        }\r\n        for(int i=validValues.length-1; i>=0; i--){\r\n            if(token.value == validValues[i]) return token;\r\n        }\r\n        throw createSyntaxError( token, validValues);\r\n    }\r\n    \r\n\r\n    /**\r\n     * A single SELECT of a UNION or only a simple single SELECT.\r\n     * @return\r\n     * @throws SQLException\r\n     */\r\n    private CommandSelect singleSelect() throws SQLException{\r\n        CommandSelect selCmd = new CommandSelect(con.log);\r\n\t\tSQLToken token;\r\n        // scan for prefix like DISTINCT, ALL and the TOP clause; sample: SELECT TOP 15 ...\r\nSwitch: while(true){\r\n\t\t\ttoken = nextToken(MISSING_EXPRESSION);\r\n\t\t\tswitch(token.value){\r\n\t\t\t\tcase SQLTokenizer.TOP:\r\n\t\t\t\t\ttoken = nextToken(MISSING_EXPRESSION);\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tint maxRows = Integer.parseInt(token.getName(sql));\r\n\t\t\t\t\t\tselCmd.setMaxRows(maxRows);\r\n\t\t\t\t\t}catch(NumberFormatException e){\r\n\t\t\t\t\t\tthrow createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase SQLTokenizer.ALL:\r\n\t\t\t\t\tselCmd.setDistinct(false);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase SQLTokenizer.DISTINCT:\r\n\t\t\t\t\tselCmd.setDistinct(true);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tpreviousToken();\r\n\t\t\t\t\tbreak Switch;\r\n\t\t\t}\r\n\t\t}\r\n\r\n        while(true){\r\n            Expression column = expression(selCmd, 0);\r\n            selCmd.addColumnExpression( column );\r\n\r\n            token = nextToken();\r\n            if(token == null) return selCmd; // SELECT without FROM\r\n\r\n            boolean as = false;\r\n            if(token.value == SQLTokenizer.AS){\r\n                token = nextToken(MISSING_EXPRESSION);\r\n                as = true;\r\n            }\r\n\r\n            if(as || (!isKeyword(token))){\r\n            \tString alias = getIdentifier( token);\r\n                column.setAlias( alias );\r\n                token = nextToken();\r\n                if(token == null) return selCmd; // SELECT without FROM\r\n            }\r\n\r\n            switch(token.value){\r\n                case SQLTokenizer.COMMA:\r\n                        if(column == null) throw createSyntaxError( token, MISSING_EXPRESSION );\r\n                        column = null;\r\n                        break;\r\n                case SQLTokenizer.FROM:\r\n                        if(column == null) throw createSyntaxError( token, MISSING_EXPRESSION );\r\n                        column = null;\r\n                        from(selCmd);\r\n                        return selCmd;\r\n\r\n                default:\r\n                        if(!isKeyword(token))\r\n                \t\t\tthrow createSyntaxError( token, new int[]{SQLTokenizer.COMMA, SQLTokenizer.FROM} );\r\n                        previousToken();\r\n                        return selCmd;\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    final private CommandSelect select() throws SQLException{\r\n\t\tCommandSelect selCmd = singleSelect();\r\n\t\tSQLToken token = nextToken();\r\n\t\t   \t\t\r\n    \tUnionAll union = null; \r\n\t\r\n\t\twhile(token != null && token.value == SQLTokenizer.UNION){\r\n\t\t\tif(union == null){\r\n\t\t\t\tunion = new UnionAll();\r\n\t\t\t\tunion.addDataSource(new ViewResult( con, selCmd ));\r\n\t\t\t\tselCmd = new CommandSelect(con.log);\r\n\t\t\t\tselCmd.setSource( union );\r\n\t\t\t\tDataSources from = new DataSources();\r\n\t\t\t\tfrom.add(union);\r\n\t\t\t\tselCmd.setTables( from );\r\n\t\t\t\tselCmd.addColumnExpression( new ExpressionName(\"*\") );\r\n\t\t\t}\r\n\t\t\tnextToken(MISSING_ALL);\r\n\t\t\tnextToken(MISSING_SELECT);\r\n\t\t\tunion.addDataSource( new ViewResult( con, singleSelect() ) );\r\n\t\t\ttoken = nextToken();\r\n\t\t}\r\n\t\tif(token != null && token.value == SQLTokenizer.ORDER){\r\n\t\t\torder( selCmd );\r\n\t\t\ttoken = nextToken();\r\n\t\t}\r\n\t\tif(token != null && token.value == SQLTokenizer.LIMIT){\r\n            limit( selCmd );\r\n            token = nextToken();\r\n        }\r\n        previousToken();\r\n\t\treturn selCmd;\r\n    }\r\n\r\n\r\n    private Command delete() throws SQLException{\r\n    \tCommandDelete cmd = new CommandDelete(con.log);\r\n    \tnextToken(MISSING_FROM);\r\n    \tfrom(cmd);\r\n\t\tSQLToken token = nextToken();\r\n\t\tif(token != null){\r\n\t\t\tif(token.value != SQLTokenizer.WHERE)\r\n\t\t\t\tthrow this.createSyntaxError(token, MISSING_WHERE);\r\n\t\t\twhere(cmd);\r\n\t\t}\r\n\t\treturn cmd;\r\n    }\r\n\r\n\r\n\tprivate Command truncate() throws SQLException{\r\n\t\tCommandDelete cmd = new CommandDelete(con.log);\r\n\t\tnextToken(MISSING_TABLE);\r\n\t\tfrom(cmd);\r\n\t\treturn cmd;\r\n\t}\r\n\r\n\r\n    private Command insert() throws SQLException{\r\n        SQLToken token = nextToken( MISSING_INTO );\r\n        CommandInsert cmd = new CommandInsert( con.log, nextIdentifier() );\r\n\r\n\t\tint parthesisCount = 0;\r\n\r\n\t\ttoken = nextToken(MISSING_PARENTHESIS_VALUES_SELECT);\r\n        if(token.value == SQLTokenizer.PARENTHESIS_L){\r\n        \ttoken = nextToken(MISSING_EXPRESSION);\r\n        \tif(token.value == SQLTokenizer.SELECT){\r\n\t\t\t\tparthesisCount++;\r\n\t\t\t\tcmd.noColumns = true;\r\n        \t}else{\r\n\t\t\t\tpreviousToken();\r\n\t            Expressions list = expressionParenthesisList(cmd);\r\n\t            for(int i=0; i<list.size(); i++){\r\n\t                cmd.addColumnExpression( list.get( i ) );\r\n\t            }\r\n\t            token = nextToken(MISSING_PARENTHESIS_VALUES_SELECT);\r\n        \t}\r\n        }else cmd.noColumns = true;\r\n        \r\nSwitch: while(true)\r\n        switch(token.value){\r\n        \tcase SQLTokenizer.VALUES:{\r\n\t            token = nextToken(MISSING_PARENTHESIS_L);\r\n\t            cmd.addValues( expressionParenthesisList(cmd) );\r\n\t            return cmd;\r\n\t        }\r\n        \tcase SQLTokenizer.SELECT:\r\n        \t\tcmd.addValues( select() );\r\n        \t\twhile(parthesisCount-- > 0){\r\n        \t\t\tnextToken(MISSING_PARENTHESIS_R);\r\n        \t\t}\r\n        \t\treturn cmd;\r\n        \tcase SQLTokenizer.PARENTHESIS_L:\r\n        \t\ttoken = nextToken(MISSING_PARENTHESIS_VALUES_SELECT);\r\n        \t\tparthesisCount++;\r\n        \t\tcontinue Switch;\r\n        \tdefault:\r\n        \t\tthrow new Error();\r\n        }\r\n    }\r\n\r\n\r\n    private Command update() throws SQLException{\r\n\t\tCommandUpdate cmd = new CommandUpdate(con.log);\r\n\t\t// read table name\r\n\t\tDataSources tables = new DataSources();\r\n\t\tcmd.setTables( tables );\r\n\t\tcmd.setSource( rowSource( cmd, tables, 0 ) );\r\n\t\t\r\n\t\tSQLToken token = nextToken(MISSING_SET);\r\n\t\twhile(true){\r\n\t\t\ttoken = nextToken();\r\n\t\t\tExpression dest = expressionSingle( cmd, token);\r\n\t\t\tif(dest.getType() != Expression.NAME) throw createSyntaxError( token, MISSING_IDENTIFIER );\r\n\t\t\tnextToken(MISSING_EQUALS);\r\n\t\t\tExpression src = expression(cmd, 0);\r\n\t\t\tcmd.addSetting( dest, src);\r\n\t\t\ttoken = nextToken();\r\n\t\t\tif(token == null) break;\r\n\t\t\tswitch(token.value){\r\n\t\t\t\tcase SQLTokenizer.WHERE:\r\n\t\t\t\t\twhere(cmd);\r\n\t\t\t\t\treturn cmd;\t\t\t\t\r\n\t\t\t\tcase SQLTokenizer.COMMA:\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tdefault: throw createSyntaxError( token, MISSING_WHERE_COMMA );\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn cmd;\r\n    }\r\n\r\n\r\n    private Command create() throws SQLException{\r\n        while(true){\r\n            SQLToken token = nextToken(COMMANDS_CREATE);\r\n            switch(token.value){\r\n                case SQLTokenizer.DATABASE:\r\n                    return createDatabase();\r\n                case SQLTokenizer.TABLE:\r\n                    return createTable();\r\n                case SQLTokenizer.VIEW:\r\n                    return createView();\r\n                case SQLTokenizer.INDEX:\r\n                    return createIndex(false);\r\n                case SQLTokenizer.PROCEDURE:\r\n                    return createProcedure();\r\n                case SQLTokenizer.UNIQUE:\r\n                    do{\r\n                        token = nextToken(COMMANDS_CREATE_UNIQUE);\r\n                    }while(token.value == SQLTokenizer.INDEX);\r\n                    return createIndex(true);\r\n                case SQLTokenizer.NONCLUSTERED:\r\n                case SQLTokenizer.CLUSTERED:\r\n                    continue;\r\n                default:\r\n                    throw createSyntaxError( token, COMMANDS_CREATE );\r\n            }\r\n        }\r\n    }\r\n\t\r\n\r\n    private CommandCreateDatabase createDatabase() throws SQLException{\r\n        SQLToken token = nextToken();\r\n        if(token == null) throw createSyntaxError( token, MISSING_EXPRESSION );\r\n        return new CommandCreateDatabase( con.log, token.getName(sql));\r\n    }\r\n\t\r\n    \r\n    private CommandTable createTable() throws SQLException{\r\n        String catalog;\r\n        String tableName = catalog = nextIdentifier();\r\n        tableName = nextIdentiferPart(tableName);\r\n        if(tableName == catalog) catalog = null;\r\n        CommandTable cmdCreate = new CommandTable( con.log, catalog, tableName, SQLTokenizer.CREATE );\r\n        SQLToken token = nextToken( MISSING_PARENTHESIS_L );\r\n\r\n        nextCol:\r\n        while(true){\r\n            token = nextToken( MISSING_EXPRESSION );\r\n\t\t\t\r\n\t\t\tString constraintName;\r\n            if(token.value == SQLTokenizer.CONSTRAINT){\r\n            \t// reading a CONSTRAINT with name\r\n\t\t    \tconstraintName = nextIdentifier();\r\n\t\t\t\ttoken = nextToken( MISSING_KEYTYPE );\r\n            }else{\r\n\t\t\t\tconstraintName = null;\r\n            }\r\n\t\t\tswitch(token.value){\r\n\t\t\t\tcase SQLTokenizer.PRIMARY:\r\n\t\t\t\tcase SQLTokenizer.UNIQUE:\r\n\t\t\t\tcase SQLTokenizer.FOREIGN:\r\n\t\t\t\t\tIndexDescription index = index(cmdCreate, token.value, tableName, constraintName, null);\r\n                    if(token.value == SQLTokenizer.FOREIGN){\r\n                        nextToken( MISSING_REFERENCES );\r\n                        String pk = nextIdentifier();\r\n                        Expressions expressions = new Expressions();\r\n                        Strings columns = new Strings();\r\n                        expressionDefList( cmdCreate, expressions, columns );\r\n                        IndexDescription pkIndex = new IndexDescription( null, pk, SQLTokenizer.UNIQUE, expressions, columns);\r\n                        ForeignKey foreignKey = new ForeignKey(pk, pkIndex, tableName, index);\r\n                        cmdCreate.addForeingnKey(foreignKey);\r\n                    }else{\r\n                        cmdCreate.addIndex( index );\r\n                    }\r\n\t\r\n\t\t\t\t\ttoken = nextToken( MISSING_COMMA_PARENTHESIS );\r\n\t\t\t\t\tswitch(token.value){\r\n\t\t\t\t\t\tcase SQLTokenizer.PARENTHESIS_R:\r\n\t\t\t\t\t\t\treturn cmdCreate;\r\n\t\t\t\t\t\tcase SQLTokenizer.COMMA:\r\n\t\t\t\t\t\t\tcontinue nextCol;\r\n\t\t\t\t\t}\r\n            }\r\n            // the token is a column name\r\n\t\t\ttoken = addColumn( token, cmdCreate );\r\n            if(token == null){\r\n                throw createSyntaxError(token, MISSING_COMMA_PARENTHESIS);\r\n            }\r\n            switch(token.value){\r\n                case SQLTokenizer.PARENTHESIS_R:\r\n                    return cmdCreate;\r\n                case SQLTokenizer.COMMA:\r\n                    continue nextCol;\r\n                default:\r\n                    throw createSyntaxError(token, MISSING_COMMA_PARENTHESIS);\r\n            }\r\n        }\r\n    }\r\n    \r\n\t\r\n    /**\r\n     * Parse a Column and add it to the Command. If the column is unique or primary\r\n     * then an index is added.\r\n     * @param token the SQLToken with the column name\r\n     * @return the token of the delimiter\r\n     */\r\n    private SQLToken addColumn(SQLToken token, CommandTable cmdCreate) throws SQLException{\r\n        String colName = getIdentifier( token );\r\n        Column col = datatype(false);\r\n        col.setName( colName );\r\n\r\n\t\ttoken = nextToken();\r\n        boolean nullableWasSet = false;\r\n        boolean defaultWasSet = col.isAutoIncrement(); // with data type COUNTER already this value is set\r\n        while(true){\r\n            if(token == null){\r\n                cmdCreate.addColumn( col );\r\n                return null;\r\n            }\r\n            switch(token.value){\r\n                case SQLTokenizer.PARENTHESIS_R:\r\n                case SQLTokenizer.COMMA:\r\n                    cmdCreate.addColumn( col );\r\n                    return token;\r\n                case SQLTokenizer.DEFAULT:\r\n                    if(defaultWasSet) throw createSyntaxError( token, MISSING_COMMA_PARENTHESIS );\r\n\t\t\t\t\tint offset = token.offset + token.length;\r\n                    token = nextToken();\r\n                    if(token != null) offset = token.offset;\r\n\t\t\t\t\tpreviousToken();                    \r\n\t\t\t\t\tExpression expr = expression(cmdCreate, 0);\r\n\t\t\t\t\tSQLToken last = lastToken();\r\n\t\t\t\t\tint length = last.offset + last.length - offset;\r\n\t\t\t\t\tString def = new String( sql, offset, length );\r\n                    col.setDefaultValue( expr, def );\r\n                    defaultWasSet = true;\r\n                    break;\r\n                case SQLTokenizer.IDENTITY:\r\n                    if(defaultWasSet) throw createSyntaxError( token, MISSING_COMMA_PARENTHESIS );\r\n                    col.setAutoIncrement(true);\r\n                    defaultWasSet = true;\r\n                    break;\r\n                case SQLTokenizer.NULL:\r\n                    if(nullableWasSet) throw createSyntaxError( token, MISSING_COMMA_PARENTHESIS );\r\n                    //col.setNullable(true); is already default\r\n                    nullableWasSet = true;\r\n                    break;\r\n                case SQLTokenizer.NOT:\r\n                    if(nullableWasSet) throw createSyntaxError( token, MISSING_COMMA_PARENTHESIS );\r\n                    token = nextToken( MISSING_NULL );\r\n                    col.setNullable(false);\r\n                    nullableWasSet = true;\r\n                    break;\r\n\t\t\t\tcase SQLTokenizer.PRIMARY:\r\n\t\t\t\tcase SQLTokenizer.UNIQUE:\r\n\t\t\t\t\tIndexDescription index = index(cmdCreate, token.value, cmdCreate.name, null, colName);\r\n\t\t\t\t\tcmdCreate.addIndex( index );\r\n\t\t\t\t\tbreak;\r\n                default:\r\n                    throw createSyntaxError(token, MISSING_OPTIONS_DATATYPE);\r\n            }\r\n            token = nextToken();\r\n        }\r\n    }\r\n    \r\n\r\n\t/**\r\n\t * Parse construct like:<br>\r\n\t * <li>PRIMARY KEY (col1)\r\n\t * <li>UNIQUE (col1, col2)\r\n\t * <li>FOREIGN KEY REFERENCES ref_table(col1)\r\n\t * @param cmd\r\n\t * @param constraintType one of SQLTokenizer.PRIMARY, SQLTokenizer.UNIQUE or SQLTokenizer.FOREIGN.\r\n\t * @param if it a constrain of the current column else null\r\n\t * @return a new IndexDescription\r\n\t */\r\n\tprivate IndexDescription index(Command cmd, int constraintType, String tableName, String contrainName, String columnName) throws SQLException{\r\n\t\tif(constraintType != SQLTokenizer.UNIQUE) nextToken( MISSING_KEY );\r\n\t\tSQLToken token = nextToken();\r\n        if(token != null){\r\n    \t\tswitch(token.value){\r\n    \t\t\tcase SQLTokenizer.CLUSTERED:\r\n    \t\t\tcase SQLTokenizer.NONCLUSTERED:\r\n    \t\t\t\t// ignoring, this tokens form MS SQL Server are ignored\r\n    \t\t\t\tbreak;\r\n                default:\r\n                    previousToken();\r\n    \t\t}\r\n        }else{\r\n            previousToken();\r\n        }\r\n\t\tStrings columns = new Strings();\r\n\t\tExpressions expressions = new Expressions();\r\n\t\tif(columnName != null){\r\n\t\t\t//Constraint for a single column together with the column definition\r\n\t\t\tcolumns.add(columnName);\r\n\t\t\texpressions.add(new ExpressionName(columnName));\r\n\t\t}else{\r\n\t\t\t//Constraint as addition definition\r\n            expressionDefList( cmd, expressions, columns );\r\n\t\t}\r\n\t\treturn new IndexDescription( contrainName, tableName, constraintType, expressions, columns);\r\n\t}\r\n\r\n\r\n    /**\r\n     * Read a DataTpe description. This is used for CREATE TABLE and CONVERT function. \r\n     * @param isEscape true then the data types start with \"SQL_\". This is used for the Escape Syntax.\r\n     */\r\n    private Column datatype(boolean isEscape) throws SQLException{\r\n\t\tSQLToken token;\r\n\t\tint dataType;\r\n\t\tif(isEscape){\r\n\t\t\ttoken = nextToken( MISSING_SQL_DATATYPE );\r\n\t\t\tswitch(token.value){\r\n\t\t\t\tcase SQLTokenizer.SQL_BIGINT: \t\t\tdataType = SQLTokenizer.BIGINT;\t\tbreak;\r\n\t\t\t\tcase SQLTokenizer.SQL_BINARY:\t\t\tdataType = SQLTokenizer.BINARY; \tbreak;\r\n\t\t\t\tcase SQLTokenizer.SQL_BIT:\t\t\t\tdataType = SQLTokenizer.BIT;\t\tbreak;\r\n\t\t\t\tcase SQLTokenizer.SQL_CHAR:\t\t\t\tdataType = SQLTokenizer.CHAR;\t\tbreak;\r\n\t\t\t\tcase SQLTokenizer.SQL_DATE:\t\t\t\tdataType = SQLTokenizer.DATE;\t\tbreak;\r\n\t\t\t\tcase SQLTokenizer.SQL_DECIMAL:\t\t\tdataType = SQLTokenizer.DECIMAL;\tbreak;\r\n\t\t\t\tcase SQLTokenizer.SQL_DOUBLE:\t\t\tdataType = SQLTokenizer.DOUBLE;\t\tbreak;\r\n\t\t\t\tcase SQLTokenizer.SQL_FLOAT:\t\t\tdataType = SQLTokenizer.FLOAT;\t\tbreak;\r\n\t\t\t\tcase SQLTokenizer.SQL_INTEGER:\t\t\tdataType = SQLTokenizer.INT;\t\tbreak;\r\n\t\t\t\tcase SQLTokenizer.SQL_LONGVARBINARY:\tdataType = SQLTokenizer.LONGVARBINARY;break;\r\n\t\t\t\tcase SQLTokenizer.SQL_LONGVARCHAR:\t\tdataType = SQLTokenizer.LONGVARCHAR;break;\r\n\t\t\t\tcase SQLTokenizer.SQL_REAL:\t\t\t\tdataType = SQLTokenizer.REAL;\t\tbreak;\r\n\t\t\t\tcase SQLTokenizer.SQL_SMALLINT:\t\t\tdataType = SQLTokenizer.SMALLINT;\tbreak;\r\n\t\t\t\tcase SQLTokenizer.SQL_TIME:\t\t\t\tdataType = SQLTokenizer.TIME;\t\tbreak;\r\n\t\t\t\tcase SQLTokenizer.SQL_TIMESTAMP:\t\tdataType = SQLTokenizer.TIMESTAMP;\tbreak;\r\n\t\t\t\tcase SQLTokenizer.SQL_TINYINT:\t\t\tdataType = SQLTokenizer.TINYINT;\tbreak;\r\n\t\t\t\tcase SQLTokenizer.SQL_VARBINARY:\t\tdataType = SQLTokenizer.VARBINARY;\tbreak;\r\n\t\t\t\tcase SQLTokenizer.SQL_VARCHAR:\t\t\tdataType = SQLTokenizer.VARCHAR;\tbreak;\r\n\t\t\t\tdefault: throw new Error();\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\ttoken = nextToken( MISSING_DATATYPE );\r\n\t\t\tdataType = token.value;\r\n\t\t}\r\n\t\tColumn col = new Column();\r\n\r\n\t\t// two-part  data type\r\n\t\tif(dataType == SQLTokenizer.LONG){\r\n\t\t\ttoken = nextToken();\r\n\t\t\tif(token != null && token.value == SQLTokenizer.RAW){\r\n\t\t\t\tdataType = SQLTokenizer.LONGVARBINARY;\r\n\t\t\t}else{\r\n\t\t\t\tdataType = SQLTokenizer.LONGVARCHAR;\r\n\t\t\t\tpreviousToken();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tswitch(dataType){\r\n\t\t\tcase SQLTokenizer.RAW:\r\n\t\t\t\tdataType = SQLTokenizer.VARBINARY;\r\n\t\t\t\t// no break;\r\n\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\tcase SQLTokenizer.NCHAR:\r\n\t\t\tcase SQLTokenizer.NVARCHAR:\r\n\t\t\tcase SQLTokenizer.BINARY:\r\n\t\t\tcase SQLTokenizer.VARBINARY:\r\n\t\t\t{\r\n\t\t\t\t// detect the maximum column size\r\n                token = nextToken();\r\n\t\t\t\tint displaySize;\r\n\t\t\t\tif(token == null || token.value != SQLTokenizer.PARENTHESIS_L){\r\n\t\t\t\t\tdisplaySize = 30;\r\n                    previousToken();\r\n\t\t\t\t}else{\r\n\t\t\t\t\ttoken = nextToken( MISSING_EXPRESSION );\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tdisplaySize = Integer.parseInt(token.getName(sql) );\r\n\t\t\t\t\t}catch(Exception e){\r\n\t\t\t\t\t\tthrow createSyntaxError(token, MISSING_NUMBERVALUE );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnextToken( MISSING_PARENTHESIS_R );\r\n\t\t\t\t}\r\n\t\t\t\tcol.setPrecision( displaySize );\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase SQLTokenizer.SYSNAME:\r\n\t\t\t\tcol.setPrecision(255);\r\n\t\t\t\tdataType = SQLTokenizer.VARCHAR;\r\n\t\t\t\tbreak;\r\n\t\t\tcase SQLTokenizer.COUNTER:\r\n\t\t\t\tcol.setAutoIncrement(true);\r\n\t\t\t\tdataType = SQLTokenizer.INT;\r\n\t\t\t\tbreak;\r\n\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\tcase SQLTokenizer.DECIMAL:\r\n                token = nextToken();\r\n\t\t\t\tif(token != null && token.value == SQLTokenizer.PARENTHESIS_L){\r\n\t\t\t\t\t// read the precision of the data type\r\n\t\t\t\t\ttoken = nextToken( MISSING_EXPRESSION );\r\n\t\t\t\t\tint value;\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tvalue = Integer.parseInt(token.getName(sql) );\r\n\t\t\t\t\t}catch(Exception e){\r\n\t\t\t\t\t\tthrow createSyntaxError(token, MISSING_NUMBERVALUE );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcol.setPrecision(value);\r\n\t\t\t\t\ttoken = nextToken( MISSING_COMMA_PARENTHESIS );\r\n\t\t\t\t\tif(token.value == SQLTokenizer.COMMA){\r\n\t\t\t\t\t\t// read the scale of the data type\r\n\t\t\t\t\t\ttoken = nextToken( MISSING_EXPRESSION );\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tvalue = Integer.parseInt(token.getName(sql) );\r\n\t\t\t\t\t\t}catch(Exception e){\r\n\t\t\t\t\t\t\tthrow createSyntaxError(token, MISSING_NUMBERVALUE );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcol.setScale(value);\r\n\t\t\t\t\t\tnextToken( MISSING_PARENTHESIS_R );\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tcol.setPrecision(18); //default Precision for decimal and numeric\r\n                    previousToken();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tcol.setDataType( dataType );\r\n\t\treturn col;\r\n    }\r\n    \r\n    private CommandCreateView createView() throws SQLException{\r\n    \tString viewName = nextIdentifier();\r\n\r\n\t\tnextToken(MISSING_AS);\r\n\t\tSQLToken token = nextToken(MISSING_SELECT);\r\n\t\tCommandCreateView cmd = new CommandCreateView( con.log, viewName );\r\n\t\t\r\n\t\tcmd.sql = new String(sql, token.offset, sql.length-token.offset );\r\n\t\tselect(); //Parse to check for valid\r\n        return cmd;\r\n    }\r\n\r\n\r\n    private CommandTable createIndex(boolean unique) throws SQLException{\r\n        String indexName = nextIdentifier();\r\n        nextToken(MISSING_ON);\r\n        String catalog;\r\n        String tableName = catalog = nextIdentifier();\r\n        tableName = nextIdentiferPart(tableName);\r\n        if(tableName == catalog) catalog = null;\r\n        CommandTable cmd = new CommandTable( con.log, catalog, tableName, SQLTokenizer.INDEX );\r\n        Expressions expressions = new Expressions();\r\n        Strings columns = new Strings();\r\n        expressionDefList( cmd, expressions, columns );\r\n        IndexDescription indexDesc = new IndexDescription( \r\n                indexName, \r\n                tableName, \r\n                unique ? SQLTokenizer.UNIQUE : SQLTokenizer.INDEX, \r\n                        expressions, \r\n                        columns);\r\n        //TODO Create Index\r\n\t\tObject[] param = { \"Create Index\" };\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, param);\r\n    }\r\n\r\n    private CommandCreateDatabase createProcedure() throws SQLException{\r\n        //TODO Create Procedure\r\n\t\tObject[] param = { \"Create Procedure\" };\r\n    \tthrow SmallSQLException.create(Language.UNSUPPORTED_OPERATION, param);\r\n    }\r\n\r\n    private Command drop() throws SQLException{\r\n        SQLToken tokenType = nextToken(COMMANDS_DROP);\r\n        \r\n\t\tString catalog;\r\n\t\tString name = catalog = nextIdentifier();\r\n        name = nextIdentiferPart( name );\r\n        if(name == catalog) catalog = null;\r\n\r\n        switch(tokenType.value){\r\n            case SQLTokenizer.DATABASE:\r\n            case SQLTokenizer.TABLE:\r\n            case SQLTokenizer.VIEW:\r\n            case SQLTokenizer.INDEX:\r\n            case SQLTokenizer.PROCEDURE:\r\n            \treturn new CommandDrop( con.log, catalog, name, tokenType.value);\r\n            default:\r\n                throw createSyntaxError( tokenType, COMMANDS_DROP );\r\n        }\r\n    }\r\n\r\n\r\n    private Command alter() throws SQLException{\r\n    \tSQLToken tokenType = nextToken(COMMANDS_ALTER);\r\n\t\tString catalog;\r\n\t\tString tableName = catalog = nextIdentifier();\r\n        switch(tokenType.value){\r\n        case SQLTokenizer.TABLE:\r\n        case SQLTokenizer.VIEW:\r\n        case SQLTokenizer.INDEX:\r\n        case SQLTokenizer.PROCEDURE:\r\n            tableName = nextIdentiferPart(tableName);\r\n            if(tableName == catalog) catalog = null;\r\n        }\r\n        switch(tokenType.value){\r\n    \t//case SQLTokenizer.DATABASE:\r\n        case SQLTokenizer.TABLE:\r\n            return alterTable( catalog, tableName );\r\n        //case SQLTokenizer.VIEW:\r\n        //case SQLTokenizer.INDEX:\r\n        //case SQLTokenizer.PROCEDURE:\r\n        default:\r\n    \t\tObject[] param = { \"ALTER \" + tokenType.getName( sql ) };\r\n        \tthrow SmallSQLException.create(Language.UNSUPPORTED_OPERATION, param);\r\n        }\r\n    }\r\n    \r\n    \r\n    Command alterTable( String catalog, String name ) throws SQLException{\r\n    \tSQLToken tokenType = nextToken(MISSING_ADD_ALTER_DROP);\r\n        CommandTable cmd = new CommandTable( con.log, catalog, name, tokenType.value );\r\n    \tswitch(tokenType.value){\r\n    \tcase SQLTokenizer.ADD:\r\n    \t\tSQLToken token;\r\n    \t\tdo{\r\n    \t\t\ttoken = nextToken( MISSING_IDENTIFIER );\r\n    \t\t\ttoken = addColumn( token, cmd );\r\n    \t\t}while(token != null && token.value == SQLTokenizer.COMMA );\r\n\r\n    \t\treturn cmd;\r\n    \tdefault:\r\n    \t\tObject[] param = { \"ALTER TABLE \" + tokenType.getName( sql ) };\r\n            throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, param);\r\n    \t}\r\n    }\r\n    \r\n\r\n    private CommandSet set() throws SQLException{\r\n        SQLToken token = nextToken( COMMANDS_SET );\r\n        switch(token.value){\r\n            case SQLTokenizer.TRANSACTION:\r\n                return setTransaction();\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    private CommandSet setTransaction() throws SQLException{\r\n        SQLToken token = nextToken( MISSING_ISOLATION );\r\n        token = nextToken( MISSING_LEVEL );\r\n        token = nextToken( COMMANDS_TRANS_LEVEL );\r\n        CommandSet cmd = new CommandSet( con.log, SQLTokenizer.LEVEL );\r\n        switch(token.value){\r\n            case SQLTokenizer.READ:\r\n                token = nextToken( MISSING_COMM_UNCOMM );\r\n                switch(token.value){\r\n                    case SQLTokenizer.COMMITTED:\r\n                        cmd.isolationLevel = Connection.TRANSACTION_READ_COMMITTED;\r\n                        break;\r\n                    case SQLTokenizer.UNCOMMITTED:\r\n                        cmd.isolationLevel = Connection.TRANSACTION_READ_UNCOMMITTED;\r\n                        break;\r\n                    default:\r\n                        throw new Error();\r\n                }\r\n                return cmd;\r\n            case SQLTokenizer.REPEATABLE:\r\n                token = nextToken( MISSING_READ );\r\n                cmd.isolationLevel = Connection.TRANSACTION_REPEATABLE_READ;\r\n                return cmd;\r\n            case SQLTokenizer.SERIALIZABLE:\r\n                cmd.isolationLevel = Connection.TRANSACTION_SERIALIZABLE;\r\n                return cmd;\r\n            default:\r\n                throw new Error();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private Command execute() throws SQLException{\r\n        //TODO Execute\r\n        throw SmallSQLException.create(Language.UNSUPPORTED_OPERATION, \"Execute\");\r\n    }\r\n\r\n    /**\r\n     * Read a Expression list in parenthesis like of VALUES() or functions. \r\n     * The left parenthesis is already consumed.\r\n     * \r\n     * @param cmd is needed to add parameters \"?\" with addParameter() \r\n     * @see #expressionDefList\r\n     */ \r\n    private Expressions expressionParenthesisList(Command cmd) throws SQLException{\r\n\t\tExpressions list = new Expressions();\r\n\t\t{\r\n\t\t\tSQLToken token = nextToken();\r\n\t\t\tif(token != null && token.value == SQLTokenizer.PARENTHESIS_R){\r\n\t\t\t\t// empty list like functions without parameters\r\n\t\t\t\treturn list;\r\n\t\t\t}\r\n\t\t\tpreviousToken();\r\n\t\t}\r\n        while(true){\r\n            list.add( expression(cmd, 0) );\r\n            SQLToken token = nextToken(MISSING_COMMA_PARENTHESIS);\r\n            switch(token.value){\r\n                case SQLTokenizer.PARENTHESIS_R:\r\n                    return list;\r\n                case SQLTokenizer.COMMA:\r\n                    continue;\r\n                default:\r\n                    throw new Error();\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * Read a list of expressions. The list is limit from specific SQL keywords like SELECT, GROUP BY, ORDER BY\r\n     */\r\n    private Expressions expressionTokenList(Command cmd, int listType) throws SQLException{\r\n\t\tExpressions list = new Expressions();\r\n        while(true){\r\n        \tExpression expr = expression(cmd, 0);\r\n            list.add( expr );\r\n            SQLToken token = nextToken();\r\n            \r\n\t\t\tif(listType == SQLTokenizer.ORDER && token != null){\r\n\t\t\t\tswitch(token.value){\r\n\t\t\t\t\tcase SQLTokenizer.DESC:\r\n\t\t\t\t\t\texpr.setAlias(SQLTokenizer.DESC_STR);\r\n\t\t\t\t\t\t//no break;\r\n\t\t\t\t\tcase SQLTokenizer.ASC:\r\n\t\t\t\t\t\ttoken = nextToken();\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(token == null) {\r\n\t\t\t\tpreviousToken();\r\n\t\t\t\treturn list;\r\n\t\t\t}\r\n\r\n\t\t\tswitch(token.value){\r\n                case SQLTokenizer.COMMA:\r\n                    continue;\r\n                default:\r\n\t\t\t\t\tif(isKeyword(token) ){\r\n\t\t\t\t\t\tpreviousToken();\r\n\t\t\t\t\t\treturn list;\r\n\t\t\t\t\t}\r\n                    throw createSyntaxError( token, MISSING_TOKEN_LIST);\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    private void expressionDefList(Command cmd, Expressions expressions, Strings columns) throws SQLException{\r\n        SQLToken token = nextToken();\r\n        if(token.value != SQLTokenizer.PARENTHESIS_L) throw createSyntaxError(token, MISSING_PARENTHESIS_L );\r\n        Loop:\r\n        while(true){\r\n            int offset = token.offset + token.length;\r\n            token = nextToken();\r\n            if(token != null) offset = token.offset;\r\n            previousToken();  \r\n            \r\n            expressions.add( expression(cmd, 0) );\r\n            SQLToken last = lastToken();\r\n            int length = last.offset + last.length - offset;\r\n            columns.add( new String( sql, offset, length ) );\r\n\r\n            token = nextToken(MISSING_COMMA_PARENTHESIS);\r\n            switch(token.value){\r\n                case SQLTokenizer.PARENTHESIS_R:\r\n                    break Loop;\r\n                case SQLTokenizer.COMMA:\r\n                    continue;\r\n                default:\r\n                    throw new Error();\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n\t/**\r\n\t * Read a complex expression that can be build from multiple atomic expressions.\r\n     * @param cmd is needed to add parameters \"?\" with addParameter() \r\n\t * @param previousOperationLevel the level of the left operation.\r\n\t */\r\n    private Expression expression(Command cmd, int previousOperationLevel) throws SQLException{\r\n        SQLToken token = nextToken(MISSING_EXPRESSION);\r\n        Expression leftExpr;\r\n        switch(token.value){\r\n            case SQLTokenizer.NOT:\r\n            \tleftExpr =  new ExpressionArithmetic( expression( cmd, ExpressionArithmetic.NOT      / 10), ExpressionArithmetic.NOT);\r\n            \tbreak;\r\n            case SQLTokenizer.MINUS:\r\n            \tleftExpr =  new ExpressionArithmetic( expression( cmd, ExpressionArithmetic.NEGATIVE / 10), ExpressionArithmetic.NEGATIVE);\r\n            \tbreak;\r\n            case SQLTokenizer.TILDE:\r\n            \tleftExpr =  new ExpressionArithmetic( expression( cmd, ExpressionArithmetic.BIT_NOT  / 10), ExpressionArithmetic.BIT_NOT);\r\n            \tbreak;\r\n            case SQLTokenizer.PARENTHESIS_L:\r\n                leftExpr = expression( cmd, 0);\r\n                token = nextToken(MISSING_PARENTHESIS_R);\r\n                break;\r\n            default:\r\n                leftExpr = expressionSingle( cmd, token);\r\n        }\r\n        boolean isNot = false;\r\n        while((token = nextToken()) != null){\r\n            Expression rightExpr;\r\n            int operation = ExpressionArithmetic.getOperationFromToken(token.value);\r\n            int level = operation / 10;\r\n            if(previousOperationLevel >= level){\r\n                previousToken();\r\n                return leftExpr;\r\n            }\r\n            switch(token.value){\r\n                case SQLTokenizer.PLUS:\r\n                case SQLTokenizer.MINUS:\r\n                case SQLTokenizer.ASTERISK:\r\n                case SQLTokenizer.SLACH:\r\n                case SQLTokenizer.PERCENT:\r\n                case SQLTokenizer.EQUALS:\r\n                case SQLTokenizer.LESSER:\r\n                case SQLTokenizer.LESSER_EQU:\r\n                case SQLTokenizer.GREATER:\r\n                case SQLTokenizer.GREATER_EQU:\r\n                case SQLTokenizer.UNEQUALS:\r\n                case SQLTokenizer.LIKE:\r\n                case SQLTokenizer.OR:\r\n                case SQLTokenizer.AND:\r\n                case SQLTokenizer.BIT_AND:\r\n                case SQLTokenizer.BIT_OR:\r\n                case SQLTokenizer.BIT_XOR:\r\n                    rightExpr = expression( cmd, level );\r\n                    leftExpr = new ExpressionArithmetic( leftExpr, rightExpr, operation );\r\n                    break;\r\n                case SQLTokenizer.BETWEEN:\r\n                    rightExpr = expression( cmd, ExpressionArithmetic.AND );\r\n                    nextToken( MISSING_AND );\r\n                    Expression rightExpr2 = expression( cmd, level );\r\n                    leftExpr = new ExpressionArithmetic( leftExpr, rightExpr, rightExpr2, operation );\r\n                    break;\r\n                case SQLTokenizer.IN:\r\n            \t\tnextToken(MISSING_PARENTHESIS_L);\r\n                \ttoken = nextToken(MISSING_EXPRESSION);\r\n                \tif(token.value == SQLTokenizer.SELECT){\r\n                \t\tCommandSelect cmdSel = select();\r\n\t\t\t\t\t\tleftExpr = new ExpressionInSelect( con, leftExpr, cmdSel, operation );\r\n\t\t\t\t\t\tnextToken(MISSING_PARENTHESIS_R);\r\n                \t}else{\r\n                \t\tpreviousToken();\r\n                \t\tExpressions list = expressionParenthesisList( cmd );\r\n                \t\tleftExpr = new ExpressionArithmetic( leftExpr, list, operation );\r\n                \t}\r\n                    break;\r\n                case SQLTokenizer.IS:\r\n                \ttoken = nextToken(MISSING_NOT_NULL);\r\n                \tif(token.value == SQLTokenizer.NOT){\r\n                \t\tnextToken(MISSING_NULL);\r\n\t\t\t\t\t\toperation++;\r\n                \t}\r\n                \tleftExpr = new ExpressionArithmetic( leftExpr, operation );\r\n                \tbreak;\r\n                case SQLTokenizer.NOT:\r\n                \ttoken = nextToken(MISSING_BETWEEN_IN);\r\n                \tpreviousToken();\r\n                \tisNot = true;\r\n                \tcontinue;\r\n                default:\r\n                        previousToken();\r\n                        return leftExpr;\r\n            }\r\n            if(isNot){\r\n            \tisNot = false;\r\n\t\t\t\tleftExpr =  new ExpressionArithmetic( leftExpr, ExpressionArithmetic.NOT);\r\n            }\r\n        }\r\n        previousToken();\r\n        return leftExpr;\r\n    }\r\n\r\n    /**\r\n     * This method parse a single expression like 12, 'qwert', 0x3F or a column name.\r\n     * \r\n     * @param cmd is needed to add parameters \"?\" with addParameter() \r\n     */\r\n    private Expression expressionSingle(Command cmd, SQLToken token) throws SQLException{\r\n        boolean isMinus = false;\r\n        if(token != null){\r\n            switch(token.value){\r\n                case SQLTokenizer.NULL:\r\n                        return new ExpressionValue( null, SQLTokenizer.NULL );\r\n                case SQLTokenizer.STRING:\r\n                        return new ExpressionValue( token.getName(null), SQLTokenizer.VARCHAR );\r\n                case SQLTokenizer.IDENTIFIER:\r\n                        {\r\n                        String name = getIdentifier( token );\r\n                        ExpressionName expr =  new ExpressionName( name );\r\n                        SQLToken token2 = nextToken();\r\n                        if(token2 != null && token2.value == SQLTokenizer.POINT){\r\n                            expr.setNameAfterTableAlias( nextIdentifier() );\r\n                        }else{\r\n                            previousToken();\r\n                        }\r\n                        return expr;\r\n                        }\r\n                case SQLTokenizer.TRUE:\r\n                        return new ExpressionValue( Boolean.TRUE, SQLTokenizer.BOOLEAN );\r\n                case SQLTokenizer.FALSE:\r\n                        return new ExpressionValue( Boolean.FALSE, SQLTokenizer.BOOLEAN );\r\n                case SQLTokenizer.ESCAPE_L:{\r\n                        token = nextToken(COMMANDS_ESCAPE);\r\n                        SQLToken para = nextToken(MISSING_EXPRESSION);\r\n                        Expression expr;\r\n                        switch(token.value){\r\n                            case SQLTokenizer.D: // date escape sequence\r\n                            \texpr = new ExpressionValue( DateTime.valueOf(para.getName(sql), SQLTokenizer.DATE), SQLTokenizer.DATE );\r\n                            \tbreak;\r\n                            case SQLTokenizer.T: // time escape sequence\r\n                                expr = new ExpressionValue( DateTime.valueOf(para.getName(sql), SQLTokenizer.TIME), SQLTokenizer.TIME );\r\n                            \tbreak;\r\n                            case SQLTokenizer.TS: // timestamp escape sequence\r\n                                expr = new ExpressionValue( DateTime.valueOf(para.getName(sql), SQLTokenizer.TIMESTAMP), SQLTokenizer.TIMESTAMP );\r\n                            \tbreak;\r\n                            case SQLTokenizer.FN: // function escape sequence\r\n                            \tnextToken(MISSING_PARENTHESIS_L);\r\n                            \texpr = function(cmd, para, true);\r\n                            \tbreak;\r\n                            case SQLTokenizer.CALL: // call escape sequence\r\n                                throw new java.lang.UnsupportedOperationException(\"call escape sequence\");\r\n                            default: throw new Error();\r\n                        }\r\n                        token = nextToken( ESCAPE_MISSING_CLOSE );\r\n                        return expr;\r\n                }\r\n                case SQLTokenizer.QUESTION:\r\n                        ExpressionValue param = new ExpressionValue();\r\n                        cmd.addParameter( param );\r\n                        return param;\r\n                case SQLTokenizer.CASE:\r\n                \t\treturn caseExpr(cmd);\r\n                case SQLTokenizer.MINUS:\r\n                case SQLTokenizer.PLUS:\r\n                        // sign detection\r\n                        do{\r\n                            if(token.value == SQLTokenizer.MINUS)\r\n                                    isMinus = !isMinus;\r\n                            token = nextToken();\r\n                            if(token == null) throw createSyntaxError( token, MISSING_EXPRESSION );\r\n                        }while(token.value == SQLTokenizer.MINUS || token.value == SQLTokenizer.PLUS);\r\n                        // no Break\r\n                default:\r\n                        SQLToken token2 = nextToken();\r\n                        if(token2 != null && token2.value == SQLTokenizer.PARENTHESIS_L){\r\n                            if(isMinus)\r\n                                return new ExpressionArithmetic( function( cmd, token, false ),  ExpressionArithmetic.NEGATIVE );\r\n                            return function( cmd, token, false );\r\n                        }else{\r\n                            // constant expression or identifier\r\n                            char chr1 = sql[ token.offset ];\r\n\t\t\t\t\t\t\tif(chr1 == '$'){\r\n\t\t\t\t\t\t\t\tpreviousToken();\r\n\t                            String tok = new String(sql, token.offset+1, token.length-1);\r\n                                if(isMinus) tok = \"-\" + tok;\r\n\t\t\t\t\t\t\t\treturn new ExpressionValue( new Money(Double.parseDouble(tok)), SQLTokenizer.MONEY );\r\n\t\t\t\t\t\t\t}\r\n                            String tok = new String(sql, token.offset, token.length);\r\n                            if((chr1 >= '0' && '9' >= chr1) || chr1 == '.'){\r\n                                previousToken();\r\n                                // first character is a digit\r\n                                if(token.length>1 && (sql[ token.offset +1 ] | 0x20) == 'x'){\r\n                                    // binary data as hex\r\n                                    if(isMinus) {\r\n                \t\t\t\t\t\tthrow createSyntaxError(token, Language.STXADD_OPER_MINUS);\r\n                                    }\r\n                                    return new ExpressionValue( Utils.hex2bytes( sql, token.offset+2, token.length-2), SQLTokenizer.VARBINARY );\r\n                                }\r\n                                if(isMinus) tok = \"-\" + tok;\r\n                                if(Utils.indexOf( '.', sql, token.offset, token.length ) >= 0 ||\r\n                                   Utils.indexOf( 'e', sql, token.offset, token.length ) >= 0){\r\n                                    return new ExpressionValue( new Double(tok), SQLTokenizer.DOUBLE );\r\n                                }else{\r\n                                    try{\r\n                                        return new ExpressionValue( new Integer(tok), SQLTokenizer.INT );\r\n                                    }catch(NumberFormatException e){\r\n                                        return new ExpressionValue( new Long(tok), SQLTokenizer.BIGINT );\r\n                                    }\r\n                                }\r\n                            }else{\r\n                                // identifier\r\n                                checkValidIdentifier( tok, token );\r\n                                ExpressionName expr = new ExpressionName(tok);\r\n                                if(token2 != null && token2.value == SQLTokenizer.POINT){\r\n                                    expr.setNameAfterTableAlias( nextIdentifier() );\r\n                                }else{\r\n                                    previousToken();\r\n                                }\r\n                                if(isMinus)\r\n                                    return new ExpressionArithmetic( expr,  ExpressionArithmetic.NEGATIVE );\r\n                                return expr;\r\n                            }\r\n                        }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    \r\n    ExpressionFunctionCase caseExpr(final Command cmd) throws SQLException{\r\n\t\tExpressionFunctionCase expr = new ExpressionFunctionCase();\r\n\t\tSQLToken token = nextToken(MISSING_EXPRESSION);\r\n\t\t\r\n\t\tExpression input = null;\r\n\t\tif(token.value != SQLTokenizer.WHEN){\r\n\t\t\t// simple CASE Syntax\r\n\t\t\tpreviousToken();\r\n\t\t\tinput = expression(cmd, 0);\r\n\t\t\ttoken = nextToken(MISSING_WHEN_ELSE_END);\r\n\t\t}\t\t\t\r\n\t\t\t\r\n\t\twhile(true){\r\n\t\t\tswitch(token.value){\r\n\t\t\t\tcase SQLTokenizer.WHEN:\t\t\t\t\r\n\t\t\t\t\tExpression condition = expression(cmd, 0);\r\n\t\t\t\t\tif(input != null){\r\n\t\t\t\t\t\t// simple CASE Syntax\r\n\t\t\t\t\t\tcondition = new ExpressionArithmetic( input, condition, ExpressionArithmetic.EQUALS);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnextToken(MISSING_THEN);\r\n\t\t\t\t\tExpression result = expression(cmd, 0);\r\n\t\t\t\t\texpr.addCase(condition, result);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase SQLTokenizer.ELSE:\r\n\t\t\t\t\texpr.setElseResult(expression(cmd, 0));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase SQLTokenizer.END:\r\n\t\t\t\t\texpr.setEnd();\r\n\t\t\t\t\treturn expr;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error();\r\n\t\t\t}\r\n\t\t\ttoken = nextToken(MISSING_WHEN_ELSE_END);\r\n\t\t}\r\n    }\r\n    \r\n\r\n    /**\r\n     * Parse any functions. The left parenthesis is already consumed from token list.\r\n     * @param token the SQLToken of the function\r\n     * @param isEscape If the function is a FN ESCAPE sequence\r\n     */ \r\n    private Expression function( Command cmd, SQLToken token, boolean isEscape ) throws SQLException{\r\n        Expression expr;\r\n        switch(token.value){\r\n        \tcase SQLTokenizer.CONVERT:{\r\n        \t\tColumn col;\r\n        \t\tExpression style = null;\r\n        \t\tif(isEscape){\r\n        \t\t\texpr = expression( cmd, 0);\r\n\t\t\t\t\tnextToken(MISSING_COMMA);\r\n\t\t\t\t\tcol = datatype(isEscape);\r\n        \t\t}else{\r\n\t        \t\tcol = datatype(isEscape);\r\n\t        \t\tnextToken(MISSING_COMMA);\r\n\t\t\t\t\texpr = expression( cmd, 0);\r\n\t\t\t\t\ttoken = nextToken(MISSING_COMMA_PARENTHESIS);\r\n\t\t\t\t\tif(token.value == SQLTokenizer.COMMA){\r\n\t\t\t\t\t\tstyle = expression( cmd, 0);\r\n\t\t\t\t\t}else\r\n\t\t\t\t\t\tpreviousToken();\r\n        \t\t}\r\n        \t\tnextToken(MISSING_PARENTHESIS_R);\r\n        \t\treturn new ExpressionFunctionConvert( col, expr, style );\r\n        \t}\r\n        \tcase SQLTokenizer.CAST:\r\n        \t\texpr = expression( cmd, 0);\r\n        \t\tnextToken(MISSING_AS);\r\n        \t\tColumn col = datatype(false);\r\n        \t\tnextToken(MISSING_PARENTHESIS_R);\r\n        \t\treturn new ExpressionFunctionConvert( col, expr, null );\r\n\t\t\tcase SQLTokenizer.TIMESTAMPDIFF:\r\n\t\t\t\ttoken = nextToken(MISSING_INTERVALS);\r\n\t\t\t\tnextToken(MISSING_COMMA);\r\n\t\t\t\texpr = expression( cmd, 0);\r\n\t\t\t\tnextToken(MISSING_COMMA);\r\n\t\t\t\texpr = new ExpressionFunctionTimestampDiff( token.value, expr, expression( cmd, 0));\r\n\t\t\t\tnextToken(MISSING_PARENTHESIS_R);\r\n\t\t\t\treturn expr;\r\n\t\t\tcase SQLTokenizer.TIMESTAMPADD:\r\n\t\t\t\ttoken = nextToken(MISSING_INTERVALS);\r\n\t\t\t\tnextToken(MISSING_COMMA);\r\n\t\t\t\texpr = expression( cmd, 0);\r\n\t\t\t\tnextToken(MISSING_COMMA);\r\n\t\t\t\texpr = new ExpressionFunctionTimestampAdd( token.value, expr, expression( cmd, 0));\r\n\t\t\t\tnextToken(MISSING_PARENTHESIS_R);\r\n\t\t\t\treturn expr;\r\n        }\r\n\t\tExpressions paramList = expressionParenthesisList(cmd);\r\n        int paramCount = paramList.size();\r\n        Expression[] params = paramList.toArray();\r\n        boolean invalidParamCount;\r\n        switch(token.value){\r\n        // numeric functions:\r\n            case SQLTokenizer.ABS:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionAbs();\r\n                break;\r\n            case SQLTokenizer.ACOS:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionACos();\r\n                break;\r\n            case SQLTokenizer.ASIN:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionASin();\r\n                break;\r\n            case SQLTokenizer.ATAN:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionATan();\r\n                break;\r\n            case SQLTokenizer.ATAN2:\r\n                invalidParamCount = (paramCount != 2);\r\n                expr = new ExpressionFunctionATan2();\r\n                break;\r\n            case SQLTokenizer.CEILING:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionCeiling();\r\n                break;\r\n            case SQLTokenizer.COS:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionCos();\r\n                break;\r\n            case SQLTokenizer.COT:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionCot();\r\n                break;\r\n            case SQLTokenizer.DEGREES:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionDegrees();\r\n                break;\r\n            case SQLTokenizer.EXP:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionExp();\r\n                break;\r\n            case SQLTokenizer.FLOOR:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionFloor();\r\n                break;\r\n            case SQLTokenizer.LOG:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionLog();\r\n                break;\r\n            case SQLTokenizer.LOG10:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionLog10();\r\n                break;\r\n            case SQLTokenizer.MOD:\r\n                invalidParamCount = (paramCount != 2);\r\n                expr = new ExpressionFunctionMod();\r\n                break;\r\n            case SQLTokenizer.PI:\r\n                invalidParamCount = (paramCount != 0);\r\n                expr = new ExpressionFunctionPI();\r\n                break;\r\n            case SQLTokenizer.POWER:\r\n                invalidParamCount = (paramCount != 2);\r\n                expr = new ExpressionFunctionPower();\r\n                break;\r\n            case SQLTokenizer.RADIANS:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionRadians();\r\n                break;\r\n            case SQLTokenizer.RAND:\r\n                invalidParamCount =  (paramCount != 0) && (paramCount != 1);\r\n                expr = new ExpressionFunctionRand();\r\n                break;\r\n            case SQLTokenizer.ROUND:\r\n                invalidParamCount =  (paramCount != 2);\r\n                expr = new ExpressionFunctionRound();\r\n                break;\r\n            case SQLTokenizer.SIN:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionSin();\r\n                break;\r\n            case SQLTokenizer.SIGN:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionSign();\r\n                break;\r\n            case SQLTokenizer.SQRT:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionSqrt();\r\n                break;\r\n            case SQLTokenizer.TAN:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionTan();\r\n                break;\r\n            case SQLTokenizer.TRUNCATE:\r\n                invalidParamCount =  (paramCount != 2);\r\n                expr = new ExpressionFunctionTruncate();\r\n                break;\r\n         \r\n        // string functions:\r\n\t\t\tcase SQLTokenizer.ASCII:\r\n\t\t\t\tinvalidParamCount = (paramCount != 1);\r\n\t\t\t\texpr = new ExpressionFunctionAscii();\r\n\t\t\t\tbreak;\r\n            case SQLTokenizer.BITLEN:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionBitLen();\r\n                break;\r\n            case SQLTokenizer.CHARLEN:\r\n            case SQLTokenizer.CHARACTLEN:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionCharLen();\r\n                break;\r\n\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\t\tinvalidParamCount = (paramCount != 1);\r\n\t\t\t\texpr = new ExpressionFunctionChar();\r\n\t\t\t\tbreak;\r\n            case SQLTokenizer.CONCAT:\r\n                if(paramCount != 2){\r\n                    invalidParamCount = true;\r\n                    expr = null;//only for compiler\r\n                    break;\r\n                }\r\n                invalidParamCount = false;\r\n                expr = new ExpressionArithmetic( params[0], params[1], ExpressionArithmetic.ADD);\r\n                break;\r\n            case SQLTokenizer.DIFFERENCE:\r\n                invalidParamCount = (paramCount != 2);\r\n                expr = new ExpressionFunctionDifference();\r\n                break;\r\n            case SQLTokenizer.INSERT:\r\n                invalidParamCount = (paramCount != 4);\r\n                expr = new ExpressionFunctionInsert();\r\n                break;\r\n            case SQLTokenizer.LCASE:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionLCase();\r\n                break;\r\n            case SQLTokenizer.LEFT:\r\n                invalidParamCount = (paramCount != 2);\r\n                expr = new ExpressionFunctionLeft();\r\n                break;\r\n\t\t\tcase SQLTokenizer.LENGTH:\r\n\t\t\t\tinvalidParamCount = (paramCount != 1);\r\n\t\t\t\texpr = new ExpressionFunctionLength();\r\n\t\t\t\tbreak;\r\n            case SQLTokenizer.LOCATE:\r\n            \tinvalidParamCount = (paramCount != 2) && (paramCount != 3);\r\n            \texpr = new ExpressionFunctionLocate();\r\n            \tbreak;\r\n            case SQLTokenizer.LTRIM:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionLTrim();\r\n                break;\r\n            case SQLTokenizer.OCTETLEN:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionOctetLen();\r\n                break;\r\n            case SQLTokenizer.REPEAT:\r\n                invalidParamCount = (paramCount != 2);\r\n                expr = new ExpressionFunctionRepeat();\r\n                break;\r\n            case SQLTokenizer.REPLACE:\r\n                invalidParamCount = (paramCount != 3);\r\n                expr = new ExpressionFunctionReplace();\r\n                break;\r\n\t\t\tcase SQLTokenizer.RIGHT:\r\n\t\t\t\tinvalidParamCount = (paramCount != 2);\r\n\t\t\t\texpr = new ExpressionFunctionRight();\r\n\t\t\t\tbreak;\r\n            case SQLTokenizer.RTRIM:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionRTrim();\r\n                break;\r\n            case SQLTokenizer.SPACE:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionSpace();\r\n                break;\r\n            case SQLTokenizer.SOUNDEX:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionSoundex();\r\n                break;\r\n\t\t\tcase SQLTokenizer.SUBSTRING:\r\n\t\t\t\tinvalidParamCount = (paramCount != 3);\r\n\t\t\t\texpr = new ExpressionFunctionSubstring();\r\n\t\t\t\tbreak;\r\n            case SQLTokenizer.UCASE:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionUCase();\r\n                break;\r\n                \r\n        // date time functions\r\n            case SQLTokenizer.CURDATE:\r\n            case SQLTokenizer.CURRENTDATE:\r\n            \tinvalidParamCount = (paramCount != 0);\r\n\t\t\t\texpr = new ExpressionValue( new DateTime(DateTime.now(), SQLTokenizer.DATE), SQLTokenizer.DATE);\r\n\t\t\t\tbreak;\r\n            case SQLTokenizer.CURTIME:\r\n            \tinvalidParamCount = (paramCount != 0);\r\n\t\t\t\texpr = new ExpressionValue( new DateTime(DateTime.now(), SQLTokenizer.TIME), SQLTokenizer.TIME);\r\n\t\t\t\tbreak;\r\n            case SQLTokenizer.DAYOFMONTH:\r\n            \tinvalidParamCount = (paramCount != 1);\r\n\t\t\t\texpr = new ExpressionFunctionDayOfMonth();\r\n\t\t\t\tbreak;\r\n            case SQLTokenizer.DAYOFWEEK:\r\n            \tinvalidParamCount = (paramCount != 1);\r\n\t\t\t\texpr = new ExpressionFunctionDayOfWeek();\r\n\t\t\t\tbreak;\r\n            case SQLTokenizer.DAYOFYEAR:\r\n            \tinvalidParamCount = (paramCount != 1);\r\n\t\t\t\texpr = new ExpressionFunctionDayOfYear();\r\n\t\t\t\tbreak;\r\n            case SQLTokenizer.HOUR:\r\n            \tinvalidParamCount = (paramCount != 1);\r\n\t\t\t\texpr = new ExpressionFunctionHour();\r\n\t\t\t\tbreak;\r\n            case SQLTokenizer.MINUTE:\r\n            \tinvalidParamCount = (paramCount != 1);\r\n\t\t\t\texpr = new ExpressionFunctionMinute();\r\n\t\t\t\tbreak;\r\n            case SQLTokenizer.MONTH:\r\n            \tinvalidParamCount = (paramCount != 1);\r\n\t\t\t\texpr = new ExpressionFunctionMonth();\r\n\t\t\t\tbreak;\r\n            case SQLTokenizer.NOW:\r\n            \tinvalidParamCount = (paramCount != 0);\r\n\t\t\t\texpr = new ExpressionValue( new DateTime(DateTime.now(), SQLTokenizer.TIMESTAMP), SQLTokenizer.TIMESTAMP);\r\n\t\t\t\tbreak;\r\n            case SQLTokenizer.YEAR:\r\n                invalidParamCount = (paramCount != 1);\r\n                expr = new ExpressionFunctionYear();\r\n                break;\r\n            \t\r\n        // system functions:\r\n            case SQLTokenizer.IIF:\r\n        \t\tinvalidParamCount = (paramCount != 3);\r\n            \texpr = new ExpressionFunctionIIF();\r\n        \t\tbreak;\r\n        \tcase SQLTokenizer.SWITCH:\r\n        \t\tinvalidParamCount = (paramCount % 2 != 0);\r\n        \t\tExpressionFunctionCase exprCase = new ExpressionFunctionCase();\r\n        \t\tfor(int i=0; i < paramCount-1; i +=2)\r\n        \t\t\texprCase.addCase(params[i], params[i+1] );\r\n        \t\texprCase.setEnd();\r\n        \t\texpr = exprCase;\r\n        \t\tbreak;\r\n        \tcase SQLTokenizer.IFNULL:\r\n        \t\tswitch(paramCount){\r\n        \t\t\tcase 1:\r\n        \t\t\t\treturn new ExpressionArithmetic( params[0], ExpressionArithmetic.ISNULL );\r\n        \t\t\tcase 2:        \t\t\t\t\r\n        \t\t\t\tinvalidParamCount = false;\r\n        \t\t\t\texpr = new ExpressionFunctionIIF();\r\n        \t\t\t\tExpression[] newParams = new Expression[3];\r\n        \t\t\t\tnewParams[0] = new ExpressionArithmetic( params[0], ExpressionArithmetic.ISNULL );\r\n        \t\t\t\tnewParams[1] = params[1];\r\n        \t\t\t\tnewParams[2] = params[0];        \t\t\t\t\r\n        \t\t\t\tparams = newParams;\r\n        \t\t\t\tparamCount = 3;\r\n        \t\t\t\tbreak;\r\n        \t\t\tdefault:\r\n        \t\t\t\tinvalidParamCount = true;\r\n        \t\t\t\texpr = null; // only for Compiler\r\n        \t\t}\r\n        \t\tbreak;\r\n                    \r\n        // now come the aggregate functions\r\n            case SQLTokenizer.COUNT:\r\n\t\t\t\t\tinvalidParamCount = (paramCount != 1);\r\n\t\t\t\t\tif(params[0].getType() == Expression.NAME){\r\n\t\t\t\t\t\t//detect special case COUNT(*)\r\n\t\t\t\t\t\tExpressionName param = (ExpressionName)params[0];\r\n\t\t\t\t\t\tif(\"*\".equals(param.getName()) && param.getTableAlias() == null){\r\n                            //set any not NULL value as parameter\r\n\t\t\t\t\t\t\tparams[0] = new ExpressionValue(\"*\", SQLTokenizer.VARCHAR);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\texpr = new ExpressionName( Expression.COUNT );\r\n\t\t\t\t\tbreak;\r\n\t\t\tcase SQLTokenizer.SUM:\r\n\t\t\t\t\tinvalidParamCount = (paramCount != 1);\r\n\t\t\t\t\texpr = new ExpressionName( Expression.SUM );\r\n\t\t\t\t\tbreak;\r\n\t\t\tcase SQLTokenizer.MAX:\r\n\t\t\t\t\tinvalidParamCount = (paramCount != 1);\r\n\t\t\t\t\texpr = new ExpressionName( Expression.MAX );\r\n\t\t\t\t\tbreak;\r\n\t\t\tcase SQLTokenizer.MIN:\r\n\t\t\t\t\tinvalidParamCount = (paramCount != 1);\r\n\t\t\t\t\texpr = new ExpressionName( Expression.MIN );\r\n\t\t\t\t\tbreak;\r\n\t\t\tcase SQLTokenizer.FIRST:\r\n\t\t\t\t\tinvalidParamCount = (paramCount != 1);\r\n\t\t\t\t\texpr = new ExpressionName( Expression.FIRST );\r\n\t\t\t\t\tbreak;\r\n\t\t\tcase SQLTokenizer.LAST:\r\n\t\t\t\t\tinvalidParamCount = (paramCount != 1);\r\n\t\t\t\t\texpr = new ExpressionName( Expression.LAST );\r\n\t\t\t\t\tbreak;\r\n\t\t\tcase SQLTokenizer.AVG:\r\n\t\t\t\t\tif(paramCount != 1){\r\n                        invalidParamCount = true;\r\n                        expr = null;//Only for the compiler\r\n                        break;\r\n                    }\r\n\t\t\t\t\texpr = new ExpressionName( Expression.SUM );\r\n\t\t\t\t\texpr.setParams( params );\r\n\t\t\t\t\tExpression expr2 = new ExpressionName( Expression.COUNT );\r\n\t\t\t\t\texpr2.setParams( params );\r\n\t\t\t\t\texpr = new ExpressionArithmetic( expr, expr2, ExpressionArithmetic.DIV );\r\n\t\t\t\t\treturn expr;\r\n            default:\r\n            \tthrow createSyntaxError(token, Language.STXADD_FUNC_UNKNOWN);\r\n        }\r\n        if(invalidParamCount) {\r\n        \tthrow createSyntaxError(token, Language.STXADD_PARAM_INVALID_COUNT);\r\n        }\r\n        expr.setParams( params );\r\n        return expr;\r\n    }\r\n\r\n    /**\r\n     * read a table or view name in a FROM clause. If the keyword AS exists then read it also the alias\r\n     */\r\n    private RowSource tableSource( Command cmd, DataSources tables) throws SQLException{\r\n        SQLToken token = nextToken(MISSING_EXPRESSION);\r\n        switch(token.value){\r\n            case SQLTokenizer.PARENTHESIS_L: // (\r\n                    return rowSource( cmd, tables, SQLTokenizer.PARENTHESIS_R );\r\n            case SQLTokenizer.ESCAPE_L: // {\r\n                    token = nextToken(MISSING_OJ);\r\n                    return rowSource( cmd, tables, SQLTokenizer.ESCAPE_R );\r\n            case SQLTokenizer.SELECT:\r\n            \t\t// inner select\r\n            \t\tViewResult viewResult = new ViewResult( con, select() );\r\n            \t\ttables.add(viewResult);\r\n            \t\treturn viewResult;\r\n        }\r\n        String catalog = null;\r\n        String name = getIdentifier( token );\r\n\t\ttoken = nextToken();\r\n\t\t//check if the table name include a database name\r\n\t\tif(token != null && token.value == SQLTokenizer.POINT){\r\n\t\t\tcatalog = name;\r\n\t\t\tname = nextIdentifier();\r\n\t\t\ttoken = nextToken();\r\n\t\t}\r\n\t\t//TableResult table = new TableResult();\r\n\t\t//table.setName( catalog, name );\r\n\t\tTableView tableView = Database.getTableView( con, catalog, name);\r\n\t\tTableViewResult table = TableViewResult.createResult(tableView);\r\n        tables.add( table );\r\n\r\n        if(token != null && token.value == SQLTokenizer.AS){\r\n            // skip AS keyword, if exists\r\n            token = nextToken(MISSING_EXPRESSION);\r\n            table.setAlias( token.getName( sql ) );\r\n        }else{\r\n            previousToken();\r\n        }\r\n        return table;\r\n    }\r\n    \r\n\r\n    /**\r\n     * read a join in a from clause.\r\n     */\r\n    private Join join(Command cmd, DataSources tables, RowSource left, int type) throws SQLException{\r\n        RowSource right = rowSource(cmd, tables, 0);\r\n        SQLToken token = nextToken();\r\n\r\n        while(true){\r\n            if(token == null) {\r\n            \tthrow createSyntaxError(token, Language.STXADD_JOIN_INVALID);\r\n            }\r\n\r\n            switch(token.value){\r\n            \tcase SQLTokenizer.ON:\r\n\t            \tif(type == Join.RIGHT_JOIN)\r\n\t\t\t\t\t\treturn new Join( Join.LEFT_JOIN, right, left, expression( cmd, 0 ) );\r\n\t                return new Join( type, left, right, expression( cmd, 0 ) );\r\n\t            default:\r\n\t                if(!right.hasAlias()){\r\n\t                    right.setAlias( token.getName( sql ) );\r\n\t                    token = nextToken();\r\n\t                    continue;\r\n\t                }\r\n\t                throw createSyntaxError( token, MISSING_ON );\t                \r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * returns a row source. A row source is a Table, Join, View or a row function.\r\n     *\r\n     */\r\n    private RowSource rowSource(Command cmd, DataSources tables, int parenthesis) throws SQLException{\r\n        RowSource fromSource = null;\r\n        fromSource = tableSource(cmd, tables);\r\n\r\n        while(true){\r\n            SQLToken token = nextToken();\r\n            if(token == null) return fromSource;\r\n            switch(token.value){\r\n                case SQLTokenizer.ON:\r\n                    previousToken();\r\n                    return fromSource;\r\n                case SQLTokenizer.CROSS:\r\n                    nextToken(MISSING_JOIN);\r\n                    //no break\r\n                case SQLTokenizer.COMMA:\r\n                    fromSource = new Join( Join.CROSS_JOIN, fromSource, rowSource(cmd, tables, 0), null);\r\n                    break;\r\n                case SQLTokenizer.INNER:\r\n                    nextToken(MISSING_JOIN);\r\n                    //no break;\r\n                case SQLTokenizer.JOIN:\r\n                    fromSource = join( cmd, tables, fromSource, Join.INNER_JOIN );\r\n                    break;\r\n                case SQLTokenizer.LEFT:\r\n                    token = nextToken(MISSING_OUTER_JOIN);\r\n                \tif(token.value == SQLTokenizer.OUTER)\r\n                \t\ttoken = nextToken(MISSING_JOIN);\r\n                    fromSource = join( cmd, tables, fromSource, Join.LEFT_JOIN );\r\n                    break;\r\n                case SQLTokenizer.RIGHT:\r\n                \ttoken = nextToken(MISSING_OUTER_JOIN);\r\n                \tif(token.value == SQLTokenizer.OUTER)\r\n                \t\ttoken = nextToken(MISSING_JOIN);\r\n\t\t\t\t\tfromSource = join( cmd, tables, fromSource, Join.RIGHT_JOIN );\r\n\t\t\t\t\tbreak;                \t\r\n\t\t\t\tcase SQLTokenizer.FULL:\r\n\t\t\t\t\ttoken = nextToken(MISSING_OUTER_JOIN);\r\n\t\t\t\t\tif(token.value == SQLTokenizer.OUTER)\r\n\t\t\t\t\t\ttoken = nextToken(MISSING_JOIN);\r\n\t\t\t\t\tfromSource = join( cmd, tables, fromSource, Join.FULL_JOIN );\r\n\t\t\t\t\tbreak;                \t\r\n                case SQLTokenizer.PARENTHESIS_R:\r\n                case SQLTokenizer.ESCAPE_R:\r\n                    if(parenthesis == token.value) return fromSource;\r\n                    if(parenthesis == 0){\r\n                    \tpreviousToken();\r\n\t\t\t\t\t\treturn fromSource;\r\n                    }\r\n                    throw createSyntaxError( token, Language.STXADD_FROM_PAR_CLOSE );\r\n                default:\r\n                \tif(isKeyword(token)){\r\n\t\t\t\t\t\tpreviousToken();\r\n\t\t\t\t\t\treturn fromSource;\r\n                \t}\r\n                    if(!fromSource.hasAlias()){\r\n                        fromSource.setAlias( token.getName( sql ) );\r\n                        break;\r\n                    }\r\n                    throw createSyntaxError( token, new int[]{SQLTokenizer.COMMA, SQLTokenizer.GROUP, SQLTokenizer.ORDER, SQLTokenizer.HAVING} );\r\n            }\r\n        }\r\n    }\r\n\r\n    private void from(CommandSelect cmd) throws SQLException{\r\n\t\tDataSources tables = new DataSources();\r\n        cmd.setTables(tables);\r\n        cmd.setSource( rowSource( cmd, tables, 0 ) );\r\n\r\n\t\tSQLToken token;\r\n        while(null != (token = nextToken())){\r\n            switch(token.value){\r\n                case SQLTokenizer.WHERE:\r\n                    where( cmd );\r\n                    break;\r\n                case SQLTokenizer.GROUP:\r\n                    group( cmd );\r\n                    break;\r\n                case SQLTokenizer.HAVING:\r\n                    having( cmd );\r\n                    break;\r\n                default:\r\n                \tpreviousToken();\r\n                    return;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void order(CommandSelect cmd) throws SQLException{\r\n        nextToken(MISSING_BY);\r\n        cmd.setOrder(expressionTokenList(cmd, SQLTokenizer.ORDER));\r\n    }\r\n    \r\n    private void limit(CommandSelect selCmd) throws SQLException{\r\n        SQLToken token = nextToken(MISSING_EXPRESSION);\r\n        try{\r\n            int maxRows = Integer.parseInt(token.getName(sql));\r\n            selCmd.setMaxRows(maxRows);\r\n        }catch(NumberFormatException e){\r\n            throw createSyntaxError(token, Language.STXADD_NOT_NUMBER, token.getName(sql));\r\n        }\r\n    }\r\n\r\n    private void group(CommandSelect cmd) throws SQLException{\r\n        nextToken(MISSING_BY);\r\n        cmd.setGroup( expressionTokenList(cmd, SQLTokenizer.GROUP) );\r\n    }\r\n\r\n    private void where(CommandSelect cmd) throws SQLException{\r\n        cmd.setWhere( expression(cmd, 0) );\r\n    }\r\n\r\n    private void having(CommandSelect cmd) throws SQLException{\r\n        cmd.setHaving( expression(cmd, 0) );\r\n    }\r\n\r\n\r\n    private static final int[] COMMANDS = {SQLTokenizer.SELECT, SQLTokenizer.DELETE, SQLTokenizer.INSERT, SQLTokenizer.UPDATE, SQLTokenizer.CREATE, SQLTokenizer.DROP, SQLTokenizer.ALTER, SQLTokenizer.SET, SQLTokenizer.USE, SQLTokenizer.EXECUTE, SQLTokenizer.TRUNCATE};\r\n    private static final int[] COMMANDS_ESCAPE = {SQLTokenizer.D, SQLTokenizer.T, SQLTokenizer.TS, SQLTokenizer.FN, SQLTokenizer.CALL};\r\n    private static final int[] COMMANDS_ALTER = {SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW,  SQLTokenizer.PROCEDURE, };\r\n    private static final int[] COMMANDS_CREATE = {SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW, SQLTokenizer.INDEX, SQLTokenizer.PROCEDURE, SQLTokenizer.UNIQUE, SQLTokenizer.CLUSTERED, SQLTokenizer.NONCLUSTERED};\r\n    private static final int[] COMMANDS_DROP = {SQLTokenizer.DATABASE, SQLTokenizer.TABLE, SQLTokenizer.VIEW, SQLTokenizer.INDEX, SQLTokenizer.PROCEDURE};\r\n    private static final int[] COMMANDS_SET = {SQLTokenizer.TRANSACTION};\r\n    private static final int[] COMMANDS_CREATE_UNIQUE = {SQLTokenizer.INDEX, SQLTokenizer.CLUSTERED, SQLTokenizer.NONCLUSTERED};\r\n\tprivate static final int[] MISSING_TABLE = {SQLTokenizer.TABLE};\r\n    private static final int[] ESCAPE_MISSING_CLOSE = {SQLTokenizer.ESCAPE_R};\r\n    private static final int[] MISSING_EXPRESSION = {SQLTokenizer.VALUE};\r\n    private static final int[] MISSING_IDENTIFIER = {SQLTokenizer.IDENTIFIER};\r\n    private static final int[] MISSING_BY = {SQLTokenizer.BY};\r\n    private static final int[] MISSING_PARENTHESIS_L = {SQLTokenizer.PARENTHESIS_L};\r\n    private static final int[] MISSING_PARENTHESIS_R = {SQLTokenizer.PARENTHESIS_R};\r\n    private static final int[] MISSING_DATATYPE  = {SQLTokenizer.BIT, SQLTokenizer.BOOLEAN, SQLTokenizer.BINARY, SQLTokenizer.VARBINARY, SQLTokenizer.RAW, SQLTokenizer.LONGVARBINARY, SQLTokenizer.BLOB, SQLTokenizer.TINYINT, SQLTokenizer.SMALLINT, SQLTokenizer.INT, SQLTokenizer.COUNTER, SQLTokenizer. BIGINT, SQLTokenizer.SMALLMONEY, SQLTokenizer.MONEY, SQLTokenizer.DECIMAL, SQLTokenizer.NUMERIC, SQLTokenizer.REAL, SQLTokenizer.FLOAT, SQLTokenizer.DOUBLE, SQLTokenizer.DATE, SQLTokenizer.TIME, SQLTokenizer.TIMESTAMP, SQLTokenizer.SMALLDATETIME, SQLTokenizer.CHAR, SQLTokenizer.NCHAR, SQLTokenizer.VARCHAR, SQLTokenizer.NVARCHAR, SQLTokenizer.LONG, SQLTokenizer.LONGNVARCHAR, SQLTokenizer.LONGVARCHAR, SQLTokenizer.CLOB, SQLTokenizer.NCLOB, SQLTokenizer.UNIQUEIDENTIFIER, SQLTokenizer.JAVA_OBJECT, SQLTokenizer.SYSNAME};\r\n\tprivate static final int[] MISSING_SQL_DATATYPE = { SQLTokenizer.SQL_BIGINT , SQLTokenizer.SQL_BINARY , SQLTokenizer.SQL_BIT , SQLTokenizer.SQL_CHAR , SQLTokenizer.SQL_DATE , SQLTokenizer.SQL_DECIMAL , SQLTokenizer.SQL_DOUBLE , SQLTokenizer.SQL_FLOAT , SQLTokenizer.SQL_INTEGER , SQLTokenizer.SQL_LONGVARBINARY , SQLTokenizer.SQL_LONGVARCHAR , SQLTokenizer.SQL_REAL , SQLTokenizer.SQL_SMALLINT , SQLTokenizer.SQL_TIME , SQLTokenizer.SQL_TIMESTAMP , SQLTokenizer.SQL_TINYINT , SQLTokenizer.SQL_VARBINARY , SQLTokenizer.SQL_VARCHAR };\r\n    private static final int[] MISSING_INTO = {SQLTokenizer.INTO};\r\n\tprivate static final int[] MISSING_BETWEEN_IN = {SQLTokenizer.BETWEEN, SQLTokenizer.IN};\r\n\tprivate static final int[] MISSING_NOT_NULL = {SQLTokenizer.NOT, SQLTokenizer.NULL};\r\n    private static final int[] MISSING_NULL = {SQLTokenizer.NULL};\r\n\tprivate static final int[] MISSING_COMMA = {SQLTokenizer.COMMA};\r\n    private static final int[] MISSING_COMMA_PARENTHESIS = {SQLTokenizer.COMMA, SQLTokenizer.PARENTHESIS_R};\r\n    private static final int[] MISSING_PARENTHESIS_VALUES_SELECT = {SQLTokenizer.PARENTHESIS_L, SQLTokenizer.VALUES, SQLTokenizer.SELECT};\r\n    private static final int[] MISSING_TOKEN_LIST = {SQLTokenizer.COMMA, SQLTokenizer.FROM, SQLTokenizer.GROUP, SQLTokenizer.HAVING, SQLTokenizer.ORDER};\r\n\tprivate static final int[] MISSING_FROM = {SQLTokenizer.FROM};\r\n\tprivate static final int[] MISSING_SET = {SQLTokenizer.SET};\r\n\tprivate static final int[] MISSING_EQUALS = {SQLTokenizer.EQUALS};\r\n\tprivate static final int[] MISSING_WHERE = {SQLTokenizer.WHERE};\r\n\tprivate static final int[] MISSING_WHERE_COMMA = {SQLTokenizer.WHERE, SQLTokenizer.COMMA};\r\n    private static final int[] MISSING_ISOLATION = {SQLTokenizer.ISOLATION};\r\n    private static final int[] MISSING_LEVEL = {SQLTokenizer.LEVEL};\r\n    private static final int[] COMMANDS_TRANS_LEVEL = {SQLTokenizer.READ, SQLTokenizer.REPEATABLE, SQLTokenizer.SERIALIZABLE};\r\n    private static final int[] MISSING_READ = {SQLTokenizer.READ};\r\n    private static final int[] MISSING_COMM_UNCOMM = {SQLTokenizer.COMMITTED, SQLTokenizer.UNCOMMITTED};\r\n    private static final int[] MISSING_OPTIONS_DATATYPE = { SQLTokenizer.DEFAULT, SQLTokenizer.IDENTITY, SQLTokenizer.NOT, SQLTokenizer.NULL, SQLTokenizer.PRIMARY, SQLTokenizer.UNIQUE, SQLTokenizer.COMMA, SQLTokenizer.PARENTHESIS_R};\r\n    private static final int[] MISSING_NUMBERVALUE = {SQLTokenizer.NUMBERVALUE};\r\n    private static final int[] MISSING_AND = {SQLTokenizer.AND};\r\n    private static final int[] MISSING_JOIN = {SQLTokenizer.JOIN};\r\n    private static final int[] MISSING_OUTER_JOIN = {SQLTokenizer.OUTER, SQLTokenizer.JOIN};\r\n    private static final int[] MISSING_OJ = {SQLTokenizer.OJ};\r\n    private static final int[] MISSING_ON = {SQLTokenizer.ON};\r\n\tprivate static final int[] MISSING_KEYTYPE = {SQLTokenizer.PRIMARY, SQLTokenizer.UNIQUE, SQLTokenizer.FOREIGN};\r\n\tprivate static final int[] MISSING_KEY = {SQLTokenizer.KEY};\r\n    private static final int[] MISSING_REFERENCES = {SQLTokenizer.REFERENCES};\r\n\tprivate static final int[] MISSING_AS = {SQLTokenizer.AS};\r\n\tprivate static final int[] MISSING_SELECT = {SQLTokenizer.SELECT};\r\n\tprivate static final int[] MISSING_INTERVALS = {SQLTokenizer.SQL_TSI_FRAC_SECOND, SQLTokenizer.SQL_TSI_SECOND, SQLTokenizer.SQL_TSI_MINUTE, SQLTokenizer.SQL_TSI_HOUR, SQLTokenizer.SQL_TSI_DAY, SQLTokenizer.SQL_TSI_WEEK, SQLTokenizer.SQL_TSI_MONTH, SQLTokenizer.SQL_TSI_QUARTER, SQLTokenizer.SQL_TSI_YEAR, SQLTokenizer.MILLISECOND, SQLTokenizer.SECOND, SQLTokenizer.MINUTE, SQLTokenizer.HOUR, SQLTokenizer.DAY, SQLTokenizer.WEEK, SQLTokenizer.MONTH, SQLTokenizer.QUARTER, SQLTokenizer.YEAR, SQLTokenizer.D};\r\n\tprivate static final int[] MISSING_ALL = {SQLTokenizer.ALL};\r\n\tprivate static final int[] MISSING_THEN = {SQLTokenizer.THEN};\r\n\tprivate static final int[] MISSING_WHEN_ELSE_END = {SQLTokenizer.WHEN, SQLTokenizer.ELSE, SQLTokenizer.END};\r\n\tprivate static final int[] MISSING_ADD_ALTER_DROP = {SQLTokenizer.ADD, SQLTokenizer.ALTER, SQLTokenizer.DROP};\r\n\t\r\n\t\r\n}"},{"path":"/src/smallsql/junit/TestExceptionMethods.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * TestExceptionMethods.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 02.03.2005\r\n */\r\npackage smallsql.junit;\r\n\r\nimport java.io.File;\r\nimport java.sql.*;\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\npublic class TestExceptionMethods extends BasicTestCase{\r\n\r\n    public void testForwardOnly() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        try{\r\n            con.createStatement().execute(\"Create Table ExceptionMethods(v varchar(30))\");\r\n\r\n            con.createStatement().execute(\"Insert Into ExceptionMethods(v) Values('qwert')\");\r\n\r\n            ResultSet rs = con.createStatement().executeQuery(\"Select * from ExceptionMethods\");\r\n            assertEquals(true, rs.next());\r\n\r\n            try{\r\n                rs.isBeforeFirst();\r\n                fail(\"SQLException 'ResultSet is forward only' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n\r\n            try{\r\n                rs.isFirst();\r\n                fail(\"SQLException 'ResultSet is forward only' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n\r\n            try{\r\n                rs.first();\r\n                fail(\"SQLException 'ResultSet is forward only' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n\r\n            try{\r\n                rs.previous();\r\n                fail(\"SQLException 'ResultSet is forward only' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n\r\n            try{\r\n                rs.last();\r\n                fail(\"SQLException 'ResultSet is forward only' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n\r\n            try{\r\n                rs.isLast();\r\n                fail(\"SQLException 'ResultSet is forward only' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n\r\n            try{\r\n                rs.isAfterLast();\r\n                fail(\"SQLException 'ResultSet is forward only' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n\r\n            try{\r\n                rs.afterLast();\r\n                fail(\"SQLException 'ResultSet is forward only' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n\r\n            try{\r\n                rs.absolute(1);\r\n                fail(\"SQLException 'ResultSet is forward only' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n\r\n            try{\r\n                rs.relative(1);\r\n                fail(\"SQLException 'ResultSet is forward only' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }finally{\r\n            dropTable(con, \"ExceptionMethods\");\r\n        }\r\n    }\r\n\r\n\r\n    public void testGetConnection() throws Exception{\r\n        Connection con;\r\n        try{\r\n            con = DriverManager.getConnection(AllTests.JDBC_URL + \"?abc\");\r\n            con.close();\r\n            fail(\"SQLException should be thrown\");\r\n        }catch(SQLException ex){\r\n            // is OK\r\n        }\r\n        con = DriverManager.getConnection(AllTests.JDBC_URL + \"? \");\r\n        con.close();\r\n\r\n        con = DriverManager.getConnection(AllTests.JDBC_URL + \"?a=b; ; c=d  ; e = f; ; \");\r\n\r\n        // open 2 Connections with different written path\r\n        Connection con2 = DriverManager.getConnection( \"jdbc:smallsql:\" + new File( AllTests.CATALOG ).getAbsolutePath());\r\n        con.close();\r\n        con2.close();\r\n\r\n        con = DriverManager.getConnection( \"jdbc:smallsql:file:\" + AllTests.CATALOG );\r\n        con.close();\r\n    }\r\n\r\n\r\n    public void testDuplicatedColumnCreate() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        try{\r\n            st.execute(\"Create Table DuplicatedColumn(col INT, Col INT)\");\r\n            fail(\"SQLException 'Duplicated Column' should be throw\");\r\n        }catch(SQLException e){\r\n            assertSQLException(\"01000\", 0, e);\r\n        }\r\n    }\r\n\r\n\r\n    public void testDuplicatedColumnAlter() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"ALTER TABLE DuplicatedColumn Add Col INT\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }finally{\r\n            dropTable(con, \"DuplicatedColumn\");\r\n        }\r\n    }\r\n\r\n\r\n    public void testDuplicatedColumnInsert() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }finally{\r\n            dropTable(con, \"DuplicatedColumn\");\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * The fail of creating table should not produce any files \r\n     */\r\n    public void testDuplicatedCreateTable() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        try{\r\n            dropTable(con, \"DuplicatedTable\");\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedTable(col INT primary key)\");\r\n            int tableFileCount = countFiles(\"DuplicatedTable\");\r\n            try{\r\n                st.execute(\"Create Table DuplicatedTable(col INT primary key)\");\r\n                fail(\"SQLException 'Duplicated Table' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n            assertEquals(\"Additional Files created\",tableFileCount, countFiles(\"DuplicatedTable\"));\r\n        }finally{\r\n            dropTable(con, \"DuplicatedTable\");\r\n        }\r\n    }\r\n    \r\n    \r\n    private int countFiles(String fileNameStart){\r\n        int count = 0;\r\n        String names[] = new File(AllTests.CATALOG).list();\r\n        for(int i=0; i<names.length; i++){\r\n            if(names[i].startsWith(fileNameStart)){\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n\r\n    public void testAmbiguousColumn() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"create table foo (myint number)\");\r\n            st.execute(\"create table bar (myint number)\");\r\n            try{\r\n                st.executeQuery(\"select myint from foo, bar\");\r\n                fail(\"SQLException 'Ambiguous name' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }finally{\r\n            dropTable(con, \"foo\");\r\n            dropTable(con, \"bar\");\r\n        }\r\n    }\r\n\r\n\r\n    public void testClosedStatement() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.close();\r\n        try{\r\n            st.execute(\"Select 1\");\r\n            fail(\"Exception should throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"HY010\", 0, ex);\r\n        }\r\n        try{\r\n            st.executeQuery(\"Select 1\");\r\n            fail(\"Exception should throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"HY010\", 0, ex);\r\n        }\r\n        try{\r\n            st.executeUpdate(\"Select 1\");\r\n            fail(\"Exception should throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"HY010\", 0, ex);\r\n        }\r\n    }\r\n\r\n\r\n    public void testClosedPreparedStatement() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        PreparedStatement pr = con.prepareStatement(\"Select ?\");\r\n        pr.setInt(1, 1);\r\n        pr.close();\r\n        try{\r\n            pr.setInt(1, 1);\r\n            fail(\"Exception should throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"HY010\", 0, ex);\r\n        }\r\n        try{\r\n            pr.execute();\r\n            fail(\"Exception should throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"HY010\", 0, ex);\r\n        }\r\n        try{\r\n            pr.executeQuery();\r\n            fail(\"Exception should throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"HY010\", 0, ex);\r\n        }\r\n        try{\r\n            pr.executeUpdate();\r\n            fail(\"Exception should throw\");\r\n        }catch(SQLException ex){\r\n            assertSQLException(\"HY010\", 0, ex);\r\n        }\r\n    }\r\n\r\n}\r\n"},{"path":"/src/smallsql/database/SSConnection.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2011, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * SSConnection.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\nimport java.nio.channels.FileChannel;\r\nimport java.sql.CallableStatement;\r\nimport java.sql.Connection;\r\nimport java.sql.DatabaseMetaData;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.SQLException;\r\nimport java.sql.SQLWarning;\r\nimport java.sql.Savepoint;\r\nimport java.sql.Statement;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Properties;\r\nimport smallsql.database.language.Language;\r\n\r\npublic class SSConnection implements Connection {\r\n\r\n    private final boolean readonly;\r\n    private Database database;\r\n    private boolean autoCommit = true;\r\n    int isolationLevel = TRANSACTION_READ_COMMITTED; // see also getDefaultTransactionIsolation\r\n    private List commitPages = new ArrayList();\r\n    /** The time on which a transaction is starting. */\r\n    private long transactionTime;\r\n    private final SSDatabaseMetaData metadata;\r\n    private int holdability;\r\n    final Logger log;\r\n\r\n    SSConnection( Properties props ) throws SQLException{\r\n    \tSmallSQLException.setLanguage(props.get(\"locale\"));\r\n        log = new Logger();\r\n        String name = props.getProperty(\"dbpath\");\r\n        readonly = \"true\".equals(props.getProperty(\"readonly\"));\r\n        boolean create = \"true\".equals(props.getProperty(\"create\"));\r\n        database = Database.getDatabase(name, this, create);\r\n\t\tmetadata = new SSDatabaseMetaData(this);\r\n    }\r\n    \r\n    /**\r\n     * Create a copy of the Connection with it own transaction room.\r\n     * @param con the original Connection\r\n     */\r\n    SSConnection( SSConnection con ){\r\n        readonly = con.readonly;\r\n        database = con.database;\r\n        metadata = con.metadata;\r\n        log      = con.log;\r\n    }\r\n    \r\n    /**\r\n     * @param returnNull If null is a valid return value for the case of not connected to a database.\r\n     * @throws SQLException If not connected and returnNull is false.\r\n     */\r\n    Database getDatabase(boolean returnNull) throws SQLException{\r\n        testClosedConnection();\r\n    \tif(!returnNull && database == null) throw SmallSQLException.create(Language.DB_NOTCONNECTED);\r\n    \treturn database;\r\n    }\r\n\r\n    /**\r\n     * Get a monitor object for all synchronized blocks on connection base. Multiple calls return the same object.\r\n     * \r\n     * @return a unique object of this connection\r\n     */\r\n    Object getMonitor(){\r\n        return this;\r\n    }\r\n    \r\n    public Statement createStatement() throws SQLException {\r\n        return new SSStatement(this);\r\n    }\r\n    public PreparedStatement prepareStatement(String sql) throws SQLException {\r\n        return new SSPreparedStatement( this, sql);\r\n    }\r\n    public CallableStatement prepareCall(String sql) throws SQLException {\r\n        return new SSCallableStatement( this, sql);\r\n    }\r\n    \r\n    \r\n    public String nativeSQL(String sql){\r\n        return sql;\r\n    }\r\n    \r\n    \r\n    public void setAutoCommit(boolean autoCommit) throws SQLException {\r\n\t\tif(log.isLogging()) log.println(\"AutoCommit:\"+autoCommit);\r\n    \tif(this.autoCommit != autoCommit){\r\n    \t\tcommit();\r\n    \t\tthis.autoCommit = autoCommit;\r\n    \t}\r\n    }\r\n    \r\n    \r\n    public boolean getAutoCommit(){\r\n        return autoCommit;\r\n    }\r\n    \r\n    \r\n\t/**\r\n\t * Add a page for later commit or rollback. \r\n\t */\r\n\tvoid add(TransactionStep storePage) throws SQLException{\r\n\t\ttestClosedConnection();\r\n\t\tsynchronized(getMonitor()){\r\n            commitPages.add(storePage);\r\n        }\r\n\t}\r\n\t\r\n\t\r\n    public void commit() throws SQLException {\r\n        log.println(\"Commit\");\r\n        testClosedConnection();\r\n        synchronized(getMonitor()){\r\n    \ttry{\r\n\t            int count = commitPages.size();\r\n\t            for(int i=0; i<count; i++){\r\n\t                TransactionStep page = (TransactionStep)commitPages.get(i);\r\n\t                page.commit();\r\n\t            }\r\n\t\t\t\tfor(int i=0; i<count; i++){\r\n\t\t\t\t    TransactionStep page = (TransactionStep)commitPages.get(i);\r\n\t\t\t\t\tpage.freeLock();\r\n\t\t\t\t}\r\n\t            commitPages.clear();\r\n\t            transactionTime = System.currentTimeMillis();\r\n    \t}catch(Throwable e){\r\n    \t\trollback();\r\n    \t\tthrow SmallSQLException.createFromException(e);\r\n    \t}\r\n        }\r\n    }\r\n    \r\n\t\r\n\t/**\r\n\t * Discard all changes of a file because it was deleted.\r\n\t */\r\n\tvoid rollbackFile(FileChannel raFile) throws SQLException{\r\n\t\ttestClosedConnection();\r\n\t\t// remove the all commits that point to this table\r\n\t\tsynchronized(getMonitor()){\r\n            for(int i = commitPages.size() - 1; i >= 0; i--){\r\n                TransactionStep page = (TransactionStep)commitPages.get(i);\r\n                if(page.raFile == raFile){\r\n                    page.rollback();\r\n                    page.freeLock();\r\n                }\r\n            }\r\n        }\r\n\t}\r\n\t\r\n    \r\n    void rollback(int savepoint) throws SQLException{\r\n\t\ttestClosedConnection();\r\n\t\tsynchronized(getMonitor()){\r\n            for(int i = commitPages.size() - 1; i >= savepoint; i--){\r\n                TransactionStep page = (TransactionStep)commitPages.remove(i);\r\n                page.rollback();\r\n                page.freeLock();\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    public void rollback() throws SQLException {\r\n\t\tlog.println(\"Rollback\");\r\n\t\ttestClosedConnection();\r\n        synchronized(getMonitor()){\r\n            int count = commitPages.size();\r\n            for(int i=0; i<count; i++){\r\n                TransactionStep page = (TransactionStep)commitPages.get(i);\r\n                page.rollback();\r\n                page.freeLock();\r\n            }\r\n            commitPages.clear();\r\n\t\t\ttransactionTime = System.currentTimeMillis();\r\n        }\r\n    }\r\n    \r\n    \r\n    public void close() throws SQLException {\r\n        rollback();\r\n\t\tdatabase = null;\r\n        commitPages = null;\r\n\t\tDatabase.closeConnection(this);\r\n    }\r\n    \r\n\t/**\r\n     * Test if the connection was closed. for example from another thread.\r\n     * \r\n     * @throws SQLException\r\n     *             if the connection was closed.\r\n     */\r\n\tfinal void testClosedConnection() throws SQLException{\r\n\t\tif(isClosed()) throw SmallSQLException.create(Language.CONNECTION_CLOSED);\r\n\t}\r\n    \r\n    public boolean isClosed(){\r\n        return (commitPages == null);\r\n    }\r\n    \r\n    \r\n    public DatabaseMetaData getMetaData(){\r\n        return metadata;\r\n    }\r\n    \r\n    \r\n    public void setReadOnly(boolean readOnly){\r\n        //TODO Connection ReadOnly implementing\r\n    }\r\n    \r\n    \r\n    public boolean isReadOnly(){\r\n        return readonly;\r\n    }\r\n    \r\n    \r\n    public void setCatalog(String catalog) throws SQLException {\r\n        testClosedConnection();\r\n        database = Database.getDatabase(catalog, this, false);\r\n    }\r\n    \r\n    \r\n    public String getCatalog(){\r\n    \tif(database == null)\r\n    \t\treturn \"\";\r\n        return database.getName();\r\n    }\r\n    \r\n    \r\n    public void setTransactionIsolation(int level) throws SQLException {\r\n    \tif(!metadata.supportsTransactionIsolationLevel(level)) {\r\n    \t\tthrow SmallSQLException.create(Language.ISOLATION_UNKNOWN, String.valueOf(level));\r\n    \t}\r\n        isolationLevel = level;        \r\n    }\r\n    \r\n    \r\n    public int getTransactionIsolation(){\r\n        return isolationLevel;\r\n    }\r\n    \r\n    \r\n    public SQLWarning getWarnings(){\r\n        return null;\r\n    }\r\n    \r\n    \r\n    public void clearWarnings(){\r\n        //TODO support for Warnings\r\n    }\r\n    \r\n    \r\n    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {\r\n        return new SSStatement( this, resultSetType, resultSetConcurrency);\r\n    }\r\n    \r\n    \r\n    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {\r\n        return new SSPreparedStatement( this, sql, resultSetType, resultSetConcurrency);\r\n    }\r\n    \r\n    \r\n    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {\r\n        return new SSCallableStatement( this, sql, resultSetType, resultSetConcurrency);\r\n    }\r\n    \r\n    \r\n    public Map getTypeMap(){\r\n        return null;\r\n    }\r\n    \r\n    \r\n    public void setTypeMap(Map map){\r\n        //TODO support for TypeMap\r\n    }\r\n    \r\n    \r\n    public void setHoldability(int holdability){\r\n        this.holdability = holdability;\r\n    }\r\n    \r\n    \r\n    public int getHoldability(){\r\n        return holdability;\r\n    }\r\n    \r\n    \r\n\tint getSavepoint() throws SQLException{\r\n\t\ttestClosedConnection();\r\n\t\treturn commitPages.size(); // the call is atomic, that it need not be synchronized\r\n\t}\r\n\t\r\n\t\r\n    public Savepoint setSavepoint() throws SQLException {\r\n        return new SSSavepoint(getSavepoint(), null, transactionTime);\r\n    }\r\n    \r\n    \r\n    public Savepoint setSavepoint(String name) throws SQLException {\r\n\t\treturn new SSSavepoint(getSavepoint(), name, transactionTime);\r\n    }\r\n    \r\n    \r\n    public void rollback(Savepoint savepoint) throws SQLException {\r\n    \tif(savepoint instanceof SSSavepoint){\r\n    \t\tif(((SSSavepoint)savepoint).transactionTime != transactionTime){\r\n\t\t\t\tthrow SmallSQLException.create(Language.SAVEPT_INVALID_TRANS);\r\n    \t\t}\r\n    \t\trollback( savepoint.getSavepointId() );\r\n    \t\treturn;\r\n    \t}\r\n        throw SmallSQLException.create(Language.SAVEPT_INVALID_DRIVER, savepoint);\r\n    }\r\n    \r\n    \r\n    public void releaseSavepoint(Savepoint savepoint) throws SQLException {\r\n\t\tif(savepoint instanceof SSSavepoint){\r\n\t\t\t((SSSavepoint)savepoint).transactionTime = 0;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthrow SmallSQLException.create(Language.SAVEPT_INVALID_DRIVER, new Object[] { savepoint });\r\n    }\r\n    \r\n    \r\n    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {\r\n\t\t//TODO resultSetHoldability\r\n\t\treturn new SSStatement( this, resultSetType, resultSetConcurrency);\r\n    }\r\n    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {\r\n\t\t//TODO resultSetHoldability\r\n\t\treturn new SSPreparedStatement( this, sql);\r\n    }\r\n    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {\r\n    \t//TODO resultSetHoldability\r\n\t\treturn new SSCallableStatement( this, sql, resultSetType, resultSetConcurrency);\r\n    }\r\n    \r\n    \r\n    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {\r\n        SSPreparedStatement pr = new SSPreparedStatement( this, sql);\r\n        pr.setNeedGeneratedKeys(autoGeneratedKeys);\r\n        return pr;\r\n    }\r\n    \r\n    \r\n    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {\r\n        SSPreparedStatement pr = new SSPreparedStatement( this, sql);\r\n        pr.setNeedGeneratedKeys(columnIndexes);\r\n        return pr;\r\n    }\r\n    \r\n    \r\n    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {\r\n        SSPreparedStatement pr = new SSPreparedStatement( this, sql);\r\n        pr.setNeedGeneratedKeys(columnNames);\r\n        return pr;\r\n    }\r\n}"},{"path":"/src/smallsql/junit/TestOrderBy.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * TestOrderBy.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.junit;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * @author Administrator\r\n *\r\n * To change the template for this generated type comment go to\r\n * Window - Preferences - Java - Code Generation - Code and Comments\r\n */\r\npublic class TestOrderBy extends BasicTestCase {\r\n\r\n\tstatic private boolean init;\r\n\tprivate static final String table1 = \"table_OrderBy1\";\r\n\tprivate static final String table2 = \"table_OrderBy2\";\r\n\tprivate static final String table3 = \"table_OrderBy3\";\r\n\tstatic private int valueCount;\r\n\t\r\n\tpublic void init(){\r\n\t\tif(init) return;\r\n\t\ttry{\r\n\t\t\tConnection con = AllTests.getConnection();\r\n\t\t\tdropTable( con, table1 );\r\n\t\t\tdropTable( con, table2 );\r\n\t\t\tdropTable( con, table3 );\r\n\t\t\tStatement st = con.createStatement();\r\n\t\t\tst.execute(\"create table \" + table1 + \"(v varchar(30), c char(30), nv nvarchar(30),i int, d float, r real, bi bigint, b boolean)\");\r\n\t\t\tst.execute(\"create table \" + table2 + \"(c2 char(30))\");\r\n\t\t\tst.execute(\"create table \" + table3 + \"(vc varchar(30), vb varbinary(30))\");\r\n\t\t\tst.close();\r\n\t\t\t\r\n\t\t\tPreparedStatement pr = con.prepareStatement(\"INSERT into \" + table1 + \"(v,c,nv,i,d,r,bi,b) Values(?,?,?,?,?,?,?,?)\");\r\n\t\t\tPreparedStatement pr2= con.prepareStatement(\"INSERT into \" + table2 + \"(c2) Values(?)\");\r\n\t\t\tfor(int i=150; i>-10; i--){\r\n\t\t\t\tpr.setString( 1, String.valueOf(i));\r\n\t\t\t\tpr.setString( 2, String.valueOf(i));\r\n\t\t\t\tpr.setString( 3, String.valueOf( (char)i ));\r\n\t\t\t\tpr.setInt   ( 4, i );\r\n\t\t\t\tpr.setDouble( 5, i );\r\n\t\t\t\tpr.setFloat ( 6, i );\r\n\t\t\t\tpr.setInt   ( 7, i );\r\n\t\t\t\tpr.setBoolean( 8, i == 0 );\r\n\t\t\t\tpr.execute();\r\n\t\t\t\tpr2.setString( 1, String.valueOf(i));\r\n\t\t\t\tpr2.execute();\r\n\t\t\t\tvalueCount++;\r\n\t\t\t}\r\n\t\t\tpr.setObject( 1, null, Types.VARCHAR);\r\n\t\t\tpr.setObject( 2, null, Types.VARCHAR);\r\n\t\t\tpr.setObject( 3, null, Types.VARCHAR);\r\n\t\t\tpr.setObject( 4, null, Types.VARCHAR);\r\n\t\t\tpr.setObject( 5, null, Types.VARCHAR);\r\n\t\t\tpr.setObject( 6, null, Types.VARCHAR);\r\n\t\t\tpr.setObject( 7, null, Types.VARCHAR);\r\n\t\t\tpr.setObject( 8, null, Types.VARCHAR);\r\n\t\t\tpr.execute();\r\n\t\t\tpr2.setObject( 1, null, Types.VARCHAR);\r\n\t\t\tpr2.execute();\r\n\t\t\tpr2.setString( 1, \"\");\r\n\t\t\tpr2.execute();\r\n\r\n\t\t\tpr.close();\r\n\r\n\t\t\tpr = con.prepareStatement(\"INSERT into \" + table3 + \"(vc, vb) Values(?,?)\");\r\n\t\t\tpr.setString( 1, table3);\r\n\t\t\tpr.setBytes( 2, table3.getBytes());\r\n\t\t\tpr.execute();\r\n\t\t\tpr.setString( 1, \"\");\r\n\t\t\tpr.setBytes( 2, new byte[0]);\r\n\t\t\tpr.execute();\r\n\t\t\tpr.setString( 1, null);\r\n\t\t\tpr.setBytes( 2, null);\r\n\t\t\tpr.execute();\r\n\t\t\t\r\n\t\t\tinit = true;\r\n\t\t}catch(Throwable e){\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\tpublic void testOrderBy_char() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by c\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = rs.getString(\"c\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"c\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"c\");\r\n\t\t\tassertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\trs.close();\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\r\n\tpublic void testOrderBy_varchar() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\r\n\tpublic void testOrderBy_varchar_asc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v ASC\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\trs.close();\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\r\n\tpublic void testOrderBy_varchar_desc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\t\r\n\tpublic void testOrderBy_varchar_DescAsc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\t\r\n\tpublic void testOrderBy_varchar_GroupBy() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT first(v) cc FROM \" + table1 + \" Group By i ORDER  by first(V)\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = rs.getString(\"cc\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"cc\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( rs.getString(\"cc\") ) < 0 );\r\n\t\t\toldValue = rs.getString(\"cc\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\r\n\tpublic void testOrderBy_varchar_Join() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" t1 Inner join \"+table2+\" t2 on t1.c=t2.c2  ORDER  by v\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( rs.getString(\"v\") ) < 0 );\r\n\t\t\toldValue = rs.getString(\"v\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\r\n\tpublic void testOrderBy_nvarchar() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by nv\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = rs.getString(\"nv\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"nv\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( String.CASE_INSENSITIVE_ORDER.compare( oldValue, rs.getString(\"nv\") ) <= 0 );\r\n\t\t\toldValue = rs.getString(\"nv\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\r\n\tpublic void testOrderBy_int() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\r\n\tpublic void test_function() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tint oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by abs(i)\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\tassertNull(rs.getObject(\"i\"));\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = Math.abs( rs.getInt(\"i\") );\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tint newValue = Math.abs( rs.getInt(\"i\") );\r\n\t\t\tassertTrue( oldValue <= newValue );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\r\n\tpublic void test_functionAscDesc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tint oldValue;\r\n\t\tint oldValue2;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by abs(i) Asc, i desc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\tassertNull(rs.getObject(\"i\"));\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = Math.abs( rs.getInt(\"i\") );\r\n\t\toldValue2 = rs.getInt(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tint newValue2 = rs.getInt(\"i\");\r\n\t\t\tint newValue = Math.abs( newValue2 );\r\n\t\t\tassertTrue( oldValue <= newValue );\r\n\t\t\tif(oldValue == newValue){\r\n\t\t\t\tassertTrue( oldValue2 > newValue2 );\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t\toldValue2 = newValue2;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\r\n\tpublic void testOrderBy_int_asc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Asc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\r\n\tpublic void testOrderBy_int_desc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Desc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tInteger newValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\r\n\tpublic void testOrderBy_double() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tDouble oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by d\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Double)rs.getObject(\"d\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Double)rs.getObject(\"d\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Double)rs.getObject(\"d\") ) < 0 );\r\n\t\t\toldValue = (Double)rs.getObject(\"d\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\r\n\tpublic void testOrderBy_real() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tFloat oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by r\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Float)rs.getObject(\"r\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Float)rs.getObject(\"r\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Float)rs.getObject(\"r\") ) < 0 );\r\n\t\t\toldValue = (Float)rs.getObject(\"r\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\r\n\tpublic void test_bigint() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tLong oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by bi\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Long)rs.getObject(\"bi\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Long)rs.getObject(\"bi\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Long)rs.getObject(\"bi\") ) < 0 );\r\n\t\t\toldValue = (Long)rs.getObject(\"bi\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\r\n\tpublic void test_bigint_withDoublicateValues() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tLong oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT bi/2 bi_2 FROM \" + table1 + \" ORDER  by (bi/2)\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Long)rs.getObject(\"bi_2\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Long)rs.getObject(\"bi_2\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tLong newValue = (Long)rs.getObject(\"bi_2\");\r\n\t\t\tassertTrue( oldValue + \"<=\"+newValue, oldValue.compareTo( newValue ) <= 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\r\n\tpublic void test_boolean() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tboolean oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by b\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = rs.getBoolean(\"b\");\r\n\t\tassertFalse(oldValue);\r\n\t\tassertTrue(rs.wasNull());\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getBoolean(\"b\");\r\n\t\tassertFalse(oldValue);\t\t\r\n\t\tassertFalse(rs.wasNull());\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(!oldValue && rs.next()){\r\n\t\t\toldValue = rs.getBoolean(\"b\");\r\n\t\t\tassertFalse(rs.wasNull());\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\twhile(oldValue && rs.next()){\r\n\t\t\toldValue = rs.getBoolean(\"b\");\r\n\t\t\tassertFalse(rs.wasNull());\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertFalse(rs.next());\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\t\r\n\r\n\tpublic void testVarcharEmpty() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table3 + \" ORDER  by vc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\t\t\r\n\t\tassertNull( rs.getObject(\"vc\") );\r\n\r\n\t\tassertTrue( rs.next() );\r\n\t\tassertEquals( \"\", rs.getObject(\"vc\") );\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\tassertEquals( table3, rs.getObject(\"vc\") );\r\n\t\t\r\n\t\tassertFalse( rs.next() );\r\n\t}\r\n\t\r\n\r\n\tpublic void testVarbinaryEmpty() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table3 + \" ORDER  by vb\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\t\t\r\n\t\tassertNull( rs.getObject(\"vb\") );\r\n\r\n\t\tassertTrue( rs.next() );\r\n\t\tassertEqualsObject( \"\", new byte[0], rs.getObject(\"vb\"), false );\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\tassertEqualsObject( \"\", table3.getBytes(), rs.getObject(\"vb\"), false );\r\n\t\t\r\n\t\tassertFalse( rs.next() );\r\n\t}\r\n\r\n\r\n\tpublic void test2Columns() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs = null;\r\n\t\tString oldValue;\r\n\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1+\",\"+table2+\" ORDER  by v, c2\");\r\n\r\n\t\tassertTrue( rs.next() );\r\n\t\tassertNull( rs.getObject(\"v\") );\r\n\t\tassertNull( rs.getObject(\"c2\") );\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"c2\");\r\n\r\n\t\tint count = 1;\r\n\t\twhile(rs.next() && rs.getString(\"v\") == null){\r\n\t\t\tString newValue = rs.getString(\"c2\");\r\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount+1, count );\r\n\t\t\r\n\t\tboolean isNext = true;\r\n\t\twhile(isNext){\r\n\t\t\tString vValue = rs.getString(\"v\");\r\n\t\t\tassertNull( rs.getObject(\"c2\") );\r\n\t\t\r\n\t\t\tassertTrue( rs.next() );\r\n\t\t\toldValue = rs.getString(\"c2\");\r\n\t\t\tassertEquals( vValue, rs.getString(\"v\") );\r\n\r\n\t\t\tisNext = rs.next();\r\n\t\t\tcount = 1;\r\n\t\t\twhile(isNext && vValue.equals(rs.getString(\"v\"))){\r\n\t\t\t\tString newValue = rs.getString(\"c2\");\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\r\n\t\t\t\toldValue = newValue;\r\n\t\t\t\tcount++;\r\n\t\t\t\tisNext = rs.next();\r\n\t\t\t}\r\n\t\t\tassertEquals( valueCount+1, count );\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\r\n\tpublic void testOrderBy_Scollable() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n\t\tResultSet rs;\r\n\t\tint count;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");\r\n\t\t\r\n\t\t//jetzt irgendwo in die Mitte scrollen\r\n\t\trs.next();\r\n\t\trs.next();\r\n\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen\r\n\t\t\r\n\t\trs.last();\r\n\t\tcount = 0;\r\n\t\twhile(rs.previous()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\r\n\t\r\n\tpublic void testOrderBy_ScollableDesc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n\t\tResultSet rs;\r\n\t\tint count;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");\r\n\t\t\r\n\t\t//jetzt irgendwo in die Mitte scrollen\r\n\t\trs.next();\r\n\t\trs.next();\r\n\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen\r\n\t\t\r\n\t\trs.last();\r\n\t\tcount = 0;\r\n\t\twhile(rs.previous()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\t}\r\n\r\n\t\r\n\tpublic void testOrderBy_Scollable2() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n\t\tResultSet rs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");\r\n\r\n\t\t\r\n\t\tint colCount = rs.getMetaData().getColumnCount();\r\n\t\tArrayList result = new ArrayList();\r\n\t\twhile(rs.next()){\r\n\t\t\tObject[] row = new Object[colCount];\r\n\t\t\tfor(int i=0; i<colCount; i++){\r\n\t\t\t\trow[i] = rs.getObject(i+1);\r\n\t\t\t}\r\n\t\t\tresult.add(row);\r\n\t\t}\r\n\t\t\r\n\t\tint rowCount = result.size();\r\n\t\twhile(rs.previous()){\r\n\t\t\tObject[] row = (Object[])result.get(--rowCount);\r\n\t\t\tfor(int i=0; i<colCount; i++){\r\n\t\t\t\tassertEquals( \"Difference in row:\"+rowCount, row[i], rs.getObject(i+1));\r\n\t\t\t}\r\n\t\t}\r\n\t\tassertEquals( \"RowCount different between next and previous:\"+rowCount, 0, rowCount);\r\n\t}\r\n\r\n\t\r\n\tpublic void testUnion() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT v, 5 as Const FROM \" + table1 + \" Union All Select vc, 6 From \" + table3 + \" ORDER by v\");\r\n\t\t\r\n\t\tassertRSMetaData(rs, new String[]{\"v\", \"Const\"}, new int[]{Types.VARCHAR, Types.INTEGER});\r\n\t\t\r\n\t\tassertTrue( rs.next() );\t\t\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\tassertNull(oldValue);\r\n\t\t\r\n\t\tassertTrue( rs.next() );\t\t\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\tassertNull(oldValue);\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 3;\r\n\t\twhile(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount+4, count );\r\n\t}\r\n\r\n\r\n}\r\n"},{"path":"/src/smallsql/junit/BasicTestCase.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * Column.java\r\n * ---------------\r\n * BasicTestCase: Volker Berlin\r\n * \r\n */\r\npackage smallsql.junit;\r\n\r\nimport junit.framework.*;\r\n\r\nimport java.io.*;\r\nimport java.math.BigDecimal;\r\nimport java.sql.*;\r\nimport java.text.DateFormatSymbols;\r\n\r\npublic class BasicTestCase extends TestCase {\r\n\r\n\t/** Localized 3-letters months */\r\n\tprotected static final String[] MONTHS = \r\n\t\tnew DateFormatSymbols().getShortMonths();\r\n\r\n\tpublic BasicTestCase(){\r\n        super();\r\n    }\r\n\r\n    public BasicTestCase(String name){\r\n        super(makeNameValid(name));\r\n    }\r\n    \r\n    private static String makeNameValid(String name){\r\n    \treturn name.replace(',' , ';').replace('(','{');\r\n    }\r\n    \r\n    void dropTable(Connection con, String name) throws SQLException{\r\n\t\ttry {\r\n\t\t\tStatement st = con.createStatement();\r\n\t\t\tst.execute(\"drop table \"+name);\r\n\t\t\tst.close();\r\n\t\t} catch (SQLException e) {\r\n            String msg = e.getMessage();\r\n            if(msg.indexOf(\"[SmallSQL]Table\")==0 && msg.indexOf(name)>0 && msg.indexOf(\"can't be dropped.\")>0 ){\r\n                return;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    void dropView(Connection con, String name){\r\n\t\ttry {\r\n\t\t\tStatement st = con.createStatement();\r\n\t\t\tst.execute(\"drop view \"+name);\r\n\t\t\tst.close();\r\n\t\t} catch (SQLException e) {/* ignore it, if the view not exist */}\r\n    }\r\n\r\n\tpublic void assertRSMetaData( ResultSet rs, String[] colNames, int[] types) throws Exception{\r\n\t\tResultSetMetaData rm = rs.getMetaData();\r\n\t\tint count = rm.getColumnCount();\r\n\t\tassertEquals( \"Column count:\", colNames.length, count);\r\n\t\tfor(int i=1; i<=count; i++){\r\n\t\t\tassertEquals(\"Col \"+i+\" name\", colNames[i-1], rm.getColumnName(i));\r\n\t\t\tassertEquals(\"Col \"+i+\" label\", colNames[i-1], rm.getColumnLabel(i));\r\n\t\t\tassertEquals(\"Col \"+i+\" type\", types   [i-1], rm.getColumnType(i));\r\n\t\t\tswitch(types[i-1]){\r\n\t\t\t\tcase Types.VARCHAR:\r\n\t\t\t\t\tassertTrue  (\"Wrong Precision (\" + rm.getColumnTypeName(i) + \") for Column \"+i+\": \"+rm.getPrecision(i), rm.getPrecision(i) > 0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Types.INTEGER:\r\n\t\t\t\t\tassertTrue  (\"Wrong Precision (\" + rm.getColumnTypeName(i) + \") for Column \"+i, rm.getPrecision(i) > 0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate final static char[] digits = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};\r\n\tprivate static String bytes2hex( byte[] bytes ){\r\n\t\tStringBuffer buf = new StringBuffer(bytes.length << 1);\r\n\t\tfor(int i=0; i<bytes.length; i++){\r\n\t\t\tbuf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n\t\t\tbuf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n\t\t}\r\n\t\treturn buf.toString();\r\n\t}\r\n\t\r\n\tpublic void assertEqualsObject( String msg, Object obj1, Object obj2 ){\r\n\t\tif(obj1 instanceof byte[]){\r\n\t\t\tif(!java.util.Arrays.equals( (byte[])obj1, (byte[])obj2)){\r\n\t\t\t\tfail(msg + \" expected:\" + bytes2hex((byte[])obj1)+ \" but was:\"+bytes2hex((byte[])obj2));\r\n\t\t\t}\r\n\t\t}else{ \r\n\t\t\tif(obj1 instanceof BigDecimal)\r\n\t\t\t\tif(((BigDecimal)obj1).compareTo((BigDecimal)obj2) == 0) return;\r\n\t\t\r\n\t\t\tassertEquals( msg, obj1, obj2);\r\n\t\t}\r\n\t}\r\n\t\r\n    public void assertEqualsObject( String msg, Object obj1, Object obj2, boolean needTrim ){\r\n        if(needTrim && obj1 != null){\r\n            // trim for CHAR and BINARY\r\n            if(obj1 instanceof String) obj1 = ((String)obj1).trim();\r\n            if(obj1 instanceof byte[]){\r\n                byte[] tmp = (byte[])obj1;\r\n                int k=tmp.length-1;\r\n                for(; k>= 0; k--) if(tmp[k] != 0) break;\r\n                k++;\r\n                byte[] tmp2 = new byte[k];\r\n                System.arraycopy( tmp, 0, tmp2, 0, k);\r\n                obj1 = tmp2;\r\n            }\r\n        }\r\n\t\tif(needTrim && obj2 != null){\r\n\t\t\t// trim for CHAR and BINARY\r\n\t\t\tif(obj2 instanceof String) obj2 = ((String)obj2).trim();\r\n\t\t\tif(obj2 instanceof byte[]){\r\n\t\t\t\tbyte[] tmp = (byte[])obj2;\r\n\t\t\t\tint k=tmp.length-1;\r\n\t\t\t\tfor(; k>= 0; k--) if(tmp[k] != 0) break;\r\n\t\t\t\tk++;\r\n\t\t\t\tbyte[] tmp2 = new byte[k];\r\n\t\t\t\tSystem.arraycopy( tmp, 0, tmp2, 0, k);\r\n\t\t\t\tobj2 = tmp2;\r\n\t\t\t}\r\n\t\t}\r\n\t\tassertEqualsObject( msg, obj1, obj2);\r\n    }\r\n    \r\n    \r\n\tvoid assertRowCount(int sollCount, String sql ) throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs = st.executeQuery(sql);\r\n        assertRowCount(sollCount,rs);\r\n    }\r\n    \r\n    \r\n    void assertRowCount(int sollCount, ResultSet rs ) throws Exception{\r\n\t\tint colCount = rs.getMetaData().getColumnCount();\r\n\t\tint count = 0;\r\n\t\t//System.out.println(sql);\r\n\t\twhile(rs.next()){\r\n\t\t\tcount++;\r\n\t\t\tfor(int i=1; i<=colCount; i++){\r\n\t\t\t\trs.getObject(i);\r\n\t\t\t\t//System.out.print( \" \"+rs.getObject(i));\r\n\t\t\t}\r\n\t\t\t//System.out.println();\r\n\t\t}\r\n\t\tassertEquals( \"Wrong row count\", sollCount, count);\r\n\t\tfor(int i=1; i<=colCount; i++){\r\n\t\t\ttry{\r\n\t\t\t\t// if not a SQLException occur then it is an error\r\n\t\t\t\tfail( \"Column:\"+i+\" Value:\"+String.valueOf(rs.getObject(i)));\r\n\t\t\t}catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n\t\t}\r\n\t\tassertFalse( \"Scroll after last\", rs.next() );\r\n\t}\r\n\r\n\t\r\n    /**\r\n     * Identical to the Implementation from Utils.string2boolean\r\n     */\r\n    private boolean string2boolean( String val){\r\n        try{\r\n            return Double.parseDouble( val ) != 0;\r\n        }catch(NumberFormatException e){/*ignore it if it not a number*/}\r\n        return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );\r\n    }\r\n\t\r\n\t/**\r\n\t * Test a single Value of a the ResultSet that was produce from the SQL\r\n\t */\r\n   \tvoid assertEqualsRsValue(Object obj, String sql) throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs = st.executeQuery(sql);\r\n\t\tassertTrue( \"No row produce\", rs.next());\r\n        assertEqualsRsValue(obj,rs,false);\r\n    }\r\n    \r\n    \r\n    void assertEqualsRsValue(Object obj, ResultSet rs, boolean needTrim) throws Exception{\r\n        String name = rs.getMetaData().getColumnName(1);\r\n\t\tassertEqualsObject( \"Values not identical on read:\", obj, rs.getObject(name), needTrim);\r\n\t\tif(obj instanceof Time){\r\n\t\t\tassertEquals(\"Time is different:\", obj, rs.getTime(name) );\r\n\t\t\tassertEquals(\"Time String is different:\", obj.toString(), rs.getString(name) );\r\n\t\t}\r\n\t\tif(obj instanceof Timestamp){\r\n\t\t\tassertEquals(\"Timestamp is different:\", obj, rs.getTimestamp(name) );\r\n\t\t\tassertEquals(\"Timestamp String is different:\", obj.toString(), rs.getString(name) );\r\n\t\t}\r\n\t\tif(obj instanceof Date){\r\n\t\t\tassertEquals(\"Date is different:\", obj, rs.getDate(name) );\r\n\t\t\tassertEquals(\"Date String is different:\", obj.toString(), rs.getString(name) );\r\n\t\t}\r\n\t\tif(obj instanceof String){\r\n            String str = (String)obj;\r\n            assertEqualsObject(\"String is different:\", str, rs.getString(name), needTrim );\r\n\t\t\tassertEquals(\"String Boolean is different:\", string2boolean(str), rs.getBoolean(name) );\r\n            try{\r\n                assertEquals(\"String Long is different:\", Long.parseLong(str), rs.getLong(name) );\r\n            }catch(NumberFormatException ex){/* ignore */}\r\n            try{\r\n                assertEquals(\"String Integer is different:\", Integer.parseInt(str), rs.getInt(name) );\r\n            }catch(NumberFormatException ex){/* ignore */}\r\n            try{\r\n                assertEquals(\"String Float is different:\", Float.parseFloat(str), rs.getFloat(name), 0.0 );\r\n            }catch(NumberFormatException ex){/* ignore */}\r\n            try{\r\n                assertEquals(\"String Double is different:\", Double.parseDouble(str), rs.getDouble(name), 0.0 );\r\n            }catch(NumberFormatException ex){/* ignore */}\r\n\t\t}\r\n\t\tif(obj instanceof BigDecimal){\r\n            if(!needTrim){\r\n                assertEquals(\"BigDecimal is different:\", obj, rs.getBigDecimal(name) );\r\n                assertEquals(\"Scale is different:\", ((BigDecimal)obj).scale(), rs.getMetaData().getScale(1));\r\n            }\r\n            assertEquals(\"Scale Meta is different:\", rs.getBigDecimal(name).scale(), rs.getMetaData().getScale(1));\r\n\t\t\tBigDecimal big2 = ((BigDecimal)obj).setScale(2,BigDecimal.ROUND_HALF_EVEN);\r\n\t\t\tassertEquals(\"BigDecimal mit scale is different:\", big2, rs.getBigDecimal(name, 2) );\r\n\t\t}\r\n\t\tif(obj instanceof Integer){\r\n\t\t\tassertEquals(\"Scale is different:\", 0, rs.getMetaData().getScale(1));\r\n\t\t}\r\n\t\tif(obj instanceof Number){\r\n            long longValue = ((Number)obj).longValue();\r\n\t\t\tint intValue = ((Number)obj).intValue();\r\n            if(longValue >= Integer.MAX_VALUE)\r\n                intValue = Integer.MAX_VALUE;\r\n            if(longValue <= Integer.MIN_VALUE)\r\n                intValue = Integer.MIN_VALUE;\r\n\t\t\tassertEquals(\"int is different:\", intValue, rs.getInt(name) );\r\n\t\t\tassertEquals(\"long is different:\", longValue, rs.getLong(name) );\r\n\t\t\tif(intValue >= Short.MIN_VALUE && intValue <= Short.MAX_VALUE)\r\n\t\t\t\tassertEquals(\"short is different:\", (short)intValue, rs.getShort(name) );\r\n\t\t\tif(intValue >= Byte.MIN_VALUE && intValue <= Byte.MAX_VALUE)\r\n\t\t\t\tassertEquals(\"byte is different:\", (byte)intValue, rs.getByte(name) );\r\n\t\t\t\r\n\t\t\tdouble value = ((Number)obj).doubleValue();\r\n\t\t\tassertEquals(\"Double is different:\", value, rs.getDouble(name),0.0 );\r\n\t\t\tassertEquals(\"Float is different:\", (float)value, rs.getFloat(name),0.0 );\r\n\t\t\tString valueStr = obj.toString();\r\n            if(!needTrim){\r\n                assertEquals(\"Number String is different:\", valueStr, rs.getString(name) );\r\n            }\r\n\t\t\tBigDecimal decimal = Double.isInfinite(value) || Double.isNaN(value) ? null : new BigDecimal(valueStr);\r\n            assertEqualsObject(\"Number BigDecimal is different:\", decimal, rs.getBigDecimal(name) );\r\n\t\t\tassertEquals(\"Number boolean is different:\", value != 0, rs.getBoolean(name) );\r\n\t\t}\r\n\t\tif(obj == null){\r\n\t\t\tassertNull(\"String is different:\", rs.getString(name) );\r\n\t\t\tassertNull(\"Date is different:\", rs.getDate(name) );\r\n\t\t\tassertNull(\"Time is different:\", rs.getTime(name) );\r\n\t\t\tassertNull(\"Timestamp is different:\", rs.getTimestamp(name) );\r\n\t\t\tassertNull(\"BigDecimal is different:\", rs.getBigDecimal(name) );\r\n\t\t\tassertNull(\"BigDecimal with scale is different:\", rs.getBigDecimal(name, 2) );\r\n\t\t\tassertNull(\"Bytes with scale is different:\", rs.getBytes(name) );\r\n\t\t\tassertEquals(\"Double is different:\", 0, rs.getDouble(name),0 );\r\n\t\t\tassertEquals(\"Float is different:\", 0, rs.getFloat(name),0 );\r\n\t\t\tassertEquals(\"Long is different:\", 0, rs.getLong(name) );\r\n\t\t\tassertEquals(\"Int is different:\", 0, rs.getInt(name) );\r\n\t\t\tassertEquals(\"SmallInt is different:\", 0, rs.getShort(name) );\r\n\t\t\tassertEquals(\"TinyInt is different:\", 0, rs.getByte(name) );\r\n\t\t\tassertEquals(\"Boolean is different:\", false, rs.getBoolean(name) );\r\n\t\t}\r\n\t\tif(obj instanceof byte[]){\r\n\t\t    assertTrue(\"Binary should start with 0x\", rs.getString(name).startsWith(\"0x\"));\r\n\t\t}\r\n\t\t\r\n\t\tResultSetMetaData metaData = rs.getMetaData();\r\n\t\tString className = metaData.getColumnClassName(1);\r\n\t\tassertNotNull( \"ClassName:\", className);\r\n\t\tif(obj != null){\r\n\t\t\tClass gotClass = Class.forName(className);\r\n\t\t\tClass objClass = obj.getClass();\r\n\t\t\tString objClassName = objClass.getName();\r\n\t\t\t\r\n\t\t\tint expectedLen = metaData.getColumnDisplaySize(1);\r\n\r\n\t\t\t// B/CLOBs must be treated as special cases\t\t\t\r\n\t\t\tif (gotClass.equals(java.sql.Blob.class)) {\r\n\t\t\t\tassertTrue(\r\n\t\t\t\t\t\"ClassName assignable: \"+className+\"<->\"+objClassName,\r\n\t\t\t\t\tobjClass.equals(new byte[0].getClass()));\r\n\r\n\t\t\t\tString message = \"Check DisplaySize: \" + expectedLen + \"!=\" + Integer.MAX_VALUE + \")\";\r\n\t\t\t\tassertTrue( message, expectedLen == Integer.MAX_VALUE );\r\n\t\t\t}\r\n\t\t\telse if (gotClass.equals(java.sql.Clob.class)) { // same as NCLOB\r\n\t\t\t\tassertTrue(\r\n\t\t\t\t\t\"ClassName assignable: \"+className+\"<->\"+objClassName,\r\n\t\t\t\t\tobjClass.equals(String.class));\r\n\r\n\t\t\t\tString message = \"Check DisplaySize: \" + expectedLen + \"!=\" + Integer.MAX_VALUE + \")\";\r\n\t\t\t\tassertTrue( message, expectedLen == Integer.MAX_VALUE );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tString foundStr = rs.getString(name);\r\n\t\t\t\t\r\n\t\t\t\tassertTrue(\"ClassName assignable: \"+className+\"<->\"+objClassName, gotClass.isAssignableFrom(objClass));\r\n\t\t\t\tassertTrue( \"DisplaySize to small \"+ expectedLen +\"<\"+foundStr.length()+\" (\" + foundStr + \")\", expectedLen >= foundStr.length() );\r\n\t\t\t}\r\n\t\t}\r\n   \t}\r\n    \r\n    \r\n    void assertSQLException(String sqlstate, int vendorCode, SQLException ex) {\r\n        StringWriter sw = new StringWriter();\r\n        ex.printStackTrace(new PrintWriter(sw));\r\n        assertEquals( \"Vendor Errorcode:\"+sw, vendorCode, ex.getErrorCode() );\r\n        assertEquals( \"SQL State:\"+sw, sqlstate, ex.getSQLState());\r\n    }\r\n    \r\n\r\n   \t\r\n\tvoid printSQL(String sql) throws SQLException{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs = st.executeQuery(sql);\r\n\t\tprintRS( rs );\r\n\t}\r\n\t\r\n   \tvoid printRS(ResultSet rs) throws SQLException{\r\n   \t\tint count = rs.getMetaData().getColumnCount();\r\n\t\twhile(rs.next()){ \r\n\t\t\tfor(int i=1; i<=count; i++){\r\n\t\t\t\tSystem.out.print(rs.getString(i) + '\\t');\r\n\t\t\t} \r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\r\n   \t}\r\n   \t\r\n   \t/**\r\n\t * Returns the localized 3-letters month.\r\n\t * \r\n\t * @param ordinal\r\n\t *            month ordinal (1-based).\r\n\t * @return 3-letters month.\r\n\t */\r\n   \tstatic String getMonth3L(int ordinal) {\r\n   \t\treturn MONTHS[ordinal - 1];\r\n   \t}\r\n}"},{"path":"/src/smallsql/database/language/Language_it.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * Language_it.java\r\n * ---------------\r\n * Author: Saverio Miroddi\r\n * \r\n */\r\npackage smallsql.database.language;\r\n\r\n/**\r\n * Extended localization class for Italian language.\r\n */\r\npublic class Language_it extends Language {\r\n\tprotected Language_it() {\r\n\t\taddMessages(ENTRIES);\r\n\t}\r\n\t\r\n\tpublic String[][] getEntries() {\r\n\t\treturn ENTRIES;\r\n\t}\r\n\t\r\n\t//////////////////////////////////////////////////////////////////////\r\n\t// MESSAGES\r\n\t//////////////////////////////////////////////////////////////////////\r\n\t\r\n\tprivate final String[][] ENTRIES = {\r\n{ UNSUPPORTED_OPERATION           , \"Operazione non supportata: {0}.\" },\r\n{ CANT_LOCK_FILE                  , \"Impossibile bloccare il file ''{0}''. Un database SmallSQL Database può essere aperto da un unico processo.\" },\r\n\r\n{ DB_EXISTENT                     , \"Il database ''{0}'' è già esistente.\" },\r\n{ DB_NONEXISTENT                  , \"Il database ''{0}'' Non esiste.\" },\r\n{ DB_NOT_DIRECTORY                , \"La directory ''{0}'' non è un database SmallSQL.\" },\r\n{ DB_NOTCONNECTED                 , \"L''utente non è connesso a un database.\" },\r\n\r\n{ CONNECTION_CLOSED               , \"La connessione è già chiusa.\" },\r\n\r\n{ VIEW_INSERT                     , \"INSERT non è supportato per una view.\" },\r\n{ VIEWDROP_NOT_VIEW               , \"Non è possibile effettuare DROP VIEW con ''{0}'' perché non è una view.\" },\r\n{ VIEW_CANTDROP                   , \"Non si può effettuare drop sulla view ''{0}''.\" },\r\n\r\n{ RSET_NOT_PRODUCED               , \"Nessun ResultSet è stato prodotto.\" },\r\n{ RSET_READONLY                   , \"Il ResultSet è di sola lettura.\" },\r\n{ RSET_FWDONLY                    , \"Il ResultSet è forward only.\" }, // no real translation\r\n{ RSET_CLOSED                     , \"Il ResultSet è chiuso.\" },\r\n{ RSET_NOT_INSERT_ROW             , \"Il cursore non è attualmente nella riga ''InsertRow''.\" },\r\n{ RSET_ON_INSERT_ROW              , \"Il cursore è attualmente nella riga ''InsertRow''.\" },\r\n{ ROWSOURCE_READONLY              , \"Il Rowsource è di sola lettura.\" },\r\n\r\n{ STMT_IS_CLOSED                  , \"Lo Statement è in stato chiuso.\" },\r\n\r\n{ SUBQUERY_COL_COUNT              , \"Il conteggio delle colonne nella subquery deve essere 1 e non {0}.\" },\r\n{ JOIN_DELETE                     , \"DeleteRow non supportato nelle join.\" },\r\n{ JOIN_INSERT                     , \"InsertRow non supportato nelle join.\" },\r\n{ DELETE_WO_FROM                  , \"DeleteRow necessita un''espressione FROM.\" },\r\n{ INSERT_WO_FROM                  , \"InsertRow necessita un''espressione FROM.\" },\r\n\r\n{ TABLE_CANT_RENAME               , \"La tabella ''{0}'' non può essere rinominata.\" },\r\n{ TABLE_CANT_DROP                 , \"Non si può effettuare DROP della tabella ''{0}''.\" },\r\n{ TABLE_CANT_DROP_LOCKED          , \"Non si può effettuare DROP della tabella ''{0}'' perché è in LOCK.\" },\r\n{ TABLE_CORRUPT_PAGE              , \"Pagina della tabella corrotta alla posizione: {0}.\" },\r\n{ TABLE_MODIFIED                  , \"La tabella ''{0}'' è stata modificata.\" },\r\n{ TABLE_DEADLOCK                  , \"Deadlock: non si può mettere un lock sulla tabella ''{0}''.\" },\r\n{ TABLE_OR_VIEW_MISSING           , \"La tabella/view ''{0}'' non esiste.\" },\r\n{ TABLE_FILE_INVALID              , \"Il file ''{0}'' non include una tabella SmallSQL valida.\" },\r\n{ TABLE_OR_VIEW_FILE_INVALID      , \"Il file ''{0}'' non è un contenitore valido di tabella/view.\" },\r\n{ TABLE_EXISTENT                  , \"La tabella/vista ''{0}'' è già esistente.\" },\r\n\r\n{ FK_NOT_TABLE                    , \"''{0}'' non è una tabella.\" },\r\n{ PK_ONLYONE                      , \"Una tabella può avere solo una primary key.\" },\r\n{ KEY_DUPLICATE                   , \"Chiave duplicata.\" },\r\n\r\n{ MONTH_TOOLARGE                  , \"Valore del mese troppo alto del in DATE o TIMESTAMP ''{0}''.\" },\r\n{ DAYS_TOOLARGE                   , \"Valore del giorno troppo altro in DATE o TIMESTAMP ''{0}''.\" },\r\n{ HOURS_TOOLARGE                  , \"Valore delle ore troppo alto in in TIME o TIMESTAMP ''{0}''.\" },\r\n{ MINUTES_TOOLARGE                , \"Valore dei minuti troppo alto in TIME o TIMESTAMP ''{0}''.\" },\r\n{ SECS_TOOLARGE                   , \"Valore dei secondi troppo alto in TIME o TIMESTAMP ''{0}''.\" },\r\n{ MILLIS_TOOLARGE                 , \"VAlore dei millisecondi troppo alto in TIMESTAMP ''{0}''.\" },\r\n{ DATETIME_INVALID                , \"''{0}'' è un DATE, TIME or TIMESTAMP non valido.\" },\r\n\r\n{ UNSUPPORTED_CONVERSION_OPER     , \"Conversione non supportata verso il tipo di dato ''{0}'' dal tipo ''{1}'' per l''operazione ''{2}''.\" },\r\n{ UNSUPPORTED_DATATYPE_OPER       , \"Tipo di dato ''{0}'' non supportato per l''operazione ''{1}''.\" },\r\n{ UNSUPPORTED_DATATYPE_FUNC       , \"Tipo di dato ''{0}'' non supportato per la funzione ''{1}''.\" },\r\n{ UNSUPPORTED_CONVERSION_FUNC     , \"Conversione verso il tipo di dato ''{0}'' non supportato per la funzione ''{1}''.\" },\r\n{ UNSUPPORTED_TYPE_CONV           , \"Tipo non supportato per la funzione CONVERT: {0}.\" },\r\n{ UNSUPPORTED_TYPE_SUM            , \"Tipo non supportato per la funzione SUM: ''{0}''.\" },\r\n{ UNSUPPORTED_TYPE_MAX            , \"Tipo non supportato per la funzione MAX: ''{0}''.\" },\r\n{ UNSUPPORTED_CONVERSION          , \"Non è possible convertire ''{0}'' [{1}] in ''{2}''.\" },\r\n{ INSERT_INVALID_LEN              , \"Lunghezza non valida ''{0}'' per la funzione INSERT.\" },\r\n{ SUBSTR_INVALID_LEN              , \"Lunghezza non valida ''{0}'' per la funzione SUBSTRING.\" },\r\n\r\n{ VALUE_STR_TOOLARGE              , \"Stringa troppo lunga per la colonna.\" },\r\n{ VALUE_BIN_TOOLARGE              , \"Valore binario di lunghezza {0} eccessiva per la colonna di lunghezza {1}.\" },\r\n{ VALUE_NULL_INVALID              , \"Valori nulli non validi per la colonna ''{0}''.\" },\r\n{ VALUE_CANT_CONVERT              , \"Impossible convertire un valore {0} in un valore {1}.\" },\r\n\r\n{ BYTEARR_INVALID_SIZE            , \"Lunghezza non valida per un array di bytes: {0}.\" },\r\n{ LOB_DELETED                     , \"L''oggetto LOB è stato cancellato.\" },\r\n\r\n{ PARAM_CLASS_UNKNOWN             , \"Classe sconosciuta (''{0}'') per il parametro.\" },\r\n{ PARAM_EMPTY                     , \"Il parametro {0} è vuoto.\" },\r\n{ PARAM_IDX_OUT_RANGE             , \"L''indice {0} per il parametro è fuori dall''intervallo consentito ( 1 <= n <= {1} ).\" },\r\n\r\n{ COL_DUPLICATE                \t  , \"Nome di colonna duplicato: ''{0}''.\" },\r\n{ COL_MISSING                     , \"Colonna ''{0}'' non trovata.\" },\r\n{ COL_VAL_UNMATCH                 , \"Il conteggio di colonne e valori non è identico.\" },\r\n{ COL_INVALID_SIZE                , \"Lunghezza non valida ({0}) per la colonna ''{1}''.\" },\r\n{ COL_WRONG_PREFIX                , \"Il prefisso di colonna ''{0}'' non coincide con un alias o nome di tabella usato nella query.\" },\r\n{ COL_READONLY                    , \"La colonna ''{0}'' è di sola lettura.\" },\r\n{ COL_INVALID_NAME                , \"Nome di colonna non valido ''{0}''.\" },\r\n{ COL_IDX_OUT_RANGE               , \"Indice di colonna fuori dall''intervallo valido: {0}.\" },\r\n{ COL_AMBIGUOUS                   , \"Il nome di colonna ''{0}'' è ambiguo.\" },\r\n\r\n{ GROUP_AGGR_INVALID              , \"Funzione di aggregrazione non valida per la clausola GROUP BY: ({0}).\" },\r\n{ GROUP_AGGR_NOTPART              , \"L''espressione ''{0}'' non è parte di una funzione di aggregazione o della clausola GROUP BY.\" },\r\n{ ORDERBY_INTERNAL                , \"Errore interno per ORDER BY.\" },\r\n{ UNION_DIFFERENT_COLS            , \"SELECT appartenenti ad una UNION con numero di colonne differenti: {0} e {1}.\" },\r\n\r\n{ INDEX_EXISTS                    , \"L''indice ''{0}'' è già esistente.\" },\r\n{ INDEX_MISSING                   , \"L''indice ''{0}'' non esiste.\" },\r\n{ INDEX_FILE_INVALID              , \"Il file ''{0}'' non è un contenitore valido per un indice.\" },\r\n{ INDEX_CORRUPT                   , \"Errore durante il caricamento dell''indice. File dell''indice corrotto: ''{0}''.\" },\r\n{ INDEX_TOOMANY_EQUALS            , \"Troppe voci uguali nell''indice.\" },\r\n\r\n{ FILE_TOONEW                     , \"La versione ({0}) del file ''{1}'' è troppo recente per questo runtime.\" },\r\n{ FILE_TOOOLD                     , \"La versione ({0}) del file ''{1}'' è troppo vecchia per questo runtime.\" },\r\n{ FILE_CANT_DELETE                , \"File ''(0)'' non possono essere eliminati.\" },\r\n\r\n{ ROW_0_ABSOLUTE                  , \"Il numero di riga 0 non è valido per il metodo ''absolute()''.\" },\r\n{ ROW_NOCURRENT                   , \"Nessuna riga corrente.\" },\r\n{ ROWS_WRONG_MAX                  , \"Numero massimo di righe non valido ({0}).\" },\r\n{ ROW_LOCKED                      , \"La riga è bloccata da un''altra connessione.\" },\r\n{ ROW_DELETED                     , \"Riga già cancellata.\" },\r\n\r\n{ SAVEPT_INVALID_TRANS            , \"SAVEPOINT non valido per questa transazione.\" },\r\n{ SAVEPT_INVALID_DRIVER           , \"SAVEPOINT non valido per questo driver {0}.\" },\r\n\r\n{ ALIAS_UNSUPPORTED               , \"Alias non supportato per questo tipo di sorgente righe.\" },\r\n{ ISOLATION_UNKNOWN               , \"Livello di Isolamento transazione sconosciuto: {0}.\" },\r\n{ FLAGVALUE_INVALID               , \"Flag non valida nel metodo ''getMoreResults'': {0}.\" },\r\n{ ARGUMENT_INVALID                , \"Argomento non valido nel metodo ''setNeedGenratedKeys'': {0}.\" },\r\n{ GENER_KEYS_UNREQUIRED           , \"GeneratedKeys non richieste.\" },\r\n{ SEQUENCE_HEX_INVALID            , \"Sequenza esadecimale non valido alla posizione {0}.\" },\r\n{ SEQUENCE_HEX_INVALID_STR        , \"Sequence esadecimale non valida alla positione {0} in ''{1}''.\" },\r\n\r\n{ SYNTAX_BASE_OFS            \t  , \"Errore di sintassi alla posizione {0} in ''{1}''. \" },\r\n{ SYNTAX_BASE_END        \t\t  , \"Errore di sintassi, fine inattesa della stringa SQL. \" },\r\n{ STXADD_ADDITIONAL_TOK\t\t\t  , \"Token aggiuntivo dopo la fine dell''istruzione SQL.\" },\r\n{ STXADD_IDENT_EXPECT\t\t\t  , \"Identificatore atteso.\" },\r\n{ STXADD_IDENT_EMPTY \t\t\t  , \"Identificatore vuoto.\" },\r\n{ STXADD_IDENT_WRONG \t\t\t  , \"Identificatore errato ''{0}''.\" },\r\n{ STXADD_OPER_MINUS \t\t\t  , \"Operatore ''meno'' non valido per il tipo di dato varbinary.\" },\r\n{ STXADD_FUNC_UNKNOWN \t\t\t  , \"Funzione sconosciuta.\" },\r\n{ STXADD_PARAM_INVALID_COUNT\t  , \"Totale parametri non valido.\" },\r\n{ STXADD_JOIN_INVALID\t  \t\t  , \"Sintassi della join non valida.\" },\r\n{ STXADD_FROM_PAR_CLOSE\t  \t\t  , \"Parentesi chiusa non attesa nella clausola from.\" },\r\n{ STXADD_KEYS_REQUIRED\t  \t\t  , \"Le parole chiave richieste sono: \" },\r\n{ STXADD_NOT_NUMBER\t  \t\t      , \"Richiesto valore numerico (passato = ''{0}'').\" },\r\n{ STXADD_COMMENT_OPEN\t  \t\t  , \"Chiusura del commento mancante (''*/'').\" },\r\n\t};\r\n}"},{"path":"/src/smallsql/database/ExpressionFunctionTimestampAdd.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionTimestampAdd.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 19.06.2004\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\npublic class ExpressionFunctionTimestampAdd extends ExpressionFunction {\r\n\r\n\tfinal private int interval;\r\n\t\r\n\r\n\tExpressionFunctionTimestampAdd(int intervalType, Expression p1, Expression p2){\r\n\t\tinterval = ExpressionFunctionTimestampDiff.mapIntervalType( intervalType );\r\n\t\tsetParams( new Expression[]{p1,p2});\r\n\t}\r\n\t\r\n\t\r\n\tint getFunction() {\r\n\t\treturn SQLTokenizer.TIMESTAMPADD;\r\n\t}\r\n\r\n\r\n\tboolean isNull() throws Exception {\r\n\t\treturn param1.isNull() || param2.isNull();\r\n\t}\r\n\r\n\r\n\tboolean getBoolean() throws Exception {\r\n\t\treturn getLong() != 0;\r\n\t}\r\n\r\n\r\n\tint getInt() throws Exception {\r\n\t\treturn (int)getLong();\r\n\t}\r\n\r\n\r\n\tlong getLong() throws Exception {\r\n\t\tif(isNull()) return 0;\r\n\t\tswitch(interval){\r\n\t\t\tcase SQLTokenizer.SQL_TSI_FRAC_SECOND:\r\n\t\t\t\treturn param2.getLong() + param1.getLong();\r\n\t\t\tcase SQLTokenizer.SQL_TSI_SECOND:\r\n\t\t\t\treturn param2.getLong() + param1.getLong() * 1000;\r\n\t\t\tcase SQLTokenizer.SQL_TSI_MINUTE:\r\n\t\t\t\treturn param2.getLong() + param1.getLong() * 60000;\r\n\t\t\tcase SQLTokenizer.SQL_TSI_HOUR:\r\n\t\t\t\treturn param2.getLong() + param1.getLong() * 3600000;\r\n\t\t\tcase SQLTokenizer.SQL_TSI_DAY:\r\n\t\t\t\treturn param2.getLong() + param1.getLong() * 86400000;\r\n\t\t\tcase SQLTokenizer.SQL_TSI_WEEK:{\r\n\t\t\t\treturn param2.getLong() + param1.getLong() * 604800000;\r\n\t\t\t}case SQLTokenizer.SQL_TSI_MONTH:{\r\n\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());\r\n\t\t\t\tdetails2.month += param1.getLong();\r\n\t\t\t\treturn DateTime.calcMillis(details2);\r\n\t\t\t}\r\n\t\t\tcase SQLTokenizer.SQL_TSI_QUARTER:{\r\n\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());\r\n\t\t\t\tdetails2.month += param1.getLong() * 3;\r\n\t\t\t\treturn DateTime.calcMillis(details2);\r\n\t\t\t}\r\n\t\t\tcase SQLTokenizer.SQL_TSI_YEAR:{\r\n\t\t\t\tDateTime.Details details2 = new DateTime.Details(param2.getLong());\r\n\t\t\t\tdetails2.year += param1.getLong();\r\n\t\t\t\treturn DateTime.calcMillis(details2);\r\n\t\t\t}\r\n\t\t\tdefault: throw new Error();\r\n\t\t}\r\n\t\t// TODO Auto-generated method stub\r\n\t}\r\n\r\n\r\n\tfloat getFloat() throws Exception {\r\n\t\treturn getLong();\r\n\t}\r\n\r\n\r\n\tdouble getDouble() throws Exception {\r\n\t\treturn getLong();\r\n\t}\r\n\t\r\n\r\n\tlong getMoney() throws Exception {\r\n\t\treturn getLong() * 10000;\r\n\t}\r\n\r\n\r\n\tMutableNumeric getNumeric() throws Exception {\r\n\t\tif(isNull()) return null;\r\n\t\treturn new MutableNumeric(getLong());\r\n\t}\r\n\r\n\r\n\tObject getObject() throws Exception {\r\n\t\tif(isNull()) return null;\r\n\t\treturn new DateTime( getLong(), SQLTokenizer.TIMESTAMP );\r\n\t}\r\n\r\n\r\n\tString getString() throws Exception {\r\n\t\tif(isNull()) return null;\r\n\t\treturn new DateTime( getLong(), SQLTokenizer.TIMESTAMP ).toString();\r\n\t}\r\n\r\n\r\n\tint getDataType() {\r\n\t\treturn SQLTokenizer.TIMESTAMP;\r\n\t}\r\n\r\n}\r\n"},{"path":"/src/smallsql/database/ExpressionFunctionConvert.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionConvert.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 29.04.2004\r\n */\r\npackage smallsql.database;\r\n\r\nimport java.util.Arrays;\r\nimport smallsql.database.language.Language;\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\npublic class ExpressionFunctionConvert extends ExpressionFunction {\r\n\r\n\tfinal private Column datatype;\r\n\t\r\n\tpublic ExpressionFunctionConvert(Column datatype, Expression value, Expression style) {\r\n\t\tsuper();\r\n\t\tthis.datatype = datatype;\r\n\t\tExpression[] params = (style == null) ? new Expression[]{value} : new Expression[]{value, style};\r\n\t\tsetParams( params );\r\n\t}\r\n\t\r\n\r\n\tint getFunction() {\r\n\t\treturn SQLTokenizer.CONVERT;\r\n\t}\r\n\t\r\n\r\n\tboolean isNull() throws Exception {\r\n\t\treturn param1.isNull();\r\n\t}\r\n\r\n\r\n\tboolean getBoolean() throws Exception {\r\n\t\treturn ExpressionValue.getBoolean( getObject(), getDataType() );\r\n\t}\r\n\r\n\t\r\n\tint getInt() throws Exception {\r\n\t\treturn ExpressionValue.getInt( getObject(), getDataType() );\r\n\t}\r\n\r\n\r\n\tlong getLong() throws Exception {\r\n\t\treturn ExpressionValue.getLong( getObject(), getDataType() );\r\n\t}\r\n\r\n\r\n\tfloat getFloat() throws Exception {\r\n\t\treturn ExpressionValue.getFloat( getObject(), getDataType() );\r\n\t}\r\n\r\n\r\n\tdouble getDouble() throws Exception {\r\n\t\treturn ExpressionValue.getDouble( getObject(), getDataType() );\r\n\t}\r\n\r\n\r\n\tlong getMoney() throws Exception {\r\n\t\treturn ExpressionValue.getMoney(getObject(), getDataType());\r\n\t}\r\n\t\r\n\r\n\tMutableNumeric getNumeric() throws Exception {\r\n\t\treturn ExpressionValue.getNumeric(getObject(), getDataType());\r\n\t}\r\n\r\n\r\n\tString getString() throws Exception {\r\n\t\tObject obj = getObject();\r\n\t\tif(obj == null) return null;\r\n\t\tswitch(datatype.getDataType()){\r\n\t\t\tcase SQLTokenizer.BIT:\r\n\t\t\t\treturn ((Boolean)obj).booleanValue() ? \"1\" : \"0\";\r\n            case SQLTokenizer.BINARY:\r\n            case SQLTokenizer.VARBINARY:\r\n            case SQLTokenizer.LONGVARBINARY:\r\n                    return new String( (byte[])obj );\r\n\t\t}\r\n\t\treturn obj.toString();\r\n\t}\r\n\r\n\t\r\n\tObject getObject() throws Exception {\r\n\t\tif(param1.isNull()) return null;\r\n\t\tfinal int dataType = getDataType();\r\n\t\tswitch(dataType){\r\n\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\treturn convertToString();\r\n\t\t\tcase SQLTokenizer.VARCHAR:{\r\n\t\t\t\tString str = convertToString();\r\n\t\t\t\tint length = datatype.getDisplaySize();\r\n\t\t\t\tif(length > str.length())\r\n\t\t\t\t\treturn str;\r\n\t\t\t\treturn str.substring(0,length);\r\n\t\t\t}\r\n\t\t\tcase SQLTokenizer.CHAR:{\r\n\t\t\t\tString str = convertToString();\r\n\t\t\t\tint length = datatype.getDisplaySize();\r\n\t\t\t\tif(length > str.length()){\r\n\t\t\t\t\tchar[] buffer = new char[length-str.length()];\r\n\t\t\t\t\tArrays.fill(buffer, ' ');\r\n\t\t\t\t\treturn str + new String(buffer);\r\n\t\t\t\t}\r\n\t\t\t\treturn str.substring(0,length);\r\n\t\t\t}\r\n\t\t\tcase SQLTokenizer.LONGVARBINARY:\r\n\t\t\t\treturn param1.getBytes();\r\n\t\t\tcase SQLTokenizer.VARBINARY:{\r\n\t\t\t\tbyte[] bytes = param1.getBytes();\r\n\t\t\t\tint length = datatype.getPrecision();\r\n\t\t\t\tif(length < bytes.length){\r\n\t\t\t\t\tbyte[] buffer = new byte[length];\r\n\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );\r\n\t\t\t\t\treturn buffer;\r\n\t\t\t\t}\r\n\t\t\t\treturn bytes;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tcase SQLTokenizer.BINARY:{\r\n\t\t\t\tbyte[] bytes = param1.getBytes();\r\n\t\t\t\tint length = datatype.getPrecision();\r\n\t\t\t\tif(length != bytes.length){\r\n\t\t\t\t\tbyte[] buffer = new byte[length];\r\n\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );\r\n\t\t\t\t\treturn buffer;\r\n\t\t\t\t}\r\n\t\t\t\treturn bytes;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tcase SQLTokenizer.BOOLEAN:\r\n\t\t\tcase SQLTokenizer.BIT:\r\n\t\t\t\treturn param1.getBoolean() ? Boolean.TRUE : Boolean.FALSE;\r\n\t\t\tcase SQLTokenizer.TINYINT:\r\n\t\t\t\treturn Utils.getInteger(param1.getInt() & 0xFF);\r\n\t\t\tcase SQLTokenizer.SMALLINT:\r\n\t\t\t\treturn Utils.getInteger((short)param1.getInt());\r\n\t\t\tcase SQLTokenizer.INT:\r\n\t\t\t\treturn Utils.getInteger(param1.getInt());\r\n\t\t\tcase SQLTokenizer.BIGINT:\r\n\t\t\t\treturn new Long(param1.getLong());\r\n\t\t\tcase SQLTokenizer.REAL:\r\n\t\t\t\treturn new Float(param1.getFloat());\r\n\t\t\tcase SQLTokenizer.FLOAT:\r\n\t\t\tcase SQLTokenizer.DOUBLE:\r\n\t\t\t\treturn new Double(param1.getDouble());\r\n\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\treturn new DateTime( getDateTimeLong(), dataType );\r\n\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\t\tMutableNumeric num = param1.getNumeric();\r\n\t\t\t\tif(num != null && (dataType == SQLTokenizer.NUMERIC || dataType == SQLTokenizer.DECIMAL))\r\n\t\t\t\t\tnum.setScale(getScale());\r\n\t\t\t\treturn num;\r\n\t\t\tcase SQLTokenizer.MONEY:\r\n\t\t\tcase SQLTokenizer.SMALLMONEY:\r\n\t\t\t\treturn Money.createFromUnscaledValue(param1.getMoney());\r\n\t\t\tcase SQLTokenizer.UNIQUEIDENTIFIER:\r\n\t\t\t\tswitch(param1.getDataType()){\r\n\t\t\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\t\tcase SQLTokenizer.CLOB:\r\n\t\t\t\t\t\treturn Utils.bytes2unique( Utils.unique2bytes(param1.getString()), 0);\r\n\t\t\t\t}\r\n\t\t\t\treturn Utils.bytes2unique(param1.getBytes(), 0);\r\n\t\t}\r\n\t\tObject[] param = { SQLTokenizer.getKeyWord(dataType) };\r\n\t\tthrow SmallSQLException.create(Language.UNSUPPORTED_TYPE_CONV, param);\r\n\t}\r\n\t\r\n\t\r\n\tfinal private String convertToString() throws Exception{\r\n\t\tif(param2 != null){\r\n\t\t\tint type = param1.getDataType();\r\n\t\t\tswitch(type){\r\n\t\t\t\tcase SQLTokenizer.SMALLDATETIME:\r\n\t\t\t\t\ttype = SQLTokenizer.TIMESTAMP;\r\n\t\t\t\tcase SQLTokenizer.TIMESTAMP:\r\n\t\t\t\tcase SQLTokenizer.DATE:\r\n\t\t\t\tcase SQLTokenizer.TIME:\r\n\t\t\t\t\treturn new DateTime( param1.getLong(), type ).toString(param2.getInt());\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn param1.getString();\r\n\t\t\t}\r\n\t\t\t//TODO Format for MONEY, REAL and DOUBLE\r\n\t\t}else\r\n\t\t\treturn param1.getString();\r\n\t}\r\n\t\r\n\t\r\n\tfinal private long getDateTimeLong() throws Exception{\r\n\t\t//try{\r\n\t\t\tswitch(param1.getDataType()){\r\n\t\t\t\tcase SQLTokenizer.LONGVARCHAR:\r\n\t\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\t\t\treturn DateTime.parse( param1.getString() );\r\n\t\t\t}\r\n\t\t//}catch(Exception e){/* do nothing */}\r\n\t\treturn param1.getLong();\r\n\t}\r\n\r\n\r\n\tfinal int getDataType() {\r\n\t\treturn datatype.getDataType();\r\n\t}\r\n\t\r\n\t\r\n\tfinal int getPrecision(){\r\n\t\tfinal int dataType = getDataType();\r\n\t\tswitch(dataType){\r\n\t\t\tcase SQLTokenizer.VARCHAR:\r\n\t\t\tcase SQLTokenizer.VARBINARY:\r\n\t\t\tcase SQLTokenizer.BINARY:\r\n\t\t\tcase SQLTokenizer.CHAR:\r\n\t\t\tcase SQLTokenizer.NUMERIC:\r\n\t\t\tcase SQLTokenizer.DECIMAL:\r\n\t\t\t\treturn datatype.getPrecision();\r\n\t\t\tdefault:\r\n\t\t\t\treturn super.getPrecision();\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\tfinal int getScale() {\r\n\t\treturn datatype.getScale();\r\n\t}\r\n\t\r\n\r\n}\r\n"},{"path":"/src/smallsql/tools/CommandLine.java","source":"/*\r\n * Created on 12.06.2006\r\n */\r\npackage smallsql.tools;\r\n\r\nimport java.io.*;\r\nimport java.sql.*;\r\nimport java.util.Properties;\r\n\r\nimport javax.swing.JOptionPane;\r\n\r\nimport smallsql.database.*;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\npublic class CommandLine {\r\n\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        System.out.println(\"SmallSQL Database command line tool\\n\");\r\n        Connection con = new SSDriver().connect(\"jdbc:smallsql\", new Properties());\r\n        Statement st = con.createStatement();\r\n        if(args.length>0){\r\n            con.setCatalog(args[0]);\r\n        }\r\n        System.out.println(\"\\tVersion: \"+con.getMetaData().getDatabaseProductVersion());\r\n        System.out.println(\"\\tCurrent database: \"+con.getCatalog());\r\n        System.out.println();\r\n        System.out.println(\"\\tUse the USE command to change the database context.\");\r\n        System.out.println(\"\\tType 2 times ENTER to execute any SQL command.\");\r\n        \r\n        StringBuffer command = new StringBuffer();\r\n        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\r\n        while(true){\r\n            try {\r\n                String line;\r\n                try{\r\n                    line = input.readLine();\r\n                }catch(IOException ex){\r\n                    ex.printStackTrace();\r\n                    JOptionPane.showMessageDialog( null, \"You need to start the command line of the \\nSmallSQL Database with a console window:\\n\\n       java -jar smallsql.jar\\n\\n\" + ex, \"Fatal Error\", JOptionPane.OK_OPTION);\r\n                    return;\r\n                }\r\n                if(line == null){\r\n                    return; //end of program\r\n                }\r\n                if(line.length() == 0 && command.length() > 0){\r\n                    boolean isRS = st.execute(command.toString());\r\n                    if(isRS){\r\n                        printRS(st.getResultSet());\r\n                    }\r\n                    command.setLength(0);\r\n                }\r\n                command.append(line).append('\\n');\r\n            } catch (Exception e) {\r\n                command.setLength(0);\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n\r\n    private static void printRS(ResultSet rs) throws SQLException {\r\n        ResultSetMetaData md = rs.getMetaData();\r\n        int count = md.getColumnCount();\r\n        for(int i=1; i<=count; i++){\r\n            System.out.print(md.getColumnLabel(i));\r\n            System.out.print('\\t');\r\n        }\r\n        System.out.println();\r\n        while(rs.next()){\r\n            for(int i=1; i<=count; i++){\r\n                System.out.print(rs.getObject(i));\r\n                System.out.print('\\t');\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n"},{"path":"/src/smallsql/database/ExpressionFunctionHour.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionHour.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 16.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionHour extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.HOUR;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.hour;\r\n\t}\r\n\r\n}\r\n"},{"path":"/src/smallsql/database/ExpressionFunctionDayOfYear.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionDayOfYear.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 16.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionDayOfYear extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.DAYOFYEAR;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.dayofyear+1;\r\n\t}\r\n\r\n}\r\n"},{"path":"/src/smallsql/junit/TestFunctions.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * TestFunktions.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.junit;\r\n\r\nimport junit.framework.*;\r\n\r\nimport java.math.*;\r\nimport java.sql.*;\r\n\r\npublic class TestFunctions extends BasicTestCase{\r\n\r\n    private TestValue testValue;\r\n\r\n    private static final String table = \"table_functions\";\r\n\r\n    private static final TestValue[] TESTS = new TestValue[]{\r\n\t\ta(\"$3\"               \t, new BigDecimal(\"3.0000\")),\r\n\t    a(\"$-3.1\"              \t, new BigDecimal(\"-3.1000\")),\r\n\t    a(\"-$3.2\"              \t, new BigDecimal(\"-3.2000\")),\r\n\t    a(\"1 + 2\"               , new Integer(3)),\r\n        a(\"3 * 2\"               , new Integer(6)),\r\n        a(\"Top 1 4 / 2\"         , new Integer(2)),\r\n        a(\"7/3\"         \t\t, new Integer(2)),\r\n        a(\"5 - 2\"               , new Integer(3)),\r\n        a(\"- aint\"              , new Integer(120)),\r\n        a(\"5 - - 2\"             , new Integer(7)),\r\n        a(\"5 - - - 2\"           , new Integer(3)),\r\n\t\ta(\"-.123E-1\"            , new Double(\"-0.0123\")),\r\n\t\ta(\".123E-1\"             , new Double(\"0.0123\")),\r\n\t\ta(\"123e-1\"              , new Double(\"12.3\")),\r\n\t\ta(\"123E1\"               , new Double(\"1230\")),\r\n\t\ta(\"2*5+2\"               , new Integer(\"12\")),\r\n\t\ta(\"'a''b'\"              , \"a'b\"),\r\n\t\ta(\"'a\\\"b'\"              , \"a\\\"b\"),\r\n        a(\"~1\"                  , new Integer(-2)),\r\n        a(\"abs(-5)\"             , new Integer(5)),\r\n        a(\"abs(aint)\"           , new Integer(120)),\r\n        a(\"abs(\"+table+\".aint)\" , new Integer(120)),\r\n        a(\"abs(null)\"           , null),\r\n        a(\"abs(cast(5 as money))\"  , new BigDecimal(\"5.0000\")),\r\n        a(\"abs(cast(-5 as money))\" , new BigDecimal(\"5.0000\")),\r\n        a(\"abs(cast(-5 as numeric(4,2)))\" , new BigDecimal(\"5.00\")),\r\n        a(\"abs(cast(5 as real))\"   , new Float(5)),\r\n        a(\"abs(cast(-5 as real))\"  , new Float(5)),\r\n        a(\"abs(cast(-5 as float))\" , new Double(5)),\r\n        a(\"abs(cast(5 as double))\" , new Double(5)),\r\n        a(\"abs(cast(5 as smallint))\",new Integer(5)),\r\n        a(\"abs(cast(-5 as bigint))\", new Long(5)),\r\n        a(\"abs(cast(5 as bigint))\",  new Long(5)),\r\n        a(\"convert(money, abs(-5))\", new BigDecimal(\"5.0000\")),\r\n\t\ta(\"convert(varchar(30), 11)\" \t, \"11\"),\r\n\t\ta(\"convert(varchar(30), null)\" \t, null),\r\n\t\ta(\"convert(varchar(1), 12)\" \t, \"1\"),\r\n\t\ta(\"convert(char(5), 11)\" \t\t, \"11   \"),\r\n\t\ta(\"convert(longvarchar, {d '1999-10-12'})\" \t, \"1999-10-12\"),\r\n\t\ta(\"convert(binary(5), '11')\" \t, new byte[]{'1','1',0,0,0}),\r\n\t\ta(\"convert(binary(5), null)\" \t, null),\r\n\t\ta(\"convert(varbinary(5), 11)\" \t, new byte[]{0,0,0,11}),\r\n\t\ta(\"convert(longvarbinary, '11')\", new byte[]{'1','1'}),\r\n\t\ta(\"convert(varchar(30),convert(varbinary(30),'Meherban'))\", \"Meherban\"),\r\n\t\ta(\"convert(bit, 1)\" \t\t\t, Boolean.TRUE),\r\n\t\ta(\"convert(bit, false)\" \t\t, Boolean.FALSE),\r\n\t\ta(\"convert(boolean, 0)\" \t\t, Boolean.FALSE),\r\n\t\ta(\"convert(varchar(30), convert(bit, false))\" \t\t, \"0\"),\r\n\t\ta(\"convert(varchar(30), convert(boolean, 0))\" \t\t, \"false\"),\r\n\t\ta(\"convert(bigint, 11)\" \t\t, new Long(11)),\r\n\t\ta(\"convert(int, 11)\" \t\t\t, new Integer(11)),\r\n\t\ta(\"{fn convert(11, Sql_integer)}\" \t\t\t, new Integer(11)),\r\n\t\ta(\"convert(integer, 11)\" \t\t\t, new Integer(11)),\r\n\t\ta(\"convert(smallint, 123456789)\", new Integer((short)123456789)),\r\n\t\ta(\"convert(tinyint, 123456789)\"\t, new Integer(123456789 & 0xFF)),\r\n\t\ta(\"convert(date, '1909-10-12')\" , Date.valueOf(\"1909-10-12\")),\r\n\t\ta(\"convert(date, null)\" \t\t, null),\r\n\t\ta(\"convert(date, {ts '1999-10-12 15:14:13.123456'})\" \t, Date.valueOf(\"1999-10-12\")),\r\n\t\ta(\"convert(date, now())\" \t\t, Date.valueOf( new Date(System.currentTimeMillis()).toString()) ),\r\n\t\ta(\"curdate()\" \t\t\t\t\t, Date.valueOf( new Date(System.currentTimeMillis()).toString()) ),\r\n\t\ta(\"current_date()\" \t\t\t\t, Date.valueOf( new Date(System.currentTimeMillis()).toString()) ),\r\n\t\ta(\"hour(curtime())\" \t\t\t, new Integer(new Time(System.currentTimeMillis()).getHours()) ),\r\n\t\ta(\"minute({t '10:11:12'})\" \t\t, new Integer(11) ),\r\n\t\ta(\"month( {ts '1899-10-12 15:14:13.123456'})\" \t, new Integer(10)),\r\n\t\ta(\"year({d '2004-12-31'})\"    , new Integer(2004)),\r\n\t\ta(\"convert(time, '15:14:13')\" \t, Time.valueOf(\"15:14:13\")),\r\n\t\ta(\"convert(time, null)\" \t\t, null),\r\n\t\ta(\"convert(timestamp, '1999-10-12 15:14:13.123456')\" \t, Timestamp.valueOf(\"1999-10-12 15:14:13.123\")),\r\n        a(\"cast({ts '1907-06-05 04:03:02.1'} as smalldatetime)\", Timestamp.valueOf(\"1907-06-05 04:03:00.0\")),\r\n        a(\"cast({ts '2007-06-05 04:03:02.1'} as smalldatetime)\", Timestamp.valueOf(\"2007-06-05 04:03:00.0\")),\r\n\t\ta(\"convert(varchar(30), {d '1399-10-12 3:14:13'},  -1)\" \t, \"1399-10-12\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12  3:14:13.12'},  99)\" \t, \"1999-10-12 03:14:13.12\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12  0:14:13.123456'},   0)\" \t, getMonth3L(10) + \" 12 1999 12:14AM\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   1)\" \t, \"10/12/99\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   2)\" \t, \"99.10.12\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   3)\" \t, \"12/10/99\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   4)\" \t, \"12.10.99\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   5)\" \t, \"12-10-99\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   6)\" \t, \"12 \" + getMonth3L(10) + \" 99\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   7)\" \t, getMonth3L(10) + \" 12, 99\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   8)\" \t, \"15:14:13\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},   9)\" \t, getMonth3L(10) + \" 12 1999 03:14:13:123PM\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},  10)\" \t, \"10-12-99\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},  11)\" \t, \"99/10/12\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},  12)\" \t, \"991012\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},  13)\" \t, \"12 \" + getMonth3L(10) + \" 1999 15:14:13:123\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},  14)\" \t, \"15:14:13:123\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},  20)\" \t, \"1999-10-12 15:14:13\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'},  21)\" \t, \"1999-10-12 15:14:13.123\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 100)\" \t, getMonth3L(10) + \" 12 1999 03:14PM\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 101)\" \t, \"10/12/1999\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 102)\" \t, \"1999.10.12\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 103)\" \t, \"12/10/1999\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 104)\" \t, \"12.10.1999\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 105)\" \t, \"12-10-1999\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 106)\" \t, \"12 \" + getMonth3L(10) + \" 1999\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 107)\" \t, getMonth3L(10) + \" 12, 1999\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 108)\" \t, \"15:14:13\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12  3:14:13.123456'}, 109)\" \t, getMonth3L(10) + \" 12 1999 03:14:13:123AM\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 109)\" \t, getMonth3L(10) + \" 12 1999 03:14:13:123PM\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 110)\" \t, \"10-12-1999\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 111)\" \t, \"1999/10/12\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 112)\" \t, \"19991012\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 113)\" \t, \"12 \" + getMonth3L(10) + \" 1999 15:14:13:123\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 114)\" \t, \"15:14:13:123\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 120)\" \t, \"1999-10-12 15:14:13\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 121)\" \t, \"1999-10-12 15:14:13.123\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 126)\" \t, \"1999-10-12T15:14:13.123\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12  3:14:13.123456'}, 130)\" \t, \"12 \" + getMonth3L(10) + \" 1999 03:14:13:123AM\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 130)\" \t, \"12 \" + getMonth3L(10) + \" 1999 03:14:13:123PM\"),\r\n\t\ta(\"convert(varchar(30), {ts '1999-10-12 15:14:13.123456'}, 131)\" \t, \"12/10/99 15:14:13:123\"),\r\n\t\ta(\"convert(timestamp, null)\" \t, null),\r\n\t\ta(\"convert(real, 11)\" \t\t\t, new Float(11)),\r\n\t\ta(\"convert(real, null)\" \t\t, null),\r\n\t\ta(\"convert(float, 11.0)\" \t\t, new Double(11)),\r\n\t\ta(\"convert(double, '11')\" \t\t, new Double(11)),\r\n\t\ta(\"-convert(decimal, '11.123456')\" \t\t, new BigDecimal(\"-11\")),\r\n\t\ta(\"-convert(decimal(38,6), '11.123456')\" \t\t, new BigDecimal(\"-11.123456\")),\r\n\t\ta(\"convert(decimal(38,6), '11.123456') + 1\" \t\t, new BigDecimal(\"12.123456\")),\r\n\t\ta(\"convert(decimal(38,6), '11.123456') - 1\" \t\t, new BigDecimal(\"10.123456\")),\r\n\t\ta(\"convert(decimal(12,2), '11.0000') * 1\" \t\t, new BigDecimal(\"11.00\")),\r\n\t\ta(\"convert(decimal(12,2), '11.0000') * convert(decimal(12,2), 1)\" \t\t, new BigDecimal(\"11.0000\")),\r\n\t\ta(\"convert(decimal(12,2), '11.0000') / 1\" \t\t, new BigDecimal(\"11.0000000\")), //scale = Max(left scale+5, right scale +4)\r\n\t\ta(\"convert(decimal(12,0), 11) / convert(decimal(12,2), 1)\" \t\t, new BigDecimal(\"11.000000\")), //scale = Max(left scale+5, right scale +4)\r\n\t\ta(\"convert(money, -10000 / 10000.0)\" \t\t, new BigDecimal(\"-1.0000\")), //scale = Max(left scale+5, right scale +4)\r\n\t\ta(\"-convert(money, '11.123456')\" \t\t, new BigDecimal(\"-11.1235\")),\r\n\t\ta(\"-convert(smallmoney, '11.123456')\" \t, new BigDecimal(\"-11.1235\")),\r\n\t\ta(\"convert(uniqueidentifier, 0x12345678901234567890)\" \t, \"78563412-1290-5634-7890-000000000000\"),\r\n\t\ta(\"convert(uniqueidentifier, '78563412-1290-5634-7890-000000000000')\" \t, \"78563412-1290-5634-7890-000000000000\"),\r\n\t\ta(\"convert(binary(16), convert(uniqueidentifier, 0x12345678901234567890))\" \t, new byte[]{0x12,0x34,0x56,0x78,(byte)0x90,0x12,0x34,0x56,0x78,(byte)0x90,0,0,0,0,0,0}),\r\n\t\ta(\"Timestampdiff(day,         {d '2004-10-12'}, {d '2004-10-14'})\" \t\t, new Integer(2)),\r\n\t\ta(\"Timestampdiff(SQL_TSI_DAY, {d '2004-10-12'}, {d '2004-10-15'})\" \t\t, new Integer(3)),\r\n\t\ta(\"Timestampdiff(d,           {d '2004-10-12'}, {d '2004-10-16'})\" \t\t, new Integer(4)),\r\n\t\ta(\"Timestampdiff(dd,          {d '2004-10-12'}, {d '2004-10-17'})\" \t\t, new Integer(5)),\r\n\t\ta(\"Timestampdiff(SQL_TSI_YEAR,{d '2000-10-12'}, {d '2005-10-17'})\" \t\t, new Integer(5)),\r\n\t\ta(\"Timestampdiff(year,\t\t\t{d '2000-10-12'}, {d '2005-10-17'})\" \t\t, new Integer(5)),\r\n\t\ta(\"Timestampdiff(SQL_TSI_QUARTER,{d '2000-10-12'}, {d '2005-10-17'})\" \t, new Integer(20)),\r\n\t\ta(\"Timestampdiff(quarter,\t\t{d '2000-10-12'}, {d '2005-10-17'})\" \t, new Integer(20)),\r\n\t\ta(\"Timestampdiff(SQL_TSI_MONTH,\t{d '2004-10-12'}, {d '2005-11-17'})\" \t, new Integer(13)),\r\n\t\ta(\"Timestampdiff(month,\t\t\t{d '2004-10-12'}, {d '2005-11-17'})\" \t, new Integer(13)),\r\n\t\ta(\"Timestampdiff(SQL_TSI_WEEK,\t{d '2004-10-09'}, {d '2004-10-12'})\" \t\t, new Integer(1)),\r\n\t\ta(\"Timestampdiff(week,\t\t\t{d '2004-10-09'}, {d '2004-10-12'})\" \t\t, new Integer(1)),\r\n\t\ta(\"Timestampdiff(SQL_TSI_HOUR,\t{d '2004-10-12'}, {d '2004-10-13'})\" \t\t, new Integer(24)),\r\n\t\ta(\"Timestampdiff(hour,\t\t\t{d '2004-10-12'}, {d '2004-10-13'})\" \t\t, new Integer(24)),\r\n\t\ta(\"Timestampdiff(SQL_TSI_MINUTE,{t '10:10:10'}, {t '11:11:11'})\" \t\t, new Integer(61)),\r\n\t\ta(\"Timestampdiff(minute,\t\t{t '10:10:10'}, {t '11:11:11'})\" \t\t, new Integer(61)),\r\n\t\ta(\"Timestampdiff(SQL_TSI_SECOND,{t '00:00:10'}, {t '00:10:11'})\" \t\t, new Integer(601)),\r\n\t\ta(\"Timestampdiff(second,\t\t{t '00:00:10'}, {t '00:10:11'})\" \t\t, new Integer(601)),\r\n\t\ta(\"Timestampdiff(SQL_TSI_FRAC_SECOND,{ts '2004-10-12 00:00:10.1'}, {ts '2004-10-12 00:00:10.2'})\" \t\t, new Integer(100)),\r\n\t\ta(\"Timestampdiff(millisecond,{ts '2004-10-12 00:00:10.1'}, {ts '2004-10-12 00:00:10.2'})\" \t\t, new Integer(100)),\r\n\t\ta(\"{fn TimestampAdd(SQL_TSI_YEAR,     1, {d '2004-10-17'})}\" \t\t, Timestamp.valueOf(\"2005-10-17 00:00:00.0\")),\r\n        a(\"{fn TimestampAdd(SQL_TSI_QUARTER,  1, {d '2004-10-17'})}\"        , Timestamp.valueOf(\"2005-01-17 00:00:00.0\")),\r\n        a(\"{fn TimestampAdd(SQL_TSI_MONTH,    1, {d '2004-10-17'})}\"        , Timestamp.valueOf(\"2004-11-17 00:00:00.0\")),\r\n        a(\"{fn TimestampAdd(SQL_TSI_WEEK,     1, {d '2004-10-17'})}\"        , Timestamp.valueOf(\"2004-10-24 00:00:00.0\")),\r\n        a(\"{fn TimestampAdd(SQL_TSI_HOUR,     1, {d '2004-10-17'})}\"        , Timestamp.valueOf(\"2004-10-17 01:00:00.0\")),\r\n        a(\"{fn TimestampAdd(SQL_TSI_MINUTE,  61, {d '2004-10-17'})}\"        , Timestamp.valueOf(\"2004-10-17 01:01:00.0\")),\r\n        a(\"{fn TimestampAdd(SQL_TSI_SECOND,  61, {d '2004-10-17'})}\"        , Timestamp.valueOf(\"2004-10-17 00:01:01.0\")),\r\n        a(\"{fn TimestampAdd(SQL_TSI_FRAC_SECOND,1,{d '2004-10-17'})}\"       , Timestamp.valueOf(\"2004-10-17 00:00:00.001\")),\r\n\t\ta(\"Timestampdiff(second, null, {t '00:10:11'})\" \t\t, null),\r\n\t\ta(\"Timestampdiff(second, {t '00:10:11'}, null)\" \t\t, null),\r\n\t\ta(\"TimestampAdd(year,     1, null)\" \t\t, null),\r\n\t\ta(\"DayOfWeek({d '2006-02-16'})\" \t\t, new Integer(4)),\r\n\t\ta(\"DayOfWeek({d '2006-02-19'})\" \t\t, new Integer(7)),\r\n\t\ta(\"DayOfYear({d '2004-01-01'})\" \t\t, new Integer(1)),\r\n\t\ta(\"DayOfYear({d '2004-02-29'})\" \t\t, new Integer(60)),\r\n\t\ta(\"DayOfYear({d '2004-03-01'})\" \t\t, new Integer(61)),\r\n\t\ta(\"DayOfYear({d '2004-12-31'})\" \t\t, new Integer(366)),\r\n\t\ta(\"DayOfMonth({d '1904-07-17'})\" \t\t, new Integer(17)),\r\n\t\ta(\"locate('ae', 'QWAERAE')\"\t\t, new Integer(3)),\r\n\t\ta(\"locate('ae', 'QWAERAE', 3)\"\t, new Integer(3)),\r\n\t\ta(\"locate('ae', 'QWAERAE', 4)\"\t, new Integer(6)),\r\n\t\ta(\"locate('ae', 'QWAERAE', null)\"\t\t, new Integer(3)),\r\n\t\ta(\"locate(null, 'QWAERAE', 4)\"\t, null),\r\n\t\ta(\"locate('ae', null, 4)\"\t, null),\r\n\t\ta(\"{d '2004-10-12'}\"\t, \t\t\t\tjava.sql.Date.valueOf(\"2004-10-12\")),\r\n\t\ta(\"{ts '1999-10-12 15:14:13.123'}\"\t, \tTimestamp.valueOf(\"1999-10-12 15:14:13.123\")),\r\n\t\ta(\"{t '15:14:13'}\"\t, \t\t\t\t\tTime.valueOf(\"15:14:13\")),\r\n\t\ta(\"{fn length('abc')}\", \t\t\t\tnew Integer(3)),\r\n\t\ta(\"{fn length('abc ')}\", \t\t\t\tnew Integer(3)),\r\n\t\ta(\"{fn length(null)}\", \t\t\t\t\tnull),\r\n\t\ta(\"{fn Right('qwertzu', 3)}\", \t\t\t\"tzu\"),\r\n\t\ta(\"{fn Right('qwertzu', 13)}\", \t\t\t\"qwertzu\"),\r\n\t\ta(\"cast( Right('1234', 2) as real)\", \tnew Float(34)),\r\n\t\ta(\"cast( Right('1234', 2) as smallint)\",new Integer(34)),\r\n\t\ta(\"cast( Right('1234', 2) as boolean)\", Boolean.TRUE),\r\n\t\ta(\"right(0x1234567890, 2)\",\t\t\t\tnew byte[]{0x78,(byte)0x90}),\r\n\t\ta(\"right(null, 2)\",\t\t\t\t\t\tnull),\r\n        a(\"left(null, 2)\",                      null),\r\n        a(\"left('abcd', 2)\",                    \"ab\"),\r\n        a(\"left(0x1234567890, 2)\",              new byte[]{0x12,(byte)0x34}),\r\n\t\ta(\"cast({fn SubString('ab2.3qw', 3, 3)} as double)\", \tnew Double(2.3)),\r\n\t\ta(\"subString('qwert', 99, 2)\", \t\t\"\"),\r\n\t\ta(\"{fn SubString(0x1234567890, 0, 99)}\",new byte[]{0x12,0x34,0x56,0x78,(byte)0x90}),\r\n\t\ta(\"{fn SubString(0x1234567890, 2, 2)}\", new byte[]{0x34, 0x56}),\r\n\t\ta(\"{fn SubString(0x1234567890, 99, 2)}\", new byte[]{}),\r\n\t\ta(\"SubString(null, 99, 2)\", \t\t\tnull),\r\n        a(\"Insert('abcd', 2, 1, 'qw')\",         \"aqwcd\"),\r\n        a(\"Insert(0x1234, 2, 0, 0x56)\",         new byte[]{0x12,0x56,0x34}),\r\n        a(\"STUFF(null, 2, 0, 0x56)\",         \tnull),\r\n        a(\"lcase('Abcd')\",                      \"abcd\"),\r\n        a(\"ucase('Abcd')\",                      \"ABCD\"),\r\n        a(\"lcase(null)\",                        null),\r\n        a(\"ucase(null)\",                        null),\r\n        a(\"cast(1 as money) + SubString('a12', 2, 2)\",new BigDecimal(\"13.0000\")),\r\n        a(\"cast(1 as numeric(5,2)) + SubString('a12', 2, 2)\",new BigDecimal(\"13.00\")),\r\n        a(\"cast(1 as BigInt) + SubString('a12', 2, 2)\",new Long(13)),\r\n        a(\"cast(1 as real) + SubString('a12', 2, 2)\",new Float(13)),\r\n        a(\"1   + SubString('a12', 2, 2)\",       new Integer(13)),\r\n        a(\"1.0 + SubString('a12', 2, 2)\",       new Double(13)),\r\n        a(\"concat('abc', 'def')\",               \"abcdef\"),\r\n\t\ta(\"{fn IfNull(null, 'abc')}\", \t\t\t\"abc\"),\r\n\t\ta(\"{fn IfNull('asd', 'abc')}\", \t\t\t\"asd\"),\r\n\t\ta(\"iif(true, 1, 2)\", \t\t\t\t\tnew Integer(1)),\r\n\t\ta(\"iif(false, 1, 2)\", \t\t\t\t\tnew Integer(2)),\r\n\t\ta(\"CASE aVarchar WHEN 'qwert' THEN 25 WHEN 'asdfg' THEN 26 ELSE null END\", new Integer(25)),\r\n\t\ta(\"CASE WHEN aVarchar='qwert' THEN 'uu' WHEN aVarchar='bb' THEN 'gg' ELSE 'nn' END\", \"uu\"),\r\n\t\ta(\"{fn Ascii('')}\", \t\t\tnull),\r\n\t\ta(\"{fn Ascii(null)}\", \t\t\tnull),\r\n\t\ta(\"Ascii('abc')\", \t\t\t\tnew Integer(97)),\r\n\t\ta(\"{fn Char(97)}\", \t\t\t\t\"a\"),\r\n\t\ta(\"Char(null)\", \t\t\t\tnull),\r\n        a(\"$1 + Char(49)\",              new BigDecimal(\"2.0000\")),\r\n\t\ta(\"Exp(null)\", \t\t\t\t\tnull),\r\n\t\ta(\"exp(0)\", \t\t\t\t\tnew Double(1)),\r\n\t\ta(\"log(exp(2.4))\", \t\t\t\tnew Double(2.4)),\r\n\t\ta(\"log10(10)\", \t\t\t\t\tnew Double(1)),\r\n\t\ta(\"cos(null)\", \t\t\t\t\tnull),\r\n\t\ta(\"cos(0)\", \t\t\t\t\tnew Double(1)),\r\n\t\ta(\"acos(1)\", \t\t\t\t\tnew Double(0)),\r\n\t\ta(\"sin(0)\", \t\t\t\t\tnew Double(0)),\r\n\t\ta(\"cos(pi())\", \t\t\t\t\tnew Double(-1)),\r\n\t\ta(\"asin(0)\", \t\t\t\t\tnew Double(0)),\r\n\t\ta(\"asin(sin(0.5))\",\t\t\t\tnew Double(0.5)),\r\n\t\ta(\"tan(0)\", \t\t\t\t\tnew Double(0)),\r\n\t\ta(\"atan(tan(0.5))\",\t\t\t\tnew Double(0.5)),\r\n\t\ta(\"atan2(0,3)\",\t\t\t\t\tnew Double(0)),\r\n\t\ta(\"atan2(0,-3)\",\t\t\t\tnew Double(Math.PI)),\r\n\t\ta(\"atn2(0,null)\",\t\t\t\tnull),\r\n\t\ta(\"cot(0)\",\t\t\t\t\t\tnew Double(Double.POSITIVE_INFINITY)),\r\n\t\ta(\"tan(0)\", \t\t\t\t\tnew Double(0)),\r\n\t\ta(\"degrees(pi())\", \t\t\t\tnew Double(180)),\r\n\t\ta(\"degrees(radians(50))\", \t\tnew Double(50)),\r\n\t\ta(\"ceiling(123.45)\", \t\t\tnew Double(124)),\r\n\t\ta(\"ceiling(-123.45)\", \t\t\tnew Double(-123)),\r\n\t\ta(\"power(2, 3)\", \t\t\t\tnew Double(8)),\r\n\t\ta(\"5.0 % 2\", \t\t\t\t\tnew Double(1)),\r\n\t\ta(\"5 % 2\", \t\t\t\t\t\tnew Integer(1)),\r\n\t\ta(\"mod(5, 2)\", \t\t\t\t\tnew Integer(1)),\r\n\t\ta(\"FLOOR(123.45)\", \t\t\t\tnew Double(123)),\r\n\t\ta(\"FLOOR('123.45')\", \t\t\tnew Double(123)),\r\n\t\ta(\"FLOOR(-123.45)\", \t\t\tnew Double(-124)),\r\n\t\ta(\"FLOOR($123.45)\", \t\t\tnew BigDecimal(\"123.0000\")),\r\n\t\ta(\"Rand(0)\", \t\t\t\t\tnew Double(0.730967787376657)),\r\n\t\ta(\"ROUND(748.58, -4)\", \t\t\tnew Double(0)),\r\n\t\ta(\"ROUND(-748.58, -2)\", \t\tnew Double(-700)),\r\n\t\ta(\"ROUND('748.5876', 2)\", \t\tnew Double(748.59)),\r\n        a(\"round( 1e19, 0)\"       , new Double(1e19)),\r\n        a(\"truncate( -1e19,0)\"      , new Double(-1e19)),\r\n\t\ta(\"Sign('748.5876')\", \t\t\tnew Integer(1)),\r\n\t\ta(\"Sign(-2)\", \t\t\t\t\tnew Integer(-1)),\r\n        a(\"Sign(2)\",                    new Integer(1)),\r\n        a(\"Sign(0)\",                    new Integer(0)),\r\n        a(\"Sign(-$2)\",                  new Integer(-1)),\r\n        a(\"Sign($2)\",                   new Integer(1)),\r\n        a(\"Sign($0)\",                   new Integer(0)),\r\n        a(\"Sign(cast(-2 as bigint))\",   new Integer(-1)),\r\n        a(\"Sign(cast(2 as bigint))\",    new Integer(1)),\r\n        a(\"Sign(cast(0 as bigint))\",    new Integer(0)),\r\n        a(\"Sign(1.0)\",                  new Integer(1)),\r\n\t\ta(\"Sign(0.0)\", \t\t\t\t\tnew Integer(0)),\r\n        a(\"Sign(-.1)\",                  new Integer(-1)),\r\n        a(\"Sign(cast(0 as numeric(5)))\",new Integer(0)),\r\n\t\ta(\"Sign(null)\", \t\t\t\tnull),\r\n\t\ta(\"sqrt(9)\", \t\t\t\t\tnew Double(3)),\r\n\t\ta(\"Truncate(748.58, -4)\", \t\tnew Double(0)),\r\n\t\ta(\"Truncate(-748.58, -2)\", \t\tnew Double(-700)),\r\n\t\ta(\"Truncate('748.5876', 2)\", \tnew Double(748.58)),\r\n        a(\"rtrim(null)\",                null),\r\n        a(\"rtrim(0x0012345600)\",        new byte[]{0x00,0x12,0x34,0x56}),\r\n        a(\"rtrim(' abc ')\",             \" abc\"),\r\n        a(\"ltrim(null)\",                null),\r\n        a(\"ltrim(0x0012345600)\",        new byte[]{0x12,0x34,0x56,0x00}),\r\n        a(\"ltrim(' abc ')\",             \"abc \"),\r\n        a(\"space(3)\",                   \"   \"),\r\n        a(\"space(null)\",                null),\r\n        a(\"space(-3)\",                  null),\r\n        a(\"replace('abcabc','bc','4')\", \"a4a4\"),\r\n        a(\"replace('abcabc','bc',null)\",null),\r\n        a(\"replace('abcabc','','4')\",   \"abcabc\"),\r\n        a(\"replace(0x123456,0x3456,0x77)\", new byte[]{0x12,0x77}),\r\n        a(\"replace(0x123456,0x,0x77)\",  new byte[]{0x12,0x34,0x56}),\r\n        a(\"replace(0x123456,0x88,0x77)\",new byte[]{0x12,0x34,0x56}),\r\n        a(\"repeat('ab',4)\",             \"abababab\"),\r\n        a(\"repeat(null,4)\",             null),\r\n        a(\"repeat(0x1234,3)\",           new byte[]{0x12,0x34,0x12,0x34,0x12,0x34}),\r\n        a(\"DIFFERENCE('Green','Greene')\",new Integer(4)),\r\n        a(\"DIFFERENCE('Green',null)\",   null),\r\n        a(\"OCTET_LENGTH('SomeWord')\",   new Integer(16)),\r\n        a(\"OCTET_LENGTH('')\",   \t\tnew Integer(0)),\r\n        a(\"OCTET_LENGTH(null)\",   \t\tnull),\r\n        a(\"BIT_LENGTH('SomeWord')\",     new Integer(128)),\r\n        a(\"BIT_LENGTH('')\",   \t\t    new Integer(0)),\r\n        a(\"BIT_LENGTH(null)\",   \t\tnull),\r\n        a(\"CHAR_LENGTH('SomeWord')\",    new Integer(8)),\r\n        a(\"CHAR_LENGTH('')\",   \t\t    new Integer(0)),\r\n        a(\"CHAR_LENGTH(null)\",   \t\tnull),\r\n        a(\"CHARACTER_LENGTH('SomeWord')\", new Integer(8)),\r\n        a(\"CHARACTER_LENGTH('')\",   \tnew Integer(0)),\r\n        a(\"CHARACTER_LENGTH(null)\",   \tnull),\r\n        a(\"soundex('Wikipedia')\",       \"W213\"),\r\n        a(\"0x10 < 0x1020\",              Boolean.TRUE),\r\n\t};\r\n\r\n\r\n    private static TestValue a(String function, Object result){\r\n        TestValue value = new TestValue();\r\n        value.function  = function;\r\n        value.result    = result;\r\n        return value;\r\n    }\r\n\r\n    TestFunctions(TestValue testValue){\r\n        super(testValue.function);\r\n        this.testValue = testValue;\r\n    }\r\n    \r\n\r\n    public void tearDown(){\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void setUp(){\r\n        tearDown();\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"create table \" + table + \"(aInt int, aVarchar varchar(100))\");\r\n            st.execute(\"Insert into \" + table + \"(aInt, aVarchar) Values(-120,'qwert')\");\r\n            st.close();\r\n        }catch(Throwable e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void runTest() throws Exception{\r\n    \tString query = \"Select \" + testValue.function + \",5 from \" + table;\r\n\t\tassertEqualsRsValue( testValue.result, query);\r\n        if(!testValue.function.startsWith(\"Top\")){\r\n            assertEqualsRsValue( testValue.result, \"Select \" + testValue.function + \" from \" + table + \" Group By \" + testValue.function);\r\n        }\r\n    }\r\n\r\n    public static Test suite() throws Exception{\r\n        TestSuite theSuite = new TestSuite(\"Functions\");\r\n        for(int i=0; i<TESTS.length; i++){\r\n            theSuite.addTest(new TestFunctions( TESTS[i] ) );\r\n        }\r\n        return theSuite;\r\n    }\r\n\r\n    private static class TestValue{\r\n        String function;\r\n        Object result;\r\n    }\r\n}"},{"path":"/src/smallsql/junit/TestLanguage.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2007, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * TestLanguage.java\r\n * ---------------\r\n * Author: Saverio Miroddi\r\n * \r\n */\r\npackage smallsql.junit;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\nimport java.util.HashSet;\r\nimport java.util.Iterator;\r\nimport java.util.Locale;\r\nimport java.util.Set;\r\n\r\nimport smallsql.database.language.Language;\r\n\r\n/**\r\n * Test for language resources.<br>\r\n * <b>Messages to console starting with \"REGULAR\" are just informational messages.</b>\r\n * \r\n * @author Saverio Miroddi\r\n */\r\npublic class TestLanguage extends BasicTestCase {\r\n\tprivate static final String TABLE_NAME = \"test_lang\";\r\n\t\r\n\tprivate static final String[] OTHER_LANGUAGES = { \"it\", \"de\" };\r\n\t\r\n\tpublic void setUp() throws SQLException {\r\n\t\ttearDown();\r\n\t}\r\n\t\r\n\tpublic void tearDown() throws SQLException {\r\n\t\t// restore language\r\n\t\tConnection conn = AllTests.createConnection(\"?locale=en\", null);\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconn.prepareStatement(\"DROP TABLE \" + TABLE_NAME).execute();\r\n\t\t}\r\n\t\tcatch (Exception e) {}\r\n\t\tfinally {\r\n\t\t\tconn.close();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * In case of wrong Locale, Language picks up the one corresponding to the\r\n\t * the current Locale.<br>\r\n\t */\r\n\tpublic void testBogusLocale() throws SQLException {\r\n\t\tLocale origLocale = Locale.getDefault();\r\n\t\tLocale.setDefault(Locale.ITALY);\r\n\t\t\r\n\t\tConnection conn = AllTests.createConnection(\"?locale=XXX\", null);\r\n\t\tStatement stat = conn.createStatement();\r\n\r\n\t\ttry {\r\n\t\t\trecreateTestTab(stat);\r\n\t\t\t\r\n\t\t\tstat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");\r\n\t\t\tfail();\r\n\t\t}\r\n\t\tcatch (SQLException e) {\r\n\t\t\tassertMessage(e, \"La tabella/vista '\" + TABLE_NAME + \"' è già esistente.\");\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tLocale.setDefault(origLocale);\r\n\t\t\tconn.close();\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic void testLocalizedErrors() throws Exception {\r\n\t\tConnection conn = AllTests.createConnection(\"?locale=it\", null);\r\n\t\tStatement stat = conn.createStatement();\r\n\t\t\r\n\t\ttry {\r\n\t\t\ttry {\r\n\t\t\t\trecreateTestTab(stat);\r\n\t\r\n\t\t\t\tstat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");\r\n\t\t\t\tfail();\r\n\t\t\t}\r\n\t\t\tcatch(SQLException e) {\r\n\t\t\t\tassertMessage(e, \"La tabella/vista '\" + TABLE_NAME + \"' è già esistente.\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tstat.execute(\"DROP TABLE \" + TABLE_NAME);\r\n\t\t\t\tstat.execute(\"DROP TABLE \" + TABLE_NAME);\r\n\t\t\t}\r\n\t\t\tcatch (SQLException e) {\r\n\t\t\t\tassertMessage(e, \"Non si può effettuare DROP della tabella\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tstat.execute(\"CREATE TABLE foo\");\r\n\t\t\t}\r\n\t\t\tcatch (SQLException e) {\r\n\t\t\t\tassertMessage(e, \"Errore di sintassi, fine inattesa\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tconn.close();\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic void testSyntaxErrors() throws SQLException {\r\n\t\tConnection conn = AllTests.createConnection(\"?locale=it\", null);\r\n\t\tStatement stat = conn.createStatement();\r\n\t\t\r\n\t\ttry {\r\n\t\t\ttry {\r\n\t\t\t\tstat.execute(\"CREATE TABLE\");\r\n\t\t\t}\r\n\t\t\tcatch (SQLException se) {\r\n\t\t\t\tassertMessage(se, \"Errore di sintassi, fine inattesa della stringa SQL. Le parole chiave richieste sono: <identifier>\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tstat.execute(\"Some nonsensical sentence.\");\r\n\t\t\t}\r\n\t\t\tcatch (SQLException se) {\r\n\t\t\t\tassertMessage(se, \"Errore di sintassi alla posizione 0 in 'Some'. Le parole chiave richieste sono\");\r\n\t\t\t}\r\n\r\n\t\t\trecreateTestTab(stat);\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tstat.execute(\"SELECT bar() FROM foo\");\r\n\t\t\t}\r\n\t\t\tcatch (SQLException se) {\r\n\t\t\t\tassertMessage(se, \"Errore di sintassi alla posizione 7 in 'bar'. Funzione sconosciuta\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tstat.execute(\"SELECT UCASE('a', '');\");\r\n\t\t\t}\r\n\t\t\tcatch (SQLException se) {\r\n\t\t\t\tassertMessage(se, \"Errore di sintassi alla posizione 7 in 'UCASE'. Totale parametri non valido.\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tconn.close();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if the passed text is present inside the exception message and\r\n\t * prints the message in System.out\r\n\t */\r\n\tprivate void assertMessage(SQLException e, String expectedText) {\r\n\t\tassertMessage(e, new String[] { expectedText });\r\n\t}\r\n\t\r\n\t/**\r\n\t * Check if the passed texts are present inside the exception message and\r\n\t * prints the message in System.out\r\n\t */\r\n\tprivate void assertMessage(SQLException e, String[] expectedTexts) {\r\n\t\tString message = e.getMessage();\r\n\t\tboolean found = true;\r\n\t\t\r\n\t\tfor (int i = 0; found && i < expectedTexts.length; i++) {\r\n\t\t\tfound = found && message.indexOf(expectedTexts[i]) >= 0;\r\n\t\t}\r\n\t\t\r\n\t\tif (! found) {\r\n\t\t\tSystem.err.println(\"ERROR [Wrong message]:\" + message);\r\n\t\t\tfail();\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void recreateTestTab(Statement stat) throws SQLException {\r\n\t\tstat.execute(\"CREATE TABLE \" + TABLE_NAME + \" (id_test INT)\");\r\n\r\n\t}\r\n\t\r\n    \r\n\t/**\r\n\t * Checks if languages specified by OTHER_LANGUAGES array translate all the\r\n\t * message entries of the base (English) language: if they don't, the test\r\n\t * fails and print the missing ones in System.err.\r\n\t */\r\n\tpublic void testEntries() throws Exception {\r\n\t\tboolean failed = false;\r\n        StringBuffer msgBuf = new StringBuffer();\r\n\t\tLanguage eng = Language.getLanguage(\"en\"); \r\n        \r\n        HashSet engEntriesSet = new HashSet();\r\n        String[][] engEntriesArr = eng.getEntries();\r\n        /* WARNING! skips message 0 (CUSTOM_MESSAGE) */\r\n        for (int j = 1; j < engEntriesArr.length; j++) {\r\n            engEntriesSet.add(engEntriesArr[j][0]);\r\n        }\r\n\t\t\r\n\t\tfor (int i = 0; i < OTHER_LANGUAGES.length; i++) {\r\n\t\t\tString localeStr = OTHER_LANGUAGES[i];\r\n\t\t\tLanguage lang2 = Language.getLanguage(localeStr);\r\n            \r\n            HashSet otherEntriesSet = new HashSet();        \r\n            String[][] otherEntriesArr = lang2.getEntries();        \r\n            for (int j = 0; j < otherEntriesArr.length; j++) {\r\n                otherEntriesSet.add(otherEntriesArr[j][0]);\r\n            }\r\n            \r\n            /* test missing entries */\r\n\t\t\tSet diff = (Set)engEntriesSet.clone();\r\n            diff.removeAll(otherEntriesSet);\r\n\r\n\t\t\tif (diff.size() > 0) {\r\n\t\t\t\tfailed = true;\r\n                msgBuf.append(\"\\nMissing entries for language \").append( OTHER_LANGUAGES[i] ).append(\": \");\r\n\t\t\t\t\r\n\t\t\t\tfor (Iterator itr = diff.iterator(); itr.hasNext(); ) {\r\n\t\t\t\t\tmsgBuf.append(itr.next());\r\n\t\t\t\t\tif (itr.hasNext()) msgBuf.append(',');\r\n\t\t\t\t}\r\n\t\t\t}\r\n            \r\n            /* test additional entries */\r\n            diff = (Set)otherEntriesSet.clone();\r\n            diff.removeAll(engEntriesSet);\r\n\r\n            if (diff.size() > 0) {\r\n                failed = true;\r\n                msgBuf.append(\"\\nAdditional entries for language \").append( OTHER_LANGUAGES[i] ).append(\": \");\r\n                \r\n                for (Iterator itr = diff.iterator(); itr.hasNext(); ) {\r\n                    msgBuf.append(itr.next());\r\n                    if (itr.hasNext()) msgBuf.append(',');\r\n                }\r\n            }\r\n            \r\n            /* test not translated entries */\r\n            StringBuffer buf = new StringBuffer();\r\n            for (int j = 1; j < engEntriesArr.length; j++) {\r\n                String key = engEntriesArr[j][0];\r\n                String engValue = eng.getMessage(key);\r\n                String otherValue = lang2.getMessage(key);\r\n                if(engValue.equals(otherValue)){\r\n                    failed = true;\r\n                    if(buf.length() > 0){\r\n                        buf.append(',');\r\n                    }\r\n                    buf.append(key);\r\n                }\r\n            }\r\n            if(buf.length()>0){\r\n                msgBuf.append(\"\\nNot translated entries for language \").append( OTHER_LANGUAGES[i] ).append(\": \");\r\n                msgBuf.append(buf);\r\n            }\r\n\t\t}\t\t\r\n\r\n\t\tif (failed){\r\n            System.err.println(msgBuf);\r\n            fail(msgBuf.toString());\r\n        }\r\n\t}\r\n}\r\n"},{"path":"/src/smallsql/junit/TestAlterTable2.java","source":"/*\r\n * Created on 14.11.2006\r\n */\r\npackage smallsql.junit;\r\n\r\nimport java.sql.*;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\npublic class TestAlterTable2 extends BasicTestCase {\r\n\r\n    private final String table = \"AlterTable2\";\r\n    \r\n    public void setUp(){\r\n        tearDown();\r\n    }\r\n    \r\n    public void tearDown(){\r\n        try {\r\n            dropTable( AllTests.getConnection(), table );\r\n        } catch (SQLException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n    \r\n\r\n    public void testWithPrimaryKey() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"create table \"+table+\" (keyField varchar(2) primary key)\");\r\n        st.execute(\"alter table \"+table+\" add anotherField varchar(4)\");\r\n        ResultSet rs = st.executeQuery(\"Select * From \" + table);\r\n        assertRSMetaData( rs, new String[]{\"keyField\", \"anotherField\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\r\n        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );\r\n        assertRowCount( 1, rs );\r\n    }\r\n    \r\n    \r\n    public void testAddPrimaryKey() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"create table \"+table+\" (a varchar(2))\");\r\n        st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");\r\n        ResultSet rs = st.executeQuery(\"Select * From \" + table);\r\n        assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\r\n        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );\r\n        assertRowCount( 1, rs );\r\n    }\r\n    \r\n    \r\n    public void testAdd2PrimaryKeys() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"create table \"+table+\" (a varchar(2) primary key)\");\r\n        \r\n        try {\r\n            st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");\r\n            fail(\"2 primary keys are invalid\");\r\n        } catch (SQLException ex) {\r\n            assertSQLException(\"01000\",0, ex);\r\n        }\r\n        ResultSet rs = st.executeQuery(\"Select * From \" + table);\r\n        assertRSMetaData( rs, new String[]{\"a\"},  new int[]{Types.VARCHAR} );\r\n        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );\r\n        assertRowCount( 1, rs );\r\n    }\r\n    \r\n\r\n    public void testAdd2Keys() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"create table \"+table+\" (a varchar(2) unique)\");\r\n        st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");\r\n        ResultSet rs = st.executeQuery(\"Select * From \" + table);\r\n        assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\r\n        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );\r\n        assertRowCount( 2, rs );\r\n    }\r\n\r\n}\r\n"},{"path":"/src/smallsql/junit/TestMoneyRounding.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * TestMoneyRounding.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.junit;\r\n\r\nimport junit.framework.*;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.sql.*;\r\n\r\nimport smallsql.database.Money;\r\n\r\npublic class TestMoneyRounding extends TestCase{\r\n\r\n    static final String table = \"TestMoneyRounding\";\r\n\r\n    public void setUp() throws SQLException{\r\n        tearDown();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tst.execute(\"create table \" + table + \"(a money, b smallmoney)\");\r\n    }\r\n\r\n    public void tearDown(){\r\n        try{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + table);\r\n            st.close();\r\n        }catch(Throwable e){\r\n            //e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void testMoney1() throws Exception{\r\n            Connection con = AllTests.getConnection();\r\n            Statement st = con.createStatement();\r\n            int firstValue = -10000;\r\n            for(int i=firstValue; i<10000; i++){\r\n                st.execute(\"Insert into \" + table + \"(a,b) values(\" + (i/10000.0) + \",\" +(i/10000.0) +\")\");\r\n            }\r\n            st.close();\r\n            verify(firstValue);\r\n    }\r\n    \r\n    \r\n    private void verify(int firstValue) throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs = st.executeQuery(\"Select * FROM \" + table);\r\n\t\tlong i = firstValue;\r\n\t\twhile(rs.next()){\r\n\t\t\tObject obj1 = rs.getObject(1);\r\n\t\t\tObject obj2 = rs.getObject(2);\r\n\t\t\tif(obj1 instanceof Money){\r\n\t\t\t\tMoney mon1 = (Money)obj1;\r\n\t\t\t\tMoney mon2 = (Money)obj2;\r\n\t\t\t\tassertEquals(\"Roundungsfehler money:\", i, mon1.unscaledValue());\r\n\t\t\t\tassertEquals(\"Roundungsfehler smallmoney:\", i, mon2.unscaledValue());\r\n\t\t\t}else{\r\n\t\t\t\tBigDecimal mon1 = (BigDecimal)obj1;\r\n\t\t\t\tBigDecimal mon2 = (BigDecimal)obj2;\r\n\t\t\t\tassertEquals(\"Roundungsfehler money:\", i, mon1.unscaledValue().longValue());\r\n\t\t\t\tassertEquals(\"Roundungsfehler smallmoney:\", i, mon2.unscaledValue().longValue());\r\n\t\t\t}\r\n\t\t\ti++;\r\n\t\t}\r\n\t\tst.close();\r\n    }\r\n    \r\n    \r\n\tpublic void testMoney2() throws Exception{\r\n\t\t\tConnection con = AllTests.getConnection();\r\n\t\t\tStatement st = con.createStatement();\r\n\t\t\tint firstValue = -10000;\r\n\t\t\tfor(int i=firstValue; i<10000; i++){\r\n\t\t\t\tst.execute(\"Insert into \" + table + \"(a,b) values( (\" + i + \"/10000.0), (\" + i + \"/10000.0) )\");\r\n\t\t\t}\r\n\t\t\tst.close();\r\n\t\t\tverify(firstValue);\r\n\t}\r\n    \r\n}"},{"path":"/src/smallsql/junit/BenchTest.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * BenchTest.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.junit;\r\n\r\nimport java.sql.*;\r\n\r\npublic class BenchTest\r\n{\r\n    static byte[] byteArray = {23, 34, 67 };\r\n    static byte[] largeByteArray = new byte[4000];\r\n    \r\n    static String driverClassName = \"smallsql.database.SSDriver\";\r\n    static String userName        = \"sa\";\r\n    static String password        = \"\";\r\n    static String jdbcUrl         = \"jdbc:smallsql:AllTests\";\r\n    static int    rowCount        = 10000;\r\n    \r\n    static Connection con;\r\n    static final String tableName = \"BenchTest2\";\r\n        \r\n    \r\n    public static void main(String[] args) throws SQLException{\r\n        for(int i=0; i<args.length;){\r\n            String option = args[i++];\r\n            if      (option.equals(\"-driver\")  ) driverClassName = args[i++];\r\n            else if (option.equals(\"-user\")    ) userName = args[i++];\r\n            else if (option.equals(\"-password\")) password = args[i++];\r\n            else if (option.equals(\"-url\")     ) jdbcUrl  = args[i++];\r\n            else if (option.equals(\"-rowcount\")) rowCount = Integer.parseInt(args[i++]);\r\n            else if (option.equals(\"-?\") | option.equals(\"-help\")){\r\n                System.out.println( \"Valid options are :\\n\\t-driver\\n\\t-url\\n\\t-user\\n\\t-password\\n\\t-rowcount\");\r\n                System.exit(0);\r\n            }\r\n            else {System.out.println(\"Option \" + option + \" is ignored\");i++;}\r\n        }\r\n        System.out.println( \"Driver:  \\t\" + driverClassName);\r\n        System.out.println( \"Username:\\t\" + userName);\r\n        System.out.println( \"Password:\\t\" + password);\r\n        System.out.println( \"JDBC URL:\\t\" + jdbcUrl);\r\n        System.out.println( \"Row Count:\\t\" + rowCount);\r\n        System.out.println();\r\n        try{\r\n            Class.forName(driverClassName).newInstance();\r\n            con = DriverManager.getConnection( jdbcUrl, userName,password);\r\n            System.out.println( con.getMetaData().getDriverName() + \" \" + con.getMetaData().getDriverVersion());\r\n            System.out.println();\r\n            createTestTable( con );\r\n            test_InsertClassic( con );\r\n            test_DeleteAll( con );\r\n            test_InsertEmptyRows( con );\r\n            test_DeleteRows( con );\r\n            test_InsertRows( con );\r\n            test_RowRequestPages( con );\r\n            test_UpdateRows( con );\r\n            test_UpdateRowsPrepare( con );\r\n            test_UpdateRowsPrepareSP( con );\r\n            test_UpdateRowsPrepareBatch( con );\r\n            test_Scroll_getXXX( con );\r\n            test_UpdateLargeBinary( con );\r\n            test_UpdateLargeBinaryWithSP( con );\r\n        }catch(Exception e){\r\n            e.printStackTrace();\r\n        }finally{\r\n            if (con != null){\r\n                //dropTestTable( con );\r\n                con.close();\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n      *  1. Test\r\n      *  Insert rows with default values with a classic insert statement.\r\n      */  \r\n    static void test_InsertClassic(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test insert rows with default values with a classic insert statement: \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                st.execute(\"INSERT INTO \" + tableName + \"(i) VALUES(\" + i +\")\");\r\n            }\r\n            time += System.currentTimeMillis();\r\n            ResultSet rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount)\r\n                System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n      *  2. Test\r\n      *  Delete all rows with a single statement.\r\n      */  \r\n    static void test_DeleteAll(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test delete all rows: \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            long time = -System.currentTimeMillis();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"DELETE FROM \" + tableName);\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n      *  3. Test\r\n      *  Insert only empty rows with the default values of the row with the method insertRow().\r\n      */  \r\n    static void test_InsertEmptyRows(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test insert empty rows with insertRow(): \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            ResultSet rs = st.executeQuery(\"SELECT * FROM \"+tableName);\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                rs.moveToInsertRow();\r\n                rs.insertRow();\r\n            }\r\n            time += System.currentTimeMillis();\r\n            rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount)\r\n                 System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n      *  4. Test\r\n      *  Delete rows with the method deleteRow().\r\n      */  \r\n    static void test_DeleteRows(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test delete rows with deleteRow(): \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st1 = con.createStatement();\r\n            ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\r\n                    return;\r\n                }\r\n            }\r\n            st1.close();\r\n            \r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            rs = st.executeQuery(\"SELECT * FROM \"+tableName);\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                rs.next();\r\n                rs.deleteRow();\r\n            }\r\n            time += System.currentTimeMillis();\r\n            rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            count = rs.getInt(1);\r\n            if (count != 0)\r\n                 System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n      *  5. Test\r\n      *  Insert rows with the method insertRow().\r\n      */  \r\n    static void test_InsertRows(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test insert rows with insertRow(): \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            ResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName);\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n                rs.moveToInsertRow();\r\n\t            rs.updateBytes (  \"bi\", byteArray );\r\n\t            rs.updateString(  \"c\" , \"Test\" );\r\n\t            rs.updateDate  (  \"d\" , new Date( System.currentTimeMillis() ) );\r\n\t            rs.updateFloat (  \"de\", (float)1234.56789 );\r\n\t            rs.updateFloat (  \"f\" , (float)9876.54321 );\r\n\t            rs.updateBytes (  \"im\", largeByteArray );\r\n\t            rs.updateInt   (  \"i\" , i );\r\n\t            rs.updateDouble(  \"m\" , 23.45 );\r\n\t            rs.updateDouble(  \"n\" , 567.45 );\r\n\t            rs.updateFloat (  \"r\" , (float)78.89 );\r\n\t            rs.updateTime  (  \"sd\", new Time( System.currentTimeMillis() ) );\r\n\t            rs.updateShort (  \"si\", (short)i );\r\n\t            rs.updateFloat (  \"sm\", (float)34.56 );\r\n\t            rs.updateString(  \"sy\", \"sysname (30) NULL\" );\r\n\t            rs.updateString(  \"t\" , \"ntext NULL, sample to save in the field\" );\r\n\t            rs.updateByte  (  \"ti\", (byte)i );\r\n\t            rs.updateBytes (  \"vb\", byteArray );\r\n\t            rs.updateString(  \"vc\", \"nvarchar (255) NULL\" );\r\n                rs.insertRow();\r\n            }\r\n            time += System.currentTimeMillis();\r\n            rs = st.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount){\r\n                  st.execute(\"DELETE FROM \" + tableName);\r\n                  System.out.println( \"  Failed: Only \" + count + \" rows were inserted.\");\r\n            }else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n        \te.printStackTrace();\r\n            try{\r\n                // reset for the next test\r\n                Statement st = con.createStatement();\r\n                st.execute(\"DELETE FROM \" + tableName);\r\n                st.close();\r\n            }catch(Exception ee){/* ignore it */}\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n      *  6. Test\r\n      *  Request one page of rows from a large ResultSet.\r\n      */  \r\n    static void test_RowRequestPages(Connection con){\r\n        int pages = 100; \r\n        int rows  = rowCount / pages;\r\n        System.out.println();\r\n        System.out.println( \"Test request row pages : \" + pages + \" pages, \" +rows + \" rows per page\");\r\n        try{\r\n            Statement st1 = con.createStatement();\r\n            ResultSet rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n            rs.next();\r\n            int count = rs.getInt(1);\r\n            if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");\r\n                    return;\r\n                }\r\n            }\r\n            st1.close();\r\n            \r\n            long time = -System.currentTimeMillis();\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);\r\n            st.setFetchSize( rows );\r\n            for (int i=0; i<pages; i++){\r\n                rs = st.executeQuery(\"SELECT * FROM \" + tableName);\r\n                rs.absolute( i*rows+1 );\r\n                for (int r=1; r<rows; r++){\r\n                    // only (rows-1) rows because absolute has already the first row\r\n                    if (!rs.next()){\r\n                        System.out.println( \"  Failed: No rows were found at page \" + i + \" page and row \" + r);\r\n                        return;\r\n                    }\r\n                    int col_i = rs.getInt(\"i\");\r\n                    if (col_i != (i*rows+r)){\r\n                        System.out.println( \"  Failed: Wrong row \" + col_i + \", it should be row \" + (i*rows+r));\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    /**\r\n      *  7. Test\r\n      *  Update rows with the method updateRow().\r\n      */  \r\n    static void test_UpdateRows(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test update rows with updateRow(): \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement( ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );\r\n            ResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName);\r\n            int colCount = rs.getMetaData().getColumnCount();\r\n            long time = -System.currentTimeMillis();\r\n            int count = 0;\r\n            while(rs.next()){\r\n                for (int i=2; i<=colCount; i++){\r\n                    rs.updateObject( i, rs.getObject(i) );\r\n                }\r\n                rs.updateRow();\r\n                count++;\r\n            }\r\n            time += System.currentTimeMillis();\r\n            if (count != rowCount)\r\n                 System.out.println( \"  Failed: Only \" + count + \" rows were updated.\");\r\n            else System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\" + e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n      *  8. Test\r\n      *  Update rows with a PreparedStatement.\r\n      */  \r\n    static void test_UpdateRowsPrepare(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test update rows with a PreparedStatement: \" + rowCount + \" rows\");\r\n        try{\r\n            PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n\t            pr.setBytes (  1, byteArray );\r\n\t            pr.setString(  2 , \"Test\" );\r\n\t            pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );\r\n\t            pr.setFloat (  4, (float)1234.56789 );\r\n\t            pr.setFloat (  5 , (float)9876.54321 );\r\n\t            pr.setBytes (  6, largeByteArray );\r\n\t            pr.setInt   (  7 , i );\r\n\t            pr.setDouble(  8 , 23.45 );\r\n\t            pr.setDouble(  9 , 567.45 );\r\n\t            pr.setFloat (  10 , (float)78.89 );\r\n\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t            pr.setShort (  12, (short)23456 );\r\n\t            pr.setFloat (  13, (float)34.56 );\r\n\t            pr.setString(  14, \"sysname (30) NULL\" );\r\n\t            pr.setString(  15 , \"text NULL\" );\r\n\t            pr.setByte  (  16, (byte)28 );\r\n\t            pr.setBytes (  17, byteArray );\r\n\t            pr.setString(  18, \"varchar (255) NULL\" );\r\n\t            pr.setInt   (  19 , i );\r\n                int updateCount = pr.executeUpdate();\r\n                if (updateCount != 1){\r\n                    System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");\r\n                    return;\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            pr.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n      *  9. Test\r\n      *  Update rows with a PreparedStatement and a stored procedure.\r\n      */  \r\n    static void test_UpdateRowsPrepareSP(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test update rows with a PreparedStatement and a stored procedure: \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement();\r\n            try{st.execute(\"drop procedure sp_\"+tableName);}catch(Exception e){/* ignore it */}\r\n            st.execute(\"create procedure sp_\"+tableName+\" (@bi binary,@c nchar(255),@d datetime,@de decimal,@f float,@im image,@i int,@m money,@n numeric(18, 0),@r real,@sd smalldatetime,@si smallint,@sm smallmoney,@sy sysname,@t ntext,@ti tinyint,@vb varbinary(255),@vc nvarchar(255)) as UPDATE \" + tableName + \" SET bi=@bi,c=@c,d=@d,de=@de,f=@f,im=@im,i=@i,m=@m,n=@n,r=@r,sd=@sd,si=@si,sm=@sm,sy=@sy,t=@t,ti=@ti,vb=@vb,vc=@vc WHERE i=@i\");\r\n\r\n            PreparedStatement pr = con.prepareStatement( \"exec sp_\" + tableName + \" ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?\" );\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<rowCount; i++){\r\n\t            pr.setBytes (  1, byteArray );\r\n\t            pr.setString(  2 , \"Test\" );\r\n\t            pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );\r\n\t            pr.setFloat (  4, (float)1234.56789 );\r\n\t            pr.setFloat (  5 , (float)9876.54321 );\r\n\t            pr.setBytes (  6, largeByteArray );\r\n\t            pr.setInt   (  7 , i );\r\n\t            pr.setDouble(  8 , 23.45 );\r\n\t            pr.setDouble(  9 , 567.45 );\r\n\t            pr.setFloat (  10 , (float)78.89 );\r\n\t            pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t            pr.setShort (  12, (short)23456 );\r\n\t            pr.setFloat (  13, (float)34.56 );\r\n\t            pr.setString(  14, \"sysname (30) NULL\" );\r\n\t            pr.setString(  15 , \"text NULL\" );\r\n\t            pr.setByte  (  16, (byte)28 );\r\n\t            pr.setBytes (  17, byteArray );\r\n\t            pr.setString(  18, \"varchar (255) NULL\" );\r\n                int updateCount = pr.executeUpdate();\r\n                if (updateCount != 1){\r\n                    System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");\r\n                    return;\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.execute(\"drop procedure sp_\"+tableName);\r\n            st.close();\r\n            pr.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }\r\n    \r\n\r\n    \r\n    /**\r\n      *  10. Test\r\n      *  Update rows with a PreparedStatement and Batch.\r\n      */  \r\n    static void test_UpdateRowsPrepareBatch(Connection con){\r\n        int batchSize = 10;\r\n        int batches = rowCount / batchSize;\r\n        System.out.println();\r\n        System.out.println( \"Test update rows with PreparedStatement and Batches: \" + batches + \" batches, \" + batchSize + \" batch size\");\r\n        \r\n        try{\r\n            PreparedStatement pr = con.prepareStatement( \"UPDATE \" + tableName + \" SET bi=?,c=?,d=?,de=?,f=?,im=?,i=?,m=?,n=?,r=?,sd=?,si=?,sm=?,sy=?,t=?,ti=?,vb=?,vc=? WHERE i=?\" );\r\n            long time = -System.currentTimeMillis();\r\n            for (int i=0; i<batches; i++){\r\n                for (int r=0; r<batchSize; r++){\r\n\t                pr.setBytes (  1, byteArray );\r\n\t                pr.setString(  2 , \"Test\" );\r\n\t                pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );\r\n\t                pr.setFloat (  4, (float)1234.56789 );\r\n\t                pr.setFloat (  5 , (float)9876.54321 );\r\n\t                pr.setBytes (  6, largeByteArray );\r\n\t                pr.setInt   (  7 , i*batchSize + r );\r\n\t                pr.setDouble(  8 , 23.45 );\r\n\t                pr.setDouble(  9 , 567.45 );\r\n\t                pr.setFloat (  10 , (float)78.89 );\r\n\t                pr.setTime  (  11, new Time( System.currentTimeMillis() ) );\r\n\t                pr.setShort (  12, (short)23456 );\r\n\t                pr.setFloat (  13, (float)34.56 );\r\n\t                pr.setString(  14, \"sysname (30) NULL\" );\r\n\t                pr.setString(  15 , \"text NULL\" );\r\n\t                pr.setByte  (  16, (byte)28 );\r\n\t                pr.setBytes (  17, byteArray );\r\n\t                pr.setString(  18, \"varchar (255) NULL\" );\r\n\t                pr.setInt   (  19 , i );\r\n\t                pr.addBatch();\r\n\t            }\r\n                int[] updateCount = pr.executeBatch();\r\n                if (updateCount.length != batchSize){\r\n                    System.out.println( \"  Failed: Update count size should be \" + batchSize + \" but it is \" + updateCount.length + \".\");\r\n                    return;\r\n                }\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            pr.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }\r\n     \r\n    \r\n    \r\n    /**\r\n      *  11. Test\r\n      *  Scroll and call the getXXX methods for every columns.\r\n      */  \r\n    static void test_Scroll_getXXX(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test scroll and call the getXXX methods for every columns: \" + rowCount + \" rows\");\r\n        \r\n        try{\r\n            Statement st = con.createStatement();\r\n            long time = -System.currentTimeMillis();\r\n            ResultSet rs = st.executeQuery(\"SELECT * FROM \" + tableName);\r\n            for (int i=0; i<rowCount; i++){\r\n                    rs.next();\r\n\t                rs.getInt   (  1 );\r\n\t                rs.getBytes (  2 );\r\n\t                rs.getString(  3 );\r\n\t                rs.getDate  (  4 );\r\n\t                rs.getFloat (  5 );\r\n\t                rs.getFloat (  6 );\r\n\t                rs.getBytes (  7 );\r\n\t                rs.getInt   (  8 );\r\n\t                rs.getDouble(  9 );\r\n\t                rs.getDouble(  10 );\r\n\t                rs.getFloat (  11 );\r\n\t                rs.getTime  (  12 );\r\n\t                rs.getShort (  13 );\r\n\t                rs.getFloat (  14 );\r\n\t                rs.getString(  15 );\r\n\t                rs.getString(  16 );\r\n\t                rs.getByte  (  17 );\r\n\t                rs.getBytes (  18 );\r\n\t                rs.getString(  19 );\r\n            }\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            st.close();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }\r\n     \r\n    \r\n    /**\r\n      *  12. Test\r\n      *  Update large binary data.\r\n      */  \r\n    static void test_UpdateLargeBinary(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test update large binary data: \" + rowCount + \"KB bytes\");\r\n        \r\n        try{\r\n            java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");\r\n            byte bytes[] = new byte[1024];\r\n            for(int i=0; i<rowCount; i++){\r\n                fos.write(bytes);\r\n            }\r\n            fos.close();\r\n            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");\r\n            long time = -System.currentTimeMillis();\r\n            PreparedStatement pr = con.prepareStatement(\"Update \" + tableName + \" set im=? WHERE pr=1\");\r\n            pr.setBinaryStream( 1, fis, rowCount*1024 );\r\n            pr.execute();\r\n            pr.close();\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            fis.close();\r\n            java.io.File file = new java.io.File(tableName+\".bin\");\r\n            file.delete();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }\r\n     \r\n    \r\n\r\n    \r\n    /**\r\n      *  12. Test\r\n      *  Update large binary data with a SP.\r\n      */  \r\n    static void test_UpdateLargeBinaryWithSP(Connection con){\r\n        System.out.println();\r\n        System.out.println( \"Test update large binary data with a SP: \" + rowCount + \"KB bytes\");\r\n        \r\n        try{\r\n            java.io.FileOutputStream fos = new java.io.FileOutputStream(tableName+\".bin\");\r\n            byte bytes[] = new byte[1024];\r\n            for(int i=0; i<rowCount; i++){\r\n                fos.write(bytes);\r\n            }\r\n            fos.close();\r\n            java.io.FileInputStream fis = new java.io.FileInputStream(tableName+\".bin\");\r\n            long time = -System.currentTimeMillis();\r\n            Statement st = con.createStatement();\r\n            st.execute(\"CREATE PROCEDURE #UpdateLargeBinary(@im image) as Update \" + tableName + \" set im=@im WHERE pr=2\");\r\n            PreparedStatement pr = con.prepareStatement(\"exec #UpdateLargeBinary ?\");\r\n            pr.setBinaryStream( 1, fis, rowCount*1024 );\r\n            pr.execute();\r\n            st.execute(\"DROP PROCEDURE #UpdateLargeBinary\");\r\n            st.close();\r\n            pr.close();\r\n            time += System.currentTimeMillis();\r\n            System.out.println( \"  Test time: \" + time + \" ms\");\r\n            fis.close();\r\n            java.io.File file = new java.io.File(tableName+\".bin\");\r\n            file.delete();\r\n        }catch(Exception e){\r\n            System.out.println(\"  Failed:\"+e);\r\n        }finally{\r\n            System.out.println();\r\n            System.out.println(\"===================================================================\");\r\n        }\r\n    }\r\n     \r\n    \r\n\r\n    \r\n    /**\r\n      *  Create a new Table for testing\r\n      */  \r\n    static void createTestTable(Connection con) throws SQLException{\r\n            Statement st;\r\n            st = con.createStatement();\r\n            //delete old table\r\n            dropTestTable( con );\r\n\r\n            //create table\r\n            st.execute(\r\n                \"CREATE TABLE \" + tableName + \" (\"+\r\n\t            \"    pr  numeric IDENTITY,\"+\r\n\t            \"    bi  binary (255) NULL ,\"+\r\n\t            \"    c   nchar (255) NULL ,\"+\r\n\t            \"    d   datetime NULL ,\"+\r\n\t            \"    de  decimal(18, 0) NULL ,\"+\r\n\t            \"    f   float NULL ,\"+\r\n\t            \"    im  image NULL ,\"+\r\n\t            \"    i   int NULL ,\"+\r\n\t            \"    m   money NULL ,\"+\r\n\t            \"    n   numeric(18, 0) NULL ,\"+\r\n\t            \"    r   real NULL ,\"+\r\n\t            \"    sd  smalldatetime NULL ,\"+\r\n\t            \"    si  smallint NULL ,\"+\r\n\t            \"    sm  smallmoney NULL ,\"+\r\n\t            \"    sy  sysname NULL ,\"+\r\n\t            \"    t   ntext NULL ,\"+\r\n\t            \"    ti  tinyint NULL ,\"+\r\n\t            \"    vb  varbinary (255) NULL ,\"+\r\n\t            \"    vc  nvarchar (255) NULL, \"+\r\n\t            \"CONSTRAINT PK_BenchTest2 PRIMARY KEY CLUSTERED (pr) \"+\r\n\t            \")\");\r\n\t        st.close();  \r\n    }\r\n    \r\n\r\n    \r\n    static void deleteTestTable(Connection con){\r\n        try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"DELETE FROM \" + tableName);\r\n            st.close();\r\n        }catch(Exception e){/* ignore it */}\r\n    }\r\n\r\n    static void dropTestTable(Connection con){\r\n        try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"drop table \" + tableName);\r\n            st.close();\r\n        }catch(Exception e){/* ignore it */}\r\n    }\r\n    \r\n    // create test data after the insert test is failed\r\n    static void createTestDataWithClassicInsert(Connection con) throws SQLException{\r\n        String sql = \"INSERT INTO \" + tableName + \"(bi,c,d,de,f,im,i,m,n,r,si,sd,sm,sy,t,ti,vb,vc) VALUES(0x172243,'Test','20010101',1234.56789,9876.54321,0x\";\r\n        for(int i=0; i<largeByteArray.length; i++){\r\n            sql += \"00\";\r\n        }\r\n        Statement st = con.createStatement();\r\n        for (int i=0; i<rowCount; i++){\r\n            st.execute(sql + \",\"+i+\",23.45,567.45,78.89,\"+i+\",'11:11:11',34.56,'sysname (30) NULL','ntext NULL, sample to save in the field',\"+(i & 0xFF)+\",0x172243,'nvarchar (255) NULL')\"  );\r\n        }\r\n        st.close();\r\n    }\r\n}"},{"path":"/src/smallsql/database/ExpressionFunctionYear.java","source":"/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionMonth.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 17.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionYear extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.YEAR;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.year;\r\n\t}\r\n\r\n}\r\n"}]}